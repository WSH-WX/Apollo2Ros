// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fem_pos_deviation_smoother_config.proto

#include "fem_pos_deviation_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace nav2_smac_planner {
class FemPosDeviationSmootherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FemPosDeviationSmootherConfig> _instance;
} _FemPosDeviationSmootherConfig_default_instance_;
}  // namespace nav2_smac_planner
static void InitDefaultsscc_info_FemPosDeviationSmootherConfig_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nav2_smac_planner::_FemPosDeviationSmootherConfig_default_instance_;
    new (ptr) ::nav2_smac_planner::FemPosDeviationSmootherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nav2_smac_planner::FemPosDeviationSmootherConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FemPosDeviationSmootherConfig_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FemPosDeviationSmootherConfig_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, weight_fem_pos_deviation_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, weight_ref_deviation_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, weight_path_length_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, apply_curvature_constraint_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, weight_curvature_constraint_slack_var_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, curvature_constraint_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, use_sqp_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, sqp_ftol_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, sqp_ctol_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, sqp_pen_max_iter_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, sqp_sub_max_iter_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, max_iter_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, time_limit_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, verbose_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, scaled_termination_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, warm_start_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, print_level_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, max_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, acceptable_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, tol_),
  PROTOBUF_FIELD_OFFSET(::nav2_smac_planner::FemPosDeviationSmootherConfig, acceptable_tol_),
  4,
  5,
  6,
  1,
  7,
  8,
  13,
  9,
  10,
  11,
  12,
  16,
  0,
  2,
  14,
  15,
  3,
  17,
  18,
  19,
  20,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, sizeof(::nav2_smac_planner::FemPosDeviationSmootherConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nav2_smac_planner::_FemPosDeviationSmootherConfig_default_instance_),
};

const char descriptor_table_protodef_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'fem_pos_deviation_smoother_config.prot"
  "o\022\021nav2_smac_planner\"\255\005\n\035FemPosDeviation"
  "SmootherConfig\022\'\n\030weight_fem_pos_deviati"
  "on\030\002 \001(\001:\00510000\022\037\n\024weight_ref_deviation\030"
  "\003 \001(\001:\0011\022\035\n\022weight_path_length\030\004 \001(\001:\0011\022"
  ")\n\032apply_curvature_constraint\030\005 \001(\010:\005fal"
  "se\0222\n%weight_curvature_constraint_slack_"
  "var\030\006 \001(\001:\003100\022\037\n\024curvature_constraint\030\007"
  " \001(\001:\0011\022\025\n\007use_sqp\030\010 \001(\010:\004true\022\030\n\010sqp_ft"
  "ol\030\t \001(\001:\0060.0001\022\027\n\010sqp_ctol\030\n \001(\001:\0050.00"
  "1\022\034\n\020sqp_pen_max_iter\030\013 \001(\005:\00210\022\035\n\020sqp_s"
  "ub_max_iter\030\014 \001(\005:\003100\022\025\n\010max_iter\030d \001(\005"
  ":\003500\022\025\n\ntime_limit\030e \001(\001:\0010\022\026\n\007verbose\030"
  "f \001(\010:\005false\022 \n\022scaled_termination\030g \001(\010"
  ":\004true\022\030\n\nwarm_start\030h \001(\010:\004true\022\027\n\013prin"
  "t_level\030\310\001 \001(\005:\0010\022#\n\025max_num_of_iteratio"
  "ns\030\311\001 \001(\005:\003500\022)\n\034acceptable_num_of_iter"
  "ations\030\312\001 \001(\005:\00215\022\023\n\003tol\030\313\001 \001(\001:\0051e-08\022\034"
  "\n\016acceptable_tol\030\314\001 \001(\001:\0030.1"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_sccs[1] = {
  &scc_info_FemPosDeviationSmootherConfig_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto, "fem_pos_deviation_smoother_config.proto", 748,
  &descriptor_table_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_once, descriptor_table_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_sccs, descriptor_table_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::offsets,
  file_level_metadata_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto, 1, file_level_enum_descriptors_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto, file_level_service_descriptors_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto)), true);
namespace nav2_smac_planner {

// ===================================================================

void FemPosDeviationSmootherConfig::InitAsDefaultInstance() {
}
class FemPosDeviationSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FemPosDeviationSmootherConfig>()._has_bits_);
  static void set_has_weight_fem_pos_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_weight_ref_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_weight_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_apply_curvature_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight_curvature_constraint_slack_var(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_curvature_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_use_sqp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_sqp_ftol(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sqp_ctol(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sqp_pen_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sqp_sub_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_time_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_verbose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scaled_termination(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_warm_start(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_print_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_num_of_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_acceptable_num_of_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_acceptable_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:nav2_smac_planner.FemPosDeviationSmootherConfig)
}
FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig(const FemPosDeviationSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_limit_, &from.time_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptable_tol_) -
    reinterpret_cast<char*>(&time_limit_)) + sizeof(acceptable_tol_));
  // @@protoc_insertion_point(copy_constructor:nav2_smac_planner.FemPosDeviationSmootherConfig)
}

void FemPosDeviationSmootherConfig::SharedCtor() {
  ::memset(&time_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&print_level_) -
      reinterpret_cast<char*>(&time_limit_)) + sizeof(print_level_));
  weight_fem_pos_deviation_ = 10000;
  weight_ref_deviation_ = 1;
  weight_path_length_ = 1;
  weight_curvature_constraint_slack_var_ = 100;
  curvature_constraint_ = 1;
  sqp_ftol_ = 0.0001;
  sqp_ctol_ = 0.001;
  sqp_pen_max_iter_ = 10;
  sqp_sub_max_iter_ = 100;
  use_sqp_ = true;
  scaled_termination_ = true;
  warm_start_ = true;
  max_iter_ = 500;
  max_num_of_iterations_ = 500;
  acceptable_num_of_iterations_ = 15;
  tol_ = 1e-08;
  acceptable_tol_ = 0.1;
}

FemPosDeviationSmootherConfig::~FemPosDeviationSmootherConfig() {
  // @@protoc_insertion_point(destructor:nav2_smac_planner.FemPosDeviationSmootherConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FemPosDeviationSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FemPosDeviationSmootherConfig::ArenaDtor(void* object) {
  FemPosDeviationSmootherConfig* _this = reinterpret_cast< FemPosDeviationSmootherConfig* >(object);
  (void)_this;
}
void FemPosDeviationSmootherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FemPosDeviationSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FemPosDeviationSmootherConfig& FemPosDeviationSmootherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FemPosDeviationSmootherConfig_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void FemPosDeviationSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:nav2_smac_planner.FemPosDeviationSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&print_level_) -
        reinterpret_cast<char*>(&time_limit_)) + sizeof(print_level_));
    weight_fem_pos_deviation_ = 10000;
    weight_ref_deviation_ = 1;
    weight_path_length_ = 1;
    weight_curvature_constraint_slack_var_ = 100;
  }
  if (cached_has_bits & 0x0000ff00u) {
    curvature_constraint_ = 1;
    sqp_ftol_ = 0.0001;
    sqp_ctol_ = 0.001;
    sqp_pen_max_iter_ = 10;
    sqp_sub_max_iter_ = 100;
    use_sqp_ = true;
    scaled_termination_ = true;
    warm_start_ = true;
  }
  if (cached_has_bits & 0x001f0000u) {
    max_iter_ = 500;
    max_num_of_iterations_ = 500;
    acceptable_num_of_iterations_ = 15;
    tol_ = 1e-08;
    acceptable_tol_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FemPosDeviationSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double weight_fem_pos_deviation = 2 [default = 10000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_weight_fem_pos_deviation(&has_bits);
          weight_fem_pos_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_ref_deviation = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_weight_ref_deviation(&has_bits);
          weight_ref_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_path_length = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_weight_path_length(&has_bits);
          weight_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool apply_curvature_constraint = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_apply_curvature_constraint(&has_bits);
          apply_curvature_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_weight_curvature_constraint_slack_var(&has_bits);
          weight_curvature_constraint_slack_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double curvature_constraint = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_curvature_constraint(&has_bits);
          curvature_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_sqp = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_use_sqp(&has_bits);
          use_sqp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double sqp_ftol = 9 [default = 0.0001];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_sqp_ftol(&has_bits);
          sqp_ftol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sqp_ctol = 10 [default = 0.001];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_sqp_ctol(&has_bits);
          sqp_ctol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 sqp_pen_max_iter = 11 [default = 10];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_sqp_pen_max_iter(&has_bits);
          sqp_pen_max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sqp_sub_max_iter = 12 [default = 100];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_sqp_sub_max_iter(&has_bits);
          sqp_sub_max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_iter = 100 [default = 500];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_iter(&has_bits);
          max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double time_limit = 101 [default = 0];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_time_limit(&has_bits);
          time_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool verbose = 102 [default = false];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_verbose(&has_bits);
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool scaled_termination = 103 [default = true];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_scaled_termination(&has_bits);
          scaled_termination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool warm_start = 104 [default = true];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_warm_start(&has_bits);
          warm_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 print_level = 200 [default = 0];
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_print_level(&has_bits);
          print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_num_of_iterations = 201 [default = 500];
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_num_of_iterations(&has_bits);
          max_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 acceptable_num_of_iterations = 202 [default = 15];
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_acceptable_num_of_iterations(&has_bits);
          acceptable_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double tol = 203 [default = 1e-08];
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_tol(&has_bits);
          tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceptable_tol = 204 [default = 0.1];
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_acceptable_tol(&has_bits);
          acceptable_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FemPosDeviationSmootherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nav2_smac_planner.FemPosDeviationSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_fem_pos_deviation = 2 [default = 10000];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_fem_pos_deviation(), target);
  }

  // optional double weight_ref_deviation = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_ref_deviation(), target);
  }

  // optional double weight_path_length = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_weight_path_length(), target);
  }

  // optional bool apply_curvature_constraint = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_apply_curvature_constraint(), target);
  }

  // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_weight_curvature_constraint_slack_var(), target);
  }

  // optional double curvature_constraint = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature_constraint(), target);
  }

  // optional bool use_sqp = 8 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_use_sqp(), target);
  }

  // optional double sqp_ftol = 9 [default = 0.0001];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_sqp_ftol(), target);
  }

  // optional double sqp_ctol = 10 [default = 0.001];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_sqp_ctol(), target);
  }

  // optional int32 sqp_pen_max_iter = 11 [default = 10];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_sqp_pen_max_iter(), target);
  }

  // optional int32 sqp_sub_max_iter = 12 [default = 100];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_sqp_sub_max_iter(), target);
  }

  // optional int32 max_iter = 100 [default = 500];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_max_iter(), target);
  }

  // optional double time_limit = 101 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(101, this->_internal_time_limit(), target);
  }

  // optional bool verbose = 102 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(102, this->_internal_verbose(), target);
  }

  // optional bool scaled_termination = 103 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(103, this->_internal_scaled_termination(), target);
  }

  // optional bool warm_start = 104 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(104, this->_internal_warm_start(), target);
  }

  // optional int32 print_level = 200 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(200, this->_internal_print_level(), target);
  }

  // optional int32 max_num_of_iterations = 201 [default = 500];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(201, this->_internal_max_num_of_iterations(), target);
  }

  // optional int32 acceptable_num_of_iterations = 202 [default = 15];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(202, this->_internal_acceptable_num_of_iterations(), target);
  }

  // optional double tol = 203 [default = 1e-08];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(203, this->_internal_tol(), target);
  }

  // optional double acceptable_tol = 204 [default = 0.1];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(204, this->_internal_acceptable_tol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nav2_smac_planner.FemPosDeviationSmootherConfig)
  return target;
}

size_t FemPosDeviationSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nav2_smac_planner.FemPosDeviationSmootherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double time_limit = 101 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional bool apply_curvature_constraint = 5 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool verbose = 102 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional int32 print_level = 200 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_print_level());
    }

    // optional double weight_fem_pos_deviation = 2 [default = 10000];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double weight_ref_deviation = 3 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double weight_path_length = 4 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double curvature_constraint = 7 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double sqp_ftol = 9 [default = 0.0001];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double sqp_ctol = 10 [default = 0.001];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 sqp_pen_max_iter = 11 [default = 10];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sqp_pen_max_iter());
    }

    // optional int32 sqp_sub_max_iter = 12 [default = 100];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sqp_sub_max_iter());
    }

    // optional bool use_sqp = 8 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool scaled_termination = 103 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool warm_start = 104 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional int32 max_iter = 100 [default = 500];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_iter());
    }

    // optional int32 max_num_of_iterations = 201 [default = 500];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_num_of_iterations());
    }

    // optional int32 acceptable_num_of_iterations = 202 [default = 15];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_acceptable_num_of_iterations());
    }

    // optional double tol = 203 [default = 1e-08];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double acceptable_tol = 204 [default = 0.1];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FemPosDeviationSmootherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nav2_smac_planner.FemPosDeviationSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FemPosDeviationSmootherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FemPosDeviationSmootherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nav2_smac_planner.FemPosDeviationSmootherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nav2_smac_planner.FemPosDeviationSmootherConfig)
    MergeFrom(*source);
  }
}

void FemPosDeviationSmootherConfig::MergeFrom(const FemPosDeviationSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nav2_smac_planner.FemPosDeviationSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_limit_ = from.time_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      apply_curvature_constraint_ = from.apply_curvature_constraint_;
    }
    if (cached_has_bits & 0x00000004u) {
      verbose_ = from.verbose_;
    }
    if (cached_has_bits & 0x00000008u) {
      print_level_ = from.print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_fem_pos_deviation_ = from.weight_fem_pos_deviation_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_ref_deviation_ = from.weight_ref_deviation_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_path_length_ = from.weight_path_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_curvature_constraint_slack_var_ = from.weight_curvature_constraint_slack_var_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      curvature_constraint_ = from.curvature_constraint_;
    }
    if (cached_has_bits & 0x00000200u) {
      sqp_ftol_ = from.sqp_ftol_;
    }
    if (cached_has_bits & 0x00000400u) {
      sqp_ctol_ = from.sqp_ctol_;
    }
    if (cached_has_bits & 0x00000800u) {
      sqp_pen_max_iter_ = from.sqp_pen_max_iter_;
    }
    if (cached_has_bits & 0x00001000u) {
      sqp_sub_max_iter_ = from.sqp_sub_max_iter_;
    }
    if (cached_has_bits & 0x00002000u) {
      use_sqp_ = from.use_sqp_;
    }
    if (cached_has_bits & 0x00004000u) {
      scaled_termination_ = from.scaled_termination_;
    }
    if (cached_has_bits & 0x00008000u) {
      warm_start_ = from.warm_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      max_iter_ = from.max_iter_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_num_of_iterations_ = from.max_num_of_iterations_;
    }
    if (cached_has_bits & 0x00040000u) {
      acceptable_num_of_iterations_ = from.acceptable_num_of_iterations_;
    }
    if (cached_has_bits & 0x00080000u) {
      tol_ = from.tol_;
    }
    if (cached_has_bits & 0x00100000u) {
      acceptable_tol_ = from.acceptable_tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FemPosDeviationSmootherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nav2_smac_planner.FemPosDeviationSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FemPosDeviationSmootherConfig::CopyFrom(const FemPosDeviationSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nav2_smac_planner.FemPosDeviationSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FemPosDeviationSmootherConfig::IsInitialized() const {
  return true;
}

void FemPosDeviationSmootherConfig::InternalSwap(FemPosDeviationSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FemPosDeviationSmootherConfig, print_level_)
      + sizeof(FemPosDeviationSmootherConfig::print_level_)
      - PROTOBUF_FIELD_OFFSET(FemPosDeviationSmootherConfig, time_limit_)>(
          reinterpret_cast<char*>(&time_limit_),
          reinterpret_cast<char*>(&other->time_limit_));
  swap(weight_fem_pos_deviation_, other->weight_fem_pos_deviation_);
  swap(weight_ref_deviation_, other->weight_ref_deviation_);
  swap(weight_path_length_, other->weight_path_length_);
  swap(weight_curvature_constraint_slack_var_, other->weight_curvature_constraint_slack_var_);
  swap(curvature_constraint_, other->curvature_constraint_);
  swap(sqp_ftol_, other->sqp_ftol_);
  swap(sqp_ctol_, other->sqp_ctol_);
  swap(sqp_pen_max_iter_, other->sqp_pen_max_iter_);
  swap(sqp_sub_max_iter_, other->sqp_sub_max_iter_);
  swap(use_sqp_, other->use_sqp_);
  swap(scaled_termination_, other->scaled_termination_);
  swap(warm_start_, other->warm_start_);
  swap(max_iter_, other->max_iter_);
  swap(max_num_of_iterations_, other->max_num_of_iterations_);
  swap(acceptable_num_of_iterations_, other->acceptable_num_of_iterations_);
  swap(tol_, other->tol_);
  swap(acceptable_tol_, other->acceptable_tol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FemPosDeviationSmootherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nav2_smac_planner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nav2_smac_planner::FemPosDeviationSmootherConfig* Arena::CreateMaybeMessage< ::nav2_smac_planner::FemPosDeviationSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nav2_smac_planner::FemPosDeviationSmootherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
