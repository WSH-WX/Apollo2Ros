// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planner_open_space_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_planner_5fopen_5fspace_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_planner_5fopen_5fspace_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fem_pos_deviation_smoother_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planner_5fopen_5fspace_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_planner_5fopen_5fspace_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto;
namespace nav2_smac_planner {
class DistanceApproachConfig;
class DistanceApproachConfigDefaultTypeInternal;
extern DistanceApproachConfigDefaultTypeInternal _DistanceApproachConfig_default_instance_;
class DualVariableConfig;
class DualVariableConfigDefaultTypeInternal;
extern DualVariableConfigDefaultTypeInternal _DualVariableConfig_default_instance_;
class DualVariableWarmStartConfig;
class DualVariableWarmStartConfigDefaultTypeInternal;
extern DualVariableWarmStartConfigDefaultTypeInternal _DualVariableWarmStartConfig_default_instance_;
class IpoptConfig;
class IpoptConfigDefaultTypeInternal;
extern IpoptConfigDefaultTypeInternal _IpoptConfig_default_instance_;
class IpoptSolverConfig;
class IpoptSolverConfigDefaultTypeInternal;
extern IpoptSolverConfigDefaultTypeInternal _IpoptSolverConfig_default_instance_;
class IterativeAnchoringConfig;
class IterativeAnchoringConfigDefaultTypeInternal;
extern IterativeAnchoringConfigDefaultTypeInternal _IterativeAnchoringConfig_default_instance_;
class OSQPConfig;
class OSQPConfigDefaultTypeInternal;
extern OSQPConfigDefaultTypeInternal _OSQPConfig_default_instance_;
class PlannerOpenSpaceConfig;
class PlannerOpenSpaceConfigDefaultTypeInternal;
extern PlannerOpenSpaceConfigDefaultTypeInternal _PlannerOpenSpaceConfig_default_instance_;
class ROIConfig;
class ROIConfigDefaultTypeInternal;
extern ROIConfigDefaultTypeInternal _ROIConfig_default_instance_;
class SpeedOptimizerConfig;
class SpeedOptimizerConfigDefaultTypeInternal;
extern SpeedOptimizerConfigDefaultTypeInternal _SpeedOptimizerConfig_default_instance_;
class WarmStartConfig;
class WarmStartConfigDefaultTypeInternal;
extern WarmStartConfigDefaultTypeInternal _WarmStartConfig_default_instance_;
}  // namespace nav2_smac_planner
PROTOBUF_NAMESPACE_OPEN
template<> ::nav2_smac_planner::DistanceApproachConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::DistanceApproachConfig>(Arena*);
template<> ::nav2_smac_planner::DualVariableConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::DualVariableConfig>(Arena*);
template<> ::nav2_smac_planner::DualVariableWarmStartConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::DualVariableWarmStartConfig>(Arena*);
template<> ::nav2_smac_planner::IpoptConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::IpoptConfig>(Arena*);
template<> ::nav2_smac_planner::IpoptSolverConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::IpoptSolverConfig>(Arena*);
template<> ::nav2_smac_planner::IterativeAnchoringConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::IterativeAnchoringConfig>(Arena*);
template<> ::nav2_smac_planner::OSQPConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::OSQPConfig>(Arena*);
template<> ::nav2_smac_planner::PlannerOpenSpaceConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::PlannerOpenSpaceConfig>(Arena*);
template<> ::nav2_smac_planner::ROIConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::ROIConfig>(Arena*);
template<> ::nav2_smac_planner::SpeedOptimizerConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::SpeedOptimizerConfig>(Arena*);
template<> ::nav2_smac_planner::WarmStartConfig* Arena::CreateMaybeMessage<::nav2_smac_planner::WarmStartConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nav2_smac_planner {

enum DualWarmUpMode : int {
  IPOPT = 0,
  IPOPTQP = 1,
  OSQP = 2,
  DEBUG = 3,
  SLACKQP = 4
};
bool DualWarmUpMode_IsValid(int value);
constexpr DualWarmUpMode DualWarmUpMode_MIN = IPOPT;
constexpr DualWarmUpMode DualWarmUpMode_MAX = SLACKQP;
constexpr int DualWarmUpMode_ARRAYSIZE = DualWarmUpMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DualWarmUpMode_descriptor();
template<typename T>
inline const std::string& DualWarmUpMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DualWarmUpMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DualWarmUpMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DualWarmUpMode_descriptor(), enum_t_value);
}
inline bool DualWarmUpMode_Parse(
    const std::string& name, DualWarmUpMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DualWarmUpMode>(
    DualWarmUpMode_descriptor(), name, value);
}
enum DistanceApproachMode : int {
  DISTANCE_APPROACH_IPOPT = 0,
  DISTANCE_APPROACH_IPOPT_CUDA = 1,
  DISTANCE_APPROACH_IPOPT_FIXED_TS = 2,
  DISTANCE_APPROACH_IPOPT_FIXED_DUAL = 3,
  DISTANCE_APPROACH_IPOPT_RELAX_END = 4,
  DISTANCE_APPROACH_IPOPT_RELAX_END_SLACK = 5
};
bool DistanceApproachMode_IsValid(int value);
constexpr DistanceApproachMode DistanceApproachMode_MIN = DISTANCE_APPROACH_IPOPT;
constexpr DistanceApproachMode DistanceApproachMode_MAX = DISTANCE_APPROACH_IPOPT_RELAX_END_SLACK;
constexpr int DistanceApproachMode_ARRAYSIZE = DistanceApproachMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistanceApproachMode_descriptor();
template<typename T>
inline const std::string& DistanceApproachMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DistanceApproachMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DistanceApproachMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DistanceApproachMode_descriptor(), enum_t_value);
}
inline bool DistanceApproachMode_Parse(
    const std::string& name, DistanceApproachMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DistanceApproachMode>(
    DistanceApproachMode_descriptor(), name, value);
}
enum DualVariableMode : int {
  DUAL_VARIABLE_IPOPT = 0,
  DUAL_VARIABLE_IPOPTQP = 1,
  DUAL_VARIABLE_OSQP = 2,
  DUAL_VARIABLE_DEBUG = 3
};
bool DualVariableMode_IsValid(int value);
constexpr DualVariableMode DualVariableMode_MIN = DUAL_VARIABLE_IPOPT;
constexpr DualVariableMode DualVariableMode_MAX = DUAL_VARIABLE_DEBUG;
constexpr int DualVariableMode_ARRAYSIZE = DualVariableMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DualVariableMode_descriptor();
template<typename T>
inline const std::string& DualVariableMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DualVariableMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DualVariableMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DualVariableMode_descriptor(), enum_t_value);
}
inline bool DualVariableMode_Parse(
    const std::string& name, DualVariableMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DualVariableMode>(
    DualVariableMode_descriptor(), name, value);
}
// ===================================================================

class PlannerOpenSpaceConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.PlannerOpenSpaceConfig) */ {
 public:
  inline PlannerOpenSpaceConfig() : PlannerOpenSpaceConfig(nullptr) {};
  virtual ~PlannerOpenSpaceConfig();

  PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from);
  PlannerOpenSpaceConfig(PlannerOpenSpaceConfig&& from) noexcept
    : PlannerOpenSpaceConfig() {
    *this = ::std::move(from);
  }

  inline PlannerOpenSpaceConfig& operator=(const PlannerOpenSpaceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlannerOpenSpaceConfig& operator=(PlannerOpenSpaceConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlannerOpenSpaceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlannerOpenSpaceConfig* internal_default_instance() {
    return reinterpret_cast<const PlannerOpenSpaceConfig*>(
               &_PlannerOpenSpaceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlannerOpenSpaceConfig& a, PlannerOpenSpaceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlannerOpenSpaceConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlannerOpenSpaceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlannerOpenSpaceConfig* New() const final {
    return CreateMaybeMessage<PlannerOpenSpaceConfig>(nullptr);
  }

  PlannerOpenSpaceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlannerOpenSpaceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlannerOpenSpaceConfig& from);
  void MergeFrom(const PlannerOpenSpaceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlannerOpenSpaceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.PlannerOpenSpaceConfig";
  }
  protected:
  explicit PlannerOpenSpaceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoiConfigFieldNumber = 1,
    kWarmStartConfigFieldNumber = 2,
    kDualVariableWarmStartConfigFieldNumber = 3,
    kDistanceApproachConfigFieldNumber = 4,
    kIterativeAnchoringSmootherConfigFieldNumber = 5,
    kEnableLinearInterpolationFieldNumber = 10,
    kDeltaTFieldNumber = 7,
    kNearDestinationThresholdFieldNumber = 8,
    kIsNearDestinationThetaThresholdFieldNumber = 11,
  };
  // optional .nav2_smac_planner.ROIConfig roi_config = 1;
  bool has_roi_config() const;
  private:
  bool _internal_has_roi_config() const;
  public:
  void clear_roi_config();
  const ::nav2_smac_planner::ROIConfig& roi_config() const;
  ::nav2_smac_planner::ROIConfig* release_roi_config();
  ::nav2_smac_planner::ROIConfig* mutable_roi_config();
  void set_allocated_roi_config(::nav2_smac_planner::ROIConfig* roi_config);
  private:
  const ::nav2_smac_planner::ROIConfig& _internal_roi_config() const;
  ::nav2_smac_planner::ROIConfig* _internal_mutable_roi_config();
  public:
  void unsafe_arena_set_allocated_roi_config(
      ::nav2_smac_planner::ROIConfig* roi_config);
  ::nav2_smac_planner::ROIConfig* unsafe_arena_release_roi_config();

  // optional .nav2_smac_planner.WarmStartConfig warm_start_config = 2;
  bool has_warm_start_config() const;
  private:
  bool _internal_has_warm_start_config() const;
  public:
  void clear_warm_start_config();
  const ::nav2_smac_planner::WarmStartConfig& warm_start_config() const;
  ::nav2_smac_planner::WarmStartConfig* release_warm_start_config();
  ::nav2_smac_planner::WarmStartConfig* mutable_warm_start_config();
  void set_allocated_warm_start_config(::nav2_smac_planner::WarmStartConfig* warm_start_config);
  private:
  const ::nav2_smac_planner::WarmStartConfig& _internal_warm_start_config() const;
  ::nav2_smac_planner::WarmStartConfig* _internal_mutable_warm_start_config();
  public:
  void unsafe_arena_set_allocated_warm_start_config(
      ::nav2_smac_planner::WarmStartConfig* warm_start_config);
  ::nav2_smac_planner::WarmStartConfig* unsafe_arena_release_warm_start_config();

  // optional .nav2_smac_planner.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  bool has_dual_variable_warm_start_config() const;
  private:
  bool _internal_has_dual_variable_warm_start_config() const;
  public:
  void clear_dual_variable_warm_start_config();
  const ::nav2_smac_planner::DualVariableWarmStartConfig& dual_variable_warm_start_config() const;
  ::nav2_smac_planner::DualVariableWarmStartConfig* release_dual_variable_warm_start_config();
  ::nav2_smac_planner::DualVariableWarmStartConfig* mutable_dual_variable_warm_start_config();
  void set_allocated_dual_variable_warm_start_config(::nav2_smac_planner::DualVariableWarmStartConfig* dual_variable_warm_start_config);
  private:
  const ::nav2_smac_planner::DualVariableWarmStartConfig& _internal_dual_variable_warm_start_config() const;
  ::nav2_smac_planner::DualVariableWarmStartConfig* _internal_mutable_dual_variable_warm_start_config();
  public:
  void unsafe_arena_set_allocated_dual_variable_warm_start_config(
      ::nav2_smac_planner::DualVariableWarmStartConfig* dual_variable_warm_start_config);
  ::nav2_smac_planner::DualVariableWarmStartConfig* unsafe_arena_release_dual_variable_warm_start_config();

  // optional .nav2_smac_planner.DistanceApproachConfig distance_approach_config = 4;
  bool has_distance_approach_config() const;
  private:
  bool _internal_has_distance_approach_config() const;
  public:
  void clear_distance_approach_config();
  const ::nav2_smac_planner::DistanceApproachConfig& distance_approach_config() const;
  ::nav2_smac_planner::DistanceApproachConfig* release_distance_approach_config();
  ::nav2_smac_planner::DistanceApproachConfig* mutable_distance_approach_config();
  void set_allocated_distance_approach_config(::nav2_smac_planner::DistanceApproachConfig* distance_approach_config);
  private:
  const ::nav2_smac_planner::DistanceApproachConfig& _internal_distance_approach_config() const;
  ::nav2_smac_planner::DistanceApproachConfig* _internal_mutable_distance_approach_config();
  public:
  void unsafe_arena_set_allocated_distance_approach_config(
      ::nav2_smac_planner::DistanceApproachConfig* distance_approach_config);
  ::nav2_smac_planner::DistanceApproachConfig* unsafe_arena_release_distance_approach_config();

  // optional .nav2_smac_planner.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  bool has_iterative_anchoring_smoother_config() const;
  private:
  bool _internal_has_iterative_anchoring_smoother_config() const;
  public:
  void clear_iterative_anchoring_smoother_config();
  const ::nav2_smac_planner::IterativeAnchoringConfig& iterative_anchoring_smoother_config() const;
  ::nav2_smac_planner::IterativeAnchoringConfig* release_iterative_anchoring_smoother_config();
  ::nav2_smac_planner::IterativeAnchoringConfig* mutable_iterative_anchoring_smoother_config();
  void set_allocated_iterative_anchoring_smoother_config(::nav2_smac_planner::IterativeAnchoringConfig* iterative_anchoring_smoother_config);
  private:
  const ::nav2_smac_planner::IterativeAnchoringConfig& _internal_iterative_anchoring_smoother_config() const;
  ::nav2_smac_planner::IterativeAnchoringConfig* _internal_mutable_iterative_anchoring_smoother_config();
  public:
  void unsafe_arena_set_allocated_iterative_anchoring_smoother_config(
      ::nav2_smac_planner::IterativeAnchoringConfig* iterative_anchoring_smoother_config);
  ::nav2_smac_planner::IterativeAnchoringConfig* unsafe_arena_release_iterative_anchoring_smoother_config();

  // optional bool enable_linear_interpolation = 10 [default = false];
  bool has_enable_linear_interpolation() const;
  private:
  bool _internal_has_enable_linear_interpolation() const;
  public:
  void clear_enable_linear_interpolation();
  bool enable_linear_interpolation() const;
  void set_enable_linear_interpolation(bool value);
  private:
  bool _internal_enable_linear_interpolation() const;
  void _internal_set_enable_linear_interpolation(bool value);
  public:

  // optional float delta_t = 7 [default = 1];
  bool has_delta_t() const;
  private:
  bool _internal_has_delta_t() const;
  public:
  void clear_delta_t();
  float delta_t() const;
  void set_delta_t(float value);
  private:
  float _internal_delta_t() const;
  void _internal_set_delta_t(float value);
  public:

  // optional double near_destination_threshold = 8 [default = 0.001];
  bool has_near_destination_threshold() const;
  private:
  bool _internal_has_near_destination_threshold() const;
  public:
  void clear_near_destination_threshold();
  double near_destination_threshold() const;
  void set_near_destination_threshold(double value);
  private:
  double _internal_near_destination_threshold() const;
  void _internal_set_near_destination_threshold(double value);
  public:

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  bool has_is_near_destination_theta_threshold() const;
  private:
  bool _internal_has_is_near_destination_theta_threshold() const;
  public:
  void clear_is_near_destination_theta_threshold();
  double is_near_destination_theta_threshold() const;
  void set_is_near_destination_theta_threshold(double value);
  private:
  double _internal_is_near_destination_theta_threshold() const;
  void _internal_set_is_near_destination_theta_threshold(double value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.PlannerOpenSpaceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nav2_smac_planner::ROIConfig* roi_config_;
  ::nav2_smac_planner::WarmStartConfig* warm_start_config_;
  ::nav2_smac_planner::DualVariableWarmStartConfig* dual_variable_warm_start_config_;
  ::nav2_smac_planner::DistanceApproachConfig* distance_approach_config_;
  ::nav2_smac_planner::IterativeAnchoringConfig* iterative_anchoring_smoother_config_;
  bool enable_linear_interpolation_;
  float delta_t_;
  double near_destination_threshold_;
  double is_near_destination_theta_threshold_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ROIConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.ROIConfig) */ {
 public:
  inline ROIConfig() : ROIConfig(nullptr) {};
  virtual ~ROIConfig();

  ROIConfig(const ROIConfig& from);
  ROIConfig(ROIConfig&& from) noexcept
    : ROIConfig() {
    *this = ::std::move(from);
  }

  inline ROIConfig& operator=(const ROIConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIConfig& operator=(ROIConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIConfig* internal_default_instance() {
    return reinterpret_cast<const ROIConfig*>(
               &_ROIConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ROIConfig& a, ROIConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROIConfig* New() const final {
    return CreateMaybeMessage<ROIConfig>(nullptr);
  }

  ROIConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIConfig& from);
  void MergeFrom(const ROIConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.ROIConfig";
  }
  protected:
  explicit ROIConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParkingInwardsFieldNumber = 4,
    kRoiLongitudinalRangeStartFieldNumber = 1,
    kRoiLongitudinalRangeEndFieldNumber = 2,
    kParkingStartRangeFieldNumber = 3,
  };
  // optional bool parking_inwards = 4 [default = false];
  bool has_parking_inwards() const;
  private:
  bool _internal_has_parking_inwards() const;
  public:
  void clear_parking_inwards();
  bool parking_inwards() const;
  void set_parking_inwards(bool value);
  private:
  bool _internal_parking_inwards() const;
  void _internal_set_parking_inwards(bool value);
  public:

  // optional double roi_longitudinal_range_start = 1 [default = 10];
  bool has_roi_longitudinal_range_start() const;
  private:
  bool _internal_has_roi_longitudinal_range_start() const;
  public:
  void clear_roi_longitudinal_range_start();
  double roi_longitudinal_range_start() const;
  void set_roi_longitudinal_range_start(double value);
  private:
  double _internal_roi_longitudinal_range_start() const;
  void _internal_set_roi_longitudinal_range_start(double value);
  public:

  // optional double roi_longitudinal_range_end = 2 [default = 10];
  bool has_roi_longitudinal_range_end() const;
  private:
  bool _internal_has_roi_longitudinal_range_end() const;
  public:
  void clear_roi_longitudinal_range_end();
  double roi_longitudinal_range_end() const;
  void set_roi_longitudinal_range_end(double value);
  private:
  double _internal_roi_longitudinal_range_end() const;
  void _internal_set_roi_longitudinal_range_end(double value);
  public:

  // optional double parking_start_range = 3 [default = 7];
  bool has_parking_start_range() const;
  private:
  bool _internal_has_parking_start_range() const;
  public:
  void clear_parking_start_range();
  double parking_start_range() const;
  void set_parking_start_range(double value);
  private:
  double _internal_parking_start_range() const;
  void _internal_set_parking_start_range(double value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.ROIConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool parking_inwards_;
  double roi_longitudinal_range_start_;
  double roi_longitudinal_range_end_;
  double parking_start_range_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SpeedOptimizerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.SpeedOptimizerConfig) */ {
 public:
  inline SpeedOptimizerConfig() : SpeedOptimizerConfig(nullptr) {};
  virtual ~SpeedOptimizerConfig();

  SpeedOptimizerConfig(const SpeedOptimizerConfig& from);
  SpeedOptimizerConfig(SpeedOptimizerConfig&& from) noexcept
    : SpeedOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline SpeedOptimizerConfig& operator=(const SpeedOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedOptimizerConfig& operator=(SpeedOptimizerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedOptimizerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const SpeedOptimizerConfig*>(
               &_SpeedOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpeedOptimizerConfig& a, SpeedOptimizerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedOptimizerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedOptimizerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedOptimizerConfig* New() const final {
    return CreateMaybeMessage<SpeedOptimizerConfig>(nullptr);
  }

  SpeedOptimizerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedOptimizerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedOptimizerConfig& from);
  void MergeFrom(const SpeedOptimizerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedOptimizerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.SpeedOptimizerConfig";
  }
  protected:
  explicit SpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccWeightFieldNumber = 1,
    kJerkWeightFieldNumber = 2,
    kKappaPenaltyWeightFieldNumber = 3,
    kRefSWeightFieldNumber = 4,
    kRefVWeightFieldNumber = 5,
  };
  // optional double acc_weight = 1 [default = 1];
  bool has_acc_weight() const;
  private:
  bool _internal_has_acc_weight() const;
  public:
  void clear_acc_weight();
  double acc_weight() const;
  void set_acc_weight(double value);
  private:
  double _internal_acc_weight() const;
  void _internal_set_acc_weight(double value);
  public:

  // optional double jerk_weight = 2 [default = 10];
  bool has_jerk_weight() const;
  private:
  bool _internal_has_jerk_weight() const;
  public:
  void clear_jerk_weight();
  double jerk_weight() const;
  void set_jerk_weight(double value);
  private:
  double _internal_jerk_weight() const;
  void _internal_set_jerk_weight(double value);
  public:

  // optional double kappa_penalty_weight = 3 [default = 1000];
  bool has_kappa_penalty_weight() const;
  private:
  bool _internal_has_kappa_penalty_weight() const;
  public:
  void clear_kappa_penalty_weight();
  double kappa_penalty_weight() const;
  void set_kappa_penalty_weight(double value);
  private:
  double _internal_kappa_penalty_weight() const;
  void _internal_set_kappa_penalty_weight(double value);
  public:

  // optional double ref_s_weight = 4 [default = 10];
  bool has_ref_s_weight() const;
  private:
  bool _internal_has_ref_s_weight() const;
  public:
  void clear_ref_s_weight();
  double ref_s_weight() const;
  void set_ref_s_weight(double value);
  private:
  double _internal_ref_s_weight() const;
  void _internal_set_ref_s_weight(double value);
  public:

  // optional double ref_v_weight = 5 [default = 10];
  bool has_ref_v_weight() const;
  private:
  bool _internal_has_ref_v_weight() const;
  public:
  void clear_ref_v_weight();
  double ref_v_weight() const;
  void set_ref_v_weight(double value);
  private:
  double _internal_ref_v_weight() const;
  void _internal_set_ref_v_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.SpeedOptimizerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double acc_weight_;
  double jerk_weight_;
  double kappa_penalty_weight_;
  double ref_s_weight_;
  double ref_v_weight_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class WarmStartConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.WarmStartConfig) */ {
 public:
  inline WarmStartConfig() : WarmStartConfig(nullptr) {};
  virtual ~WarmStartConfig();

  WarmStartConfig(const WarmStartConfig& from);
  WarmStartConfig(WarmStartConfig&& from) noexcept
    : WarmStartConfig() {
    *this = ::std::move(from);
  }

  inline WarmStartConfig& operator=(const WarmStartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarmStartConfig& operator=(WarmStartConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WarmStartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarmStartConfig* internal_default_instance() {
    return reinterpret_cast<const WarmStartConfig*>(
               &_WarmStartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WarmStartConfig& a, WarmStartConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WarmStartConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarmStartConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WarmStartConfig* New() const final {
    return CreateMaybeMessage<WarmStartConfig>(nullptr);
  }

  WarmStartConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WarmStartConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WarmStartConfig& from);
  void MergeFrom(const WarmStartConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarmStartConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.WarmStartConfig";
  }
  protected:
  explicit WarmStartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSCurveConfigFieldNumber = 13,
    kTrajForwardPenaltyFieldNumber = 5,
    kTrajBackPenaltyFieldNumber = 6,
    kUseEsdfFieldNumber = 21,
    kXyGridResolutionFieldNumber = 1,
    kPhiGridResolutionFieldNumber = 2,
    kNextNodeNumFieldNumber = 3,
    kStepSizeFieldNumber = 4,
    kTrajGearSwitchPenaltyFieldNumber = 7,
    kTrajSteerPenaltyFieldNumber = 8,
    kTrajSteerChangePenaltyFieldNumber = 9,
    kTrajShortLengthPenaltyFieldNumber = 10,
    kGridAStarXyResolutionFieldNumber = 11,
    kNodeRadiusFieldNumber = 12,
    kTrajKappaContraintRatioFieldNumber = 14,
    kMaxExploredNumFieldNumber = 15,
    kDesiredExploredNumFieldNumber = 16,
    kTrajExpectedShortestLengthFieldNumber = 17,
    kAstarMaxSearchTimeFieldNumber = 18,
    kEsdfRangeFieldNumber = 19,
    kSoftBoundaryPenaltyFieldNumber = 20,
  };
  // optional .nav2_smac_planner.SpeedOptimizerConfig s_curve_config = 13;
  bool has_s_curve_config() const;
  private:
  bool _internal_has_s_curve_config() const;
  public:
  void clear_s_curve_config();
  const ::nav2_smac_planner::SpeedOptimizerConfig& s_curve_config() const;
  ::nav2_smac_planner::SpeedOptimizerConfig* release_s_curve_config();
  ::nav2_smac_planner::SpeedOptimizerConfig* mutable_s_curve_config();
  void set_allocated_s_curve_config(::nav2_smac_planner::SpeedOptimizerConfig* s_curve_config);
  private:
  const ::nav2_smac_planner::SpeedOptimizerConfig& _internal_s_curve_config() const;
  ::nav2_smac_planner::SpeedOptimizerConfig* _internal_mutable_s_curve_config();
  public:
  void unsafe_arena_set_allocated_s_curve_config(
      ::nav2_smac_planner::SpeedOptimizerConfig* s_curve_config);
  ::nav2_smac_planner::SpeedOptimizerConfig* unsafe_arena_release_s_curve_config();

  // optional double traj_forward_penalty = 5 [default = 0];
  bool has_traj_forward_penalty() const;
  private:
  bool _internal_has_traj_forward_penalty() const;
  public:
  void clear_traj_forward_penalty();
  double traj_forward_penalty() const;
  void set_traj_forward_penalty(double value);
  private:
  double _internal_traj_forward_penalty() const;
  void _internal_set_traj_forward_penalty(double value);
  public:

  // optional double traj_back_penalty = 6 [default = 0];
  bool has_traj_back_penalty() const;
  private:
  bool _internal_has_traj_back_penalty() const;
  public:
  void clear_traj_back_penalty();
  double traj_back_penalty() const;
  void set_traj_back_penalty(double value);
  private:
  double _internal_traj_back_penalty() const;
  void _internal_set_traj_back_penalty(double value);
  public:

  // optional bool use_esdf = 21 [default = true];
  bool has_use_esdf() const;
  private:
  bool _internal_has_use_esdf() const;
  public:
  void clear_use_esdf();
  bool use_esdf() const;
  void set_use_esdf(bool value);
  private:
  bool _internal_use_esdf() const;
  void _internal_set_use_esdf(bool value);
  public:

  // optional double xy_grid_resolution = 1 [default = 0.2];
  bool has_xy_grid_resolution() const;
  private:
  bool _internal_has_xy_grid_resolution() const;
  public:
  void clear_xy_grid_resolution();
  double xy_grid_resolution() const;
  void set_xy_grid_resolution(double value);
  private:
  double _internal_xy_grid_resolution() const;
  void _internal_set_xy_grid_resolution(double value);
  public:

  // optional double phi_grid_resolution = 2 [default = 0.05];
  bool has_phi_grid_resolution() const;
  private:
  bool _internal_has_phi_grid_resolution() const;
  public:
  void clear_phi_grid_resolution();
  double phi_grid_resolution() const;
  void set_phi_grid_resolution(double value);
  private:
  double _internal_phi_grid_resolution() const;
  void _internal_set_phi_grid_resolution(double value);
  public:

  // optional uint64 next_node_num = 3 [default = 10];
  bool has_next_node_num() const;
  private:
  bool _internal_has_next_node_num() const;
  public:
  void clear_next_node_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_node_num() const;
  void set_next_node_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_node_num() const;
  void _internal_set_next_node_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double step_size = 4 [default = 0.5];
  bool has_step_size() const;
  private:
  bool _internal_has_step_size() const;
  public:
  void clear_step_size();
  double step_size() const;
  void set_step_size(double value);
  private:
  double _internal_step_size() const;
  void _internal_set_step_size(double value);
  public:

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  bool has_traj_gear_switch_penalty() const;
  private:
  bool _internal_has_traj_gear_switch_penalty() const;
  public:
  void clear_traj_gear_switch_penalty();
  double traj_gear_switch_penalty() const;
  void set_traj_gear_switch_penalty(double value);
  private:
  double _internal_traj_gear_switch_penalty() const;
  void _internal_set_traj_gear_switch_penalty(double value);
  public:

  // optional double traj_steer_penalty = 8 [default = 100];
  bool has_traj_steer_penalty() const;
  private:
  bool _internal_has_traj_steer_penalty() const;
  public:
  void clear_traj_steer_penalty();
  double traj_steer_penalty() const;
  void set_traj_steer_penalty(double value);
  private:
  double _internal_traj_steer_penalty() const;
  void _internal_set_traj_steer_penalty(double value);
  public:

  // optional double traj_steer_change_penalty = 9 [default = 10];
  bool has_traj_steer_change_penalty() const;
  private:
  bool _internal_has_traj_steer_change_penalty() const;
  public:
  void clear_traj_steer_change_penalty();
  double traj_steer_change_penalty() const;
  void set_traj_steer_change_penalty(double value);
  private:
  double _internal_traj_steer_change_penalty() const;
  void _internal_set_traj_steer_change_penalty(double value);
  public:

  // optional double traj_short_length_penalty = 10 [default = 10];
  bool has_traj_short_length_penalty() const;
  private:
  bool _internal_has_traj_short_length_penalty() const;
  public:
  void clear_traj_short_length_penalty();
  double traj_short_length_penalty() const;
  void set_traj_short_length_penalty(double value);
  private:
  double _internal_traj_short_length_penalty() const;
  void _internal_set_traj_short_length_penalty(double value);
  public:

  // optional double grid_a_star_xy_resolution = 11 [default = 0.1];
  bool has_grid_a_star_xy_resolution() const;
  private:
  bool _internal_has_grid_a_star_xy_resolution() const;
  public:
  void clear_grid_a_star_xy_resolution();
  double grid_a_star_xy_resolution() const;
  void set_grid_a_star_xy_resolution(double value);
  private:
  double _internal_grid_a_star_xy_resolution() const;
  void _internal_set_grid_a_star_xy_resolution(double value);
  public:

  // optional double node_radius = 12 [default = 0.5];
  bool has_node_radius() const;
  private:
  bool _internal_has_node_radius() const;
  public:
  void clear_node_radius();
  double node_radius() const;
  void set_node_radius(double value);
  private:
  double _internal_node_radius() const;
  void _internal_set_node_radius(double value);
  public:

  // optional double traj_kappa_contraint_ratio = 14 [default = 0.7];
  bool has_traj_kappa_contraint_ratio() const;
  private:
  bool _internal_has_traj_kappa_contraint_ratio() const;
  public:
  void clear_traj_kappa_contraint_ratio();
  double traj_kappa_contraint_ratio() const;
  void set_traj_kappa_contraint_ratio(double value);
  private:
  double _internal_traj_kappa_contraint_ratio() const;
  void _internal_set_traj_kappa_contraint_ratio(double value);
  public:

  // optional int32 max_explored_num = 15 [default = 10000];
  bool has_max_explored_num() const;
  private:
  bool _internal_has_max_explored_num() const;
  public:
  void clear_max_explored_num();
  ::PROTOBUF_NAMESPACE_ID::int32 max_explored_num() const;
  void set_max_explored_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_explored_num() const;
  void _internal_set_max_explored_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 desired_explored_num = 16 [default = 10000];
  bool has_desired_explored_num() const;
  private:
  bool _internal_has_desired_explored_num() const;
  public:
  void clear_desired_explored_num();
  ::PROTOBUF_NAMESPACE_ID::int32 desired_explored_num() const;
  void set_desired_explored_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_desired_explored_num() const;
  void _internal_set_desired_explored_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double traj_expected_shortest_length = 17 [default = 1];
  bool has_traj_expected_shortest_length() const;
  private:
  bool _internal_has_traj_expected_shortest_length() const;
  public:
  void clear_traj_expected_shortest_length();
  double traj_expected_shortest_length() const;
  void set_traj_expected_shortest_length(double value);
  private:
  double _internal_traj_expected_shortest_length() const;
  void _internal_set_traj_expected_shortest_length(double value);
  public:

  // optional double astar_max_search_time = 18 [default = 5];
  bool has_astar_max_search_time() const;
  private:
  bool _internal_has_astar_max_search_time() const;
  public:
  void clear_astar_max_search_time();
  double astar_max_search_time() const;
  void set_astar_max_search_time(double value);
  private:
  double _internal_astar_max_search_time() const;
  void _internal_set_astar_max_search_time(double value);
  public:

  // optional double esdf_range = 19 [default = 2];
  bool has_esdf_range() const;
  private:
  bool _internal_has_esdf_range() const;
  public:
  void clear_esdf_range();
  double esdf_range() const;
  void set_esdf_range(double value);
  private:
  double _internal_esdf_range() const;
  void _internal_set_esdf_range(double value);
  public:

  // optional double soft_boundary_penalty = 20 [default = 2];
  bool has_soft_boundary_penalty() const;
  private:
  bool _internal_has_soft_boundary_penalty() const;
  public:
  void clear_soft_boundary_penalty();
  double soft_boundary_penalty() const;
  void set_soft_boundary_penalty(double value);
  private:
  double _internal_soft_boundary_penalty() const;
  void _internal_set_soft_boundary_penalty(double value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.WarmStartConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nav2_smac_planner::SpeedOptimizerConfig* s_curve_config_;
  double traj_forward_penalty_;
  double traj_back_penalty_;
  bool use_esdf_;
  double xy_grid_resolution_;
  double phi_grid_resolution_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_node_num_;
  double step_size_;
  double traj_gear_switch_penalty_;
  double traj_steer_penalty_;
  double traj_steer_change_penalty_;
  double traj_short_length_penalty_;
  double grid_a_star_xy_resolution_;
  double node_radius_;
  double traj_kappa_contraint_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_explored_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 desired_explored_num_;
  double traj_expected_shortest_length_;
  double astar_max_search_time_;
  double esdf_range_;
  double soft_boundary_penalty_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DualVariableWarmStartConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.DualVariableWarmStartConfig) */ {
 public:
  inline DualVariableWarmStartConfig() : DualVariableWarmStartConfig(nullptr) {};
  virtual ~DualVariableWarmStartConfig();

  DualVariableWarmStartConfig(const DualVariableWarmStartConfig& from);
  DualVariableWarmStartConfig(DualVariableWarmStartConfig&& from) noexcept
    : DualVariableWarmStartConfig() {
    *this = ::std::move(from);
  }

  inline DualVariableWarmStartConfig& operator=(const DualVariableWarmStartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DualVariableWarmStartConfig& operator=(DualVariableWarmStartConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DualVariableWarmStartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DualVariableWarmStartConfig* internal_default_instance() {
    return reinterpret_cast<const DualVariableWarmStartConfig*>(
               &_DualVariableWarmStartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DualVariableWarmStartConfig& a, DualVariableWarmStartConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DualVariableWarmStartConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DualVariableWarmStartConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DualVariableWarmStartConfig* New() const final {
    return CreateMaybeMessage<DualVariableWarmStartConfig>(nullptr);
  }

  DualVariableWarmStartConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DualVariableWarmStartConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DualVariableWarmStartConfig& from);
  void MergeFrom(const DualVariableWarmStartConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualVariableWarmStartConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.DualVariableWarmStartConfig";
  }
  protected:
  explicit DualVariableWarmStartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpoptConfigFieldNumber = 2,
    kOsqpConfigFieldNumber = 7,
    kMinSafetyDistanceFieldNumber = 4,
    kQpFormatFieldNumber = 3,
    kDebugOsqpFieldNumber = 5,
    kWeightDFieldNumber = 1,
    kBetaFieldNumber = 6,
  };
  // optional .nav2_smac_planner.IpoptConfig ipopt_config = 2;
  bool has_ipopt_config() const;
  private:
  bool _internal_has_ipopt_config() const;
  public:
  void clear_ipopt_config();
  const ::nav2_smac_planner::IpoptConfig& ipopt_config() const;
  ::nav2_smac_planner::IpoptConfig* release_ipopt_config();
  ::nav2_smac_planner::IpoptConfig* mutable_ipopt_config();
  void set_allocated_ipopt_config(::nav2_smac_planner::IpoptConfig* ipopt_config);
  private:
  const ::nav2_smac_planner::IpoptConfig& _internal_ipopt_config() const;
  ::nav2_smac_planner::IpoptConfig* _internal_mutable_ipopt_config();
  public:
  void unsafe_arena_set_allocated_ipopt_config(
      ::nav2_smac_planner::IpoptConfig* ipopt_config);
  ::nav2_smac_planner::IpoptConfig* unsafe_arena_release_ipopt_config();

  // optional .nav2_smac_planner.OSQPConfig osqp_config = 7;
  bool has_osqp_config() const;
  private:
  bool _internal_has_osqp_config() const;
  public:
  void clear_osqp_config();
  const ::nav2_smac_planner::OSQPConfig& osqp_config() const;
  ::nav2_smac_planner::OSQPConfig* release_osqp_config();
  ::nav2_smac_planner::OSQPConfig* mutable_osqp_config();
  void set_allocated_osqp_config(::nav2_smac_planner::OSQPConfig* osqp_config);
  private:
  const ::nav2_smac_planner::OSQPConfig& _internal_osqp_config() const;
  ::nav2_smac_planner::OSQPConfig* _internal_mutable_osqp_config();
  public:
  void unsafe_arena_set_allocated_osqp_config(
      ::nav2_smac_planner::OSQPConfig* osqp_config);
  ::nav2_smac_planner::OSQPConfig* unsafe_arena_release_osqp_config();

  // optional double min_safety_distance = 4 [default = 0];
  bool has_min_safety_distance() const;
  private:
  bool _internal_has_min_safety_distance() const;
  public:
  void clear_min_safety_distance();
  double min_safety_distance() const;
  void set_min_safety_distance(double value);
  private:
  double _internal_min_safety_distance() const;
  void _internal_set_min_safety_distance(double value);
  public:

  // optional .nav2_smac_planner.DualWarmUpMode qp_format = 3;
  bool has_qp_format() const;
  private:
  bool _internal_has_qp_format() const;
  public:
  void clear_qp_format();
  ::nav2_smac_planner::DualWarmUpMode qp_format() const;
  void set_qp_format(::nav2_smac_planner::DualWarmUpMode value);
  private:
  ::nav2_smac_planner::DualWarmUpMode _internal_qp_format() const;
  void _internal_set_qp_format(::nav2_smac_planner::DualWarmUpMode value);
  public:

  // optional bool debug_osqp = 5 [default = false];
  bool has_debug_osqp() const;
  private:
  bool _internal_has_debug_osqp() const;
  public:
  void clear_debug_osqp();
  bool debug_osqp() const;
  void set_debug_osqp(bool value);
  private:
  bool _internal_debug_osqp() const;
  void _internal_set_debug_osqp(bool value);
  public:

  // optional double weight_d = 1 [default = 1];
  bool has_weight_d() const;
  private:
  bool _internal_has_weight_d() const;
  public:
  void clear_weight_d();
  double weight_d() const;
  void set_weight_d(double value);
  private:
  double _internal_weight_d() const;
  void _internal_set_weight_d(double value);
  public:

  // optional double beta = 6 [default = 1];
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  double beta() const;
  void set_beta(double value);
  private:
  double _internal_beta() const;
  void _internal_set_beta(double value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.DualVariableWarmStartConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nav2_smac_planner::IpoptConfig* ipopt_config_;
  ::nav2_smac_planner::OSQPConfig* osqp_config_;
  double min_safety_distance_;
  int qp_format_;
  bool debug_osqp_;
  double weight_d_;
  double beta_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DistanceApproachConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.DistanceApproachConfig) */ {
 public:
  inline DistanceApproachConfig() : DistanceApproachConfig(nullptr) {};
  virtual ~DistanceApproachConfig();

  DistanceApproachConfig(const DistanceApproachConfig& from);
  DistanceApproachConfig(DistanceApproachConfig&& from) noexcept
    : DistanceApproachConfig() {
    *this = ::std::move(from);
  }

  inline DistanceApproachConfig& operator=(const DistanceApproachConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceApproachConfig& operator=(DistanceApproachConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DistanceApproachConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistanceApproachConfig* internal_default_instance() {
    return reinterpret_cast<const DistanceApproachConfig*>(
               &_DistanceApproachConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DistanceApproachConfig& a, DistanceApproachConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceApproachConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceApproachConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistanceApproachConfig* New() const final {
    return CreateMaybeMessage<DistanceApproachConfig>(nullptr);
  }

  DistanceApproachConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistanceApproachConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DistanceApproachConfig& from);
  void MergeFrom(const DistanceApproachConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceApproachConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.DistanceApproachConfig";
  }
  protected:
  explicit DistanceApproachConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpoptConfigFieldNumber = 21,
    kWeightSteerFieldNumber = 1,
    kWeightAFieldNumber = 2,
    kWeightSteerRateFieldNumber = 3,
    kWeightARateFieldNumber = 4,
    kWeightXFieldNumber = 5,
    kWeightYFieldNumber = 6,
    kWeightPhiFieldNumber = 7,
    kWeightVFieldNumber = 8,
    kWeightSteerStitchingFieldNumber = 9,
    kWeightAStitchingFieldNumber = 10,
    kWeightFirstOrderTimeFieldNumber = 11,
    kWeightSecondOrderTimeFieldNumber = 12,
    kMinSafetyDistanceFieldNumber = 13,
    kUseFixTimeFieldNumber = 20,
    kEnableConstraintCheckFieldNumber = 22,
    kEnableHandDerivativeFieldNumber = 23,
    kEnableDerivativeCheckFieldNumber = 24,
    kDistanceApproachModeFieldNumber = 26,
    kWeightEndStateFieldNumber = 29,
    kWeightSlackFieldNumber = 30,
    kEnableInitialFinalCheckFieldNumber = 25,
    kEnableJacobianAdFieldNumber = 27,
    kEnableCheckInitialStateFieldNumber = 28,
    kMaxSpeedForwardFieldNumber = 14,
    kMaxSpeedReverseFieldNumber = 15,
    kMaxAccelerationForwardFieldNumber = 16,
    kMaxAccelerationReverseFieldNumber = 17,
    kMinTimeSampleScalingFieldNumber = 18,
    kMaxTimeSampleScalingFieldNumber = 19,
  };
  // optional .nav2_smac_planner.IpoptConfig ipopt_config = 21;
  bool has_ipopt_config() const;
  private:
  bool _internal_has_ipopt_config() const;
  public:
  void clear_ipopt_config();
  const ::nav2_smac_planner::IpoptConfig& ipopt_config() const;
  ::nav2_smac_planner::IpoptConfig* release_ipopt_config();
  ::nav2_smac_planner::IpoptConfig* mutable_ipopt_config();
  void set_allocated_ipopt_config(::nav2_smac_planner::IpoptConfig* ipopt_config);
  private:
  const ::nav2_smac_planner::IpoptConfig& _internal_ipopt_config() const;
  ::nav2_smac_planner::IpoptConfig* _internal_mutable_ipopt_config();
  public:
  void unsafe_arena_set_allocated_ipopt_config(
      ::nav2_smac_planner::IpoptConfig* ipopt_config);
  ::nav2_smac_planner::IpoptConfig* unsafe_arena_release_ipopt_config();

  // optional double weight_steer = 1;
  bool has_weight_steer() const;
  private:
  bool _internal_has_weight_steer() const;
  public:
  void clear_weight_steer();
  double weight_steer() const;
  void set_weight_steer(double value);
  private:
  double _internal_weight_steer() const;
  void _internal_set_weight_steer(double value);
  public:

  // optional double weight_a = 2;
  bool has_weight_a() const;
  private:
  bool _internal_has_weight_a() const;
  public:
  void clear_weight_a();
  double weight_a() const;
  void set_weight_a(double value);
  private:
  double _internal_weight_a() const;
  void _internal_set_weight_a(double value);
  public:

  // optional double weight_steer_rate = 3;
  bool has_weight_steer_rate() const;
  private:
  bool _internal_has_weight_steer_rate() const;
  public:
  void clear_weight_steer_rate();
  double weight_steer_rate() const;
  void set_weight_steer_rate(double value);
  private:
  double _internal_weight_steer_rate() const;
  void _internal_set_weight_steer_rate(double value);
  public:

  // optional double weight_a_rate = 4;
  bool has_weight_a_rate() const;
  private:
  bool _internal_has_weight_a_rate() const;
  public:
  void clear_weight_a_rate();
  double weight_a_rate() const;
  void set_weight_a_rate(double value);
  private:
  double _internal_weight_a_rate() const;
  void _internal_set_weight_a_rate(double value);
  public:

  // optional double weight_x = 5;
  bool has_weight_x() const;
  private:
  bool _internal_has_weight_x() const;
  public:
  void clear_weight_x();
  double weight_x() const;
  void set_weight_x(double value);
  private:
  double _internal_weight_x() const;
  void _internal_set_weight_x(double value);
  public:

  // optional double weight_y = 6;
  bool has_weight_y() const;
  private:
  bool _internal_has_weight_y() const;
  public:
  void clear_weight_y();
  double weight_y() const;
  void set_weight_y(double value);
  private:
  double _internal_weight_y() const;
  void _internal_set_weight_y(double value);
  public:

  // optional double weight_phi = 7;
  bool has_weight_phi() const;
  private:
  bool _internal_has_weight_phi() const;
  public:
  void clear_weight_phi();
  double weight_phi() const;
  void set_weight_phi(double value);
  private:
  double _internal_weight_phi() const;
  void _internal_set_weight_phi(double value);
  public:

  // optional double weight_v = 8;
  bool has_weight_v() const;
  private:
  bool _internal_has_weight_v() const;
  public:
  void clear_weight_v();
  double weight_v() const;
  void set_weight_v(double value);
  private:
  double _internal_weight_v() const;
  void _internal_set_weight_v(double value);
  public:

  // optional double weight_steer_stitching = 9;
  bool has_weight_steer_stitching() const;
  private:
  bool _internal_has_weight_steer_stitching() const;
  public:
  void clear_weight_steer_stitching();
  double weight_steer_stitching() const;
  void set_weight_steer_stitching(double value);
  private:
  double _internal_weight_steer_stitching() const;
  void _internal_set_weight_steer_stitching(double value);
  public:

  // optional double weight_a_stitching = 10;
  bool has_weight_a_stitching() const;
  private:
  bool _internal_has_weight_a_stitching() const;
  public:
  void clear_weight_a_stitching();
  double weight_a_stitching() const;
  void set_weight_a_stitching(double value);
  private:
  double _internal_weight_a_stitching() const;
  void _internal_set_weight_a_stitching(double value);
  public:

  // optional double weight_first_order_time = 11;
  bool has_weight_first_order_time() const;
  private:
  bool _internal_has_weight_first_order_time() const;
  public:
  void clear_weight_first_order_time();
  double weight_first_order_time() const;
  void set_weight_first_order_time(double value);
  private:
  double _internal_weight_first_order_time() const;
  void _internal_set_weight_first_order_time(double value);
  public:

  // optional double weight_second_order_time = 12;
  bool has_weight_second_order_time() const;
  private:
  bool _internal_has_weight_second_order_time() const;
  public:
  void clear_weight_second_order_time();
  double weight_second_order_time() const;
  void set_weight_second_order_time(double value);
  private:
  double _internal_weight_second_order_time() const;
  void _internal_set_weight_second_order_time(double value);
  public:

  // optional double min_safety_distance = 13 [default = 0];
  bool has_min_safety_distance() const;
  private:
  bool _internal_has_min_safety_distance() const;
  public:
  void clear_min_safety_distance();
  double min_safety_distance() const;
  void set_min_safety_distance(double value);
  private:
  double _internal_min_safety_distance() const;
  void _internal_set_min_safety_distance(double value);
  public:

  // optional bool use_fix_time = 20 [default = false];
  bool has_use_fix_time() const;
  private:
  bool _internal_has_use_fix_time() const;
  public:
  void clear_use_fix_time();
  bool use_fix_time() const;
  void set_use_fix_time(bool value);
  private:
  bool _internal_use_fix_time() const;
  void _internal_set_use_fix_time(bool value);
  public:

  // optional bool enable_constraint_check = 22;
  bool has_enable_constraint_check() const;
  private:
  bool _internal_has_enable_constraint_check() const;
  public:
  void clear_enable_constraint_check();
  bool enable_constraint_check() const;
  void set_enable_constraint_check(bool value);
  private:
  bool _internal_enable_constraint_check() const;
  void _internal_set_enable_constraint_check(bool value);
  public:

  // optional bool enable_hand_derivative = 23;
  bool has_enable_hand_derivative() const;
  private:
  bool _internal_has_enable_hand_derivative() const;
  public:
  void clear_enable_hand_derivative();
  bool enable_hand_derivative() const;
  void set_enable_hand_derivative(bool value);
  private:
  bool _internal_enable_hand_derivative() const;
  void _internal_set_enable_hand_derivative(bool value);
  public:

  // optional bool enable_derivative_check = 24;
  bool has_enable_derivative_check() const;
  private:
  bool _internal_has_enable_derivative_check() const;
  public:
  void clear_enable_derivative_check();
  bool enable_derivative_check() const;
  void set_enable_derivative_check(bool value);
  private:
  bool _internal_enable_derivative_check() const;
  void _internal_set_enable_derivative_check(bool value);
  public:

  // optional .nav2_smac_planner.DistanceApproachMode distance_approach_mode = 26;
  bool has_distance_approach_mode() const;
  private:
  bool _internal_has_distance_approach_mode() const;
  public:
  void clear_distance_approach_mode();
  ::nav2_smac_planner::DistanceApproachMode distance_approach_mode() const;
  void set_distance_approach_mode(::nav2_smac_planner::DistanceApproachMode value);
  private:
  ::nav2_smac_planner::DistanceApproachMode _internal_distance_approach_mode() const;
  void _internal_set_distance_approach_mode(::nav2_smac_planner::DistanceApproachMode value);
  public:

  // optional double weight_end_state = 29 [default = 0];
  bool has_weight_end_state() const;
  private:
  bool _internal_has_weight_end_state() const;
  public:
  void clear_weight_end_state();
  double weight_end_state() const;
  void set_weight_end_state(double value);
  private:
  double _internal_weight_end_state() const;
  void _internal_set_weight_end_state(double value);
  public:

  // optional double weight_slack = 30 [default = 0];
  bool has_weight_slack() const;
  private:
  bool _internal_has_weight_slack() const;
  public:
  void clear_weight_slack();
  double weight_slack() const;
  void set_weight_slack(double value);
  private:
  double _internal_weight_slack() const;
  void _internal_set_weight_slack(double value);
  public:

  // optional bool enable_initial_final_check = 25 [default = false];
  bool has_enable_initial_final_check() const;
  private:
  bool _internal_has_enable_initial_final_check() const;
  public:
  void clear_enable_initial_final_check();
  bool enable_initial_final_check() const;
  void set_enable_initial_final_check(bool value);
  private:
  bool _internal_enable_initial_final_check() const;
  void _internal_set_enable_initial_final_check(bool value);
  public:

  // optional bool enable_jacobian_ad = 27 [default = false];
  bool has_enable_jacobian_ad() const;
  private:
  bool _internal_has_enable_jacobian_ad() const;
  public:
  void clear_enable_jacobian_ad();
  bool enable_jacobian_ad() const;
  void set_enable_jacobian_ad(bool value);
  private:
  bool _internal_enable_jacobian_ad() const;
  void _internal_set_enable_jacobian_ad(bool value);
  public:

  // optional bool enable_check_initial_state = 28 [default = false];
  bool has_enable_check_initial_state() const;
  private:
  bool _internal_has_enable_check_initial_state() const;
  public:
  void clear_enable_check_initial_state();
  bool enable_check_initial_state() const;
  void set_enable_check_initial_state(bool value);
  private:
  bool _internal_enable_check_initial_state() const;
  void _internal_set_enable_check_initial_state(bool value);
  public:

  // optional double max_speed_forward = 14 [default = 3];
  bool has_max_speed_forward() const;
  private:
  bool _internal_has_max_speed_forward() const;
  public:
  void clear_max_speed_forward();
  double max_speed_forward() const;
  void set_max_speed_forward(double value);
  private:
  double _internal_max_speed_forward() const;
  void _internal_set_max_speed_forward(double value);
  public:

  // optional double max_speed_reverse = 15 [default = 2];
  bool has_max_speed_reverse() const;
  private:
  bool _internal_has_max_speed_reverse() const;
  public:
  void clear_max_speed_reverse();
  double max_speed_reverse() const;
  void set_max_speed_reverse(double value);
  private:
  double _internal_max_speed_reverse() const;
  void _internal_set_max_speed_reverse(double value);
  public:

  // optional double max_acceleration_forward = 16 [default = 2];
  bool has_max_acceleration_forward() const;
  private:
  bool _internal_has_max_acceleration_forward() const;
  public:
  void clear_max_acceleration_forward();
  double max_acceleration_forward() const;
  void set_max_acceleration_forward(double value);
  private:
  double _internal_max_acceleration_forward() const;
  void _internal_set_max_acceleration_forward(double value);
  public:

  // optional double max_acceleration_reverse = 17 [default = 2];
  bool has_max_acceleration_reverse() const;
  private:
  bool _internal_has_max_acceleration_reverse() const;
  public:
  void clear_max_acceleration_reverse();
  double max_acceleration_reverse() const;
  void set_max_acceleration_reverse(double value);
  private:
  double _internal_max_acceleration_reverse() const;
  void _internal_set_max_acceleration_reverse(double value);
  public:

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  bool has_min_time_sample_scaling() const;
  private:
  bool _internal_has_min_time_sample_scaling() const;
  public:
  void clear_min_time_sample_scaling();
  double min_time_sample_scaling() const;
  void set_min_time_sample_scaling(double value);
  private:
  double _internal_min_time_sample_scaling() const;
  void _internal_set_min_time_sample_scaling(double value);
  public:

  // optional double max_time_sample_scaling = 19 [default = 10];
  bool has_max_time_sample_scaling() const;
  private:
  bool _internal_has_max_time_sample_scaling() const;
  public:
  void clear_max_time_sample_scaling();
  double max_time_sample_scaling() const;
  void set_max_time_sample_scaling(double value);
  private:
  double _internal_max_time_sample_scaling() const;
  void _internal_set_max_time_sample_scaling(double value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.DistanceApproachConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nav2_smac_planner::IpoptConfig* ipopt_config_;
  double weight_steer_;
  double weight_a_;
  double weight_steer_rate_;
  double weight_a_rate_;
  double weight_x_;
  double weight_y_;
  double weight_phi_;
  double weight_v_;
  double weight_steer_stitching_;
  double weight_a_stitching_;
  double weight_first_order_time_;
  double weight_second_order_time_;
  double min_safety_distance_;
  bool use_fix_time_;
  bool enable_constraint_check_;
  bool enable_hand_derivative_;
  bool enable_derivative_check_;
  int distance_approach_mode_;
  double weight_end_state_;
  double weight_slack_;
  bool enable_initial_final_check_;
  bool enable_jacobian_ad_;
  bool enable_check_initial_state_;
  double max_speed_forward_;
  double max_speed_reverse_;
  double max_acceleration_forward_;
  double max_acceleration_reverse_;
  double min_time_sample_scaling_;
  double max_time_sample_scaling_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class IpoptConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.IpoptConfig) */ {
 public:
  inline IpoptConfig() : IpoptConfig(nullptr) {};
  virtual ~IpoptConfig();

  IpoptConfig(const IpoptConfig& from);
  IpoptConfig(IpoptConfig&& from) noexcept
    : IpoptConfig() {
    *this = ::std::move(from);
  }

  inline IpoptConfig& operator=(const IpoptConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpoptConfig& operator=(IpoptConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IpoptConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpoptConfig* internal_default_instance() {
    return reinterpret_cast<const IpoptConfig*>(
               &_IpoptConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IpoptConfig& a, IpoptConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IpoptConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpoptConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpoptConfig* New() const final {
    return CreateMaybeMessage<IpoptConfig>(nullptr);
  }

  IpoptConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpoptConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IpoptConfig& from);
  void MergeFrom(const IpoptConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpoptConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.IpoptConfig";
  }
  protected:
  explicit IpoptConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpoptPrintTimingStatisticsFieldNumber = 9,
    kIpoptAlphaForYFieldNumber = 10,
    kIpoptRecalcYFieldNumber = 11,
    kIpoptPrintLevelFieldNumber = 1,
    kMumpsMemPercentFieldNumber = 2,
    kMumpsPivtolFieldNumber = 3,
    kIpoptTolFieldNumber = 5,
    kIpoptAcceptableConstrViolTolFieldNumber = 6,
    kIpoptMinHessianPerturbationFieldNumber = 7,
    kIpoptJacobianRegularizationValueFieldNumber = 8,
    kIpoptMaxIterFieldNumber = 4,
    kIpoptMuInitFieldNumber = 12,
  };
  // optional string ipopt_print_timing_statistics = 9;
  bool has_ipopt_print_timing_statistics() const;
  private:
  bool _internal_has_ipopt_print_timing_statistics() const;
  public:
  void clear_ipopt_print_timing_statistics();
  const std::string& ipopt_print_timing_statistics() const;
  void set_ipopt_print_timing_statistics(const std::string& value);
  void set_ipopt_print_timing_statistics(std::string&& value);
  void set_ipopt_print_timing_statistics(const char* value);
  void set_ipopt_print_timing_statistics(const char* value, size_t size);
  std::string* mutable_ipopt_print_timing_statistics();
  std::string* release_ipopt_print_timing_statistics();
  void set_allocated_ipopt_print_timing_statistics(std::string* ipopt_print_timing_statistics);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipopt_print_timing_statistics();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipopt_print_timing_statistics(
      std::string* ipopt_print_timing_statistics);
  private:
  const std::string& _internal_ipopt_print_timing_statistics() const;
  void _internal_set_ipopt_print_timing_statistics(const std::string& value);
  std::string* _internal_mutable_ipopt_print_timing_statistics();
  public:

  // optional string ipopt_alpha_for_y = 10;
  bool has_ipopt_alpha_for_y() const;
  private:
  bool _internal_has_ipopt_alpha_for_y() const;
  public:
  void clear_ipopt_alpha_for_y();
  const std::string& ipopt_alpha_for_y() const;
  void set_ipopt_alpha_for_y(const std::string& value);
  void set_ipopt_alpha_for_y(std::string&& value);
  void set_ipopt_alpha_for_y(const char* value);
  void set_ipopt_alpha_for_y(const char* value, size_t size);
  std::string* mutable_ipopt_alpha_for_y();
  std::string* release_ipopt_alpha_for_y();
  void set_allocated_ipopt_alpha_for_y(std::string* ipopt_alpha_for_y);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipopt_alpha_for_y();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipopt_alpha_for_y(
      std::string* ipopt_alpha_for_y);
  private:
  const std::string& _internal_ipopt_alpha_for_y() const;
  void _internal_set_ipopt_alpha_for_y(const std::string& value);
  std::string* _internal_mutable_ipopt_alpha_for_y();
  public:

  // optional string ipopt_recalc_y = 11;
  bool has_ipopt_recalc_y() const;
  private:
  bool _internal_has_ipopt_recalc_y() const;
  public:
  void clear_ipopt_recalc_y();
  const std::string& ipopt_recalc_y() const;
  void set_ipopt_recalc_y(const std::string& value);
  void set_ipopt_recalc_y(std::string&& value);
  void set_ipopt_recalc_y(const char* value);
  void set_ipopt_recalc_y(const char* value, size_t size);
  std::string* mutable_ipopt_recalc_y();
  std::string* release_ipopt_recalc_y();
  void set_allocated_ipopt_recalc_y(std::string* ipopt_recalc_y);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipopt_recalc_y();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipopt_recalc_y(
      std::string* ipopt_recalc_y);
  private:
  const std::string& _internal_ipopt_recalc_y() const;
  void _internal_set_ipopt_recalc_y(const std::string& value);
  std::string* _internal_mutable_ipopt_recalc_y();
  public:

  // optional int32 ipopt_print_level = 1;
  bool has_ipopt_print_level() const;
  private:
  bool _internal_has_ipopt_print_level() const;
  public:
  void clear_ipopt_print_level();
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_print_level() const;
  void set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ipopt_print_level() const;
  void _internal_set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mumps_mem_percent = 2;
  bool has_mumps_mem_percent() const;
  private:
  bool _internal_has_mumps_mem_percent() const;
  public:
  void clear_mumps_mem_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 mumps_mem_percent() const;
  void set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mumps_mem_percent() const;
  void _internal_set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double mumps_pivtol = 3;
  bool has_mumps_pivtol() const;
  private:
  bool _internal_has_mumps_pivtol() const;
  public:
  void clear_mumps_pivtol();
  double mumps_pivtol() const;
  void set_mumps_pivtol(double value);
  private:
  double _internal_mumps_pivtol() const;
  void _internal_set_mumps_pivtol(double value);
  public:

  // optional double ipopt_tol = 5;
  bool has_ipopt_tol() const;
  private:
  bool _internal_has_ipopt_tol() const;
  public:
  void clear_ipopt_tol();
  double ipopt_tol() const;
  void set_ipopt_tol(double value);
  private:
  double _internal_ipopt_tol() const;
  void _internal_set_ipopt_tol(double value);
  public:

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  bool has_ipopt_acceptable_constr_viol_tol() const;
  private:
  bool _internal_has_ipopt_acceptable_constr_viol_tol() const;
  public:
  void clear_ipopt_acceptable_constr_viol_tol();
  double ipopt_acceptable_constr_viol_tol() const;
  void set_ipopt_acceptable_constr_viol_tol(double value);
  private:
  double _internal_ipopt_acceptable_constr_viol_tol() const;
  void _internal_set_ipopt_acceptable_constr_viol_tol(double value);
  public:

  // optional double ipopt_min_hessian_perturbation = 7;
  bool has_ipopt_min_hessian_perturbation() const;
  private:
  bool _internal_has_ipopt_min_hessian_perturbation() const;
  public:
  void clear_ipopt_min_hessian_perturbation();
  double ipopt_min_hessian_perturbation() const;
  void set_ipopt_min_hessian_perturbation(double value);
  private:
  double _internal_ipopt_min_hessian_perturbation() const;
  void _internal_set_ipopt_min_hessian_perturbation(double value);
  public:

  // optional double ipopt_jacobian_regularization_value = 8;
  bool has_ipopt_jacobian_regularization_value() const;
  private:
  bool _internal_has_ipopt_jacobian_regularization_value() const;
  public:
  void clear_ipopt_jacobian_regularization_value();
  double ipopt_jacobian_regularization_value() const;
  void set_ipopt_jacobian_regularization_value(double value);
  private:
  double _internal_ipopt_jacobian_regularization_value() const;
  void _internal_set_ipopt_jacobian_regularization_value(double value);
  public:

  // optional int32 ipopt_max_iter = 4;
  bool has_ipopt_max_iter() const;
  private:
  bool _internal_has_ipopt_max_iter() const;
  public:
  void clear_ipopt_max_iter();
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_max_iter() const;
  void set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ipopt_max_iter() const;
  void _internal_set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double ipopt_mu_init = 12 [default = 0.1];
  bool has_ipopt_mu_init() const;
  private:
  bool _internal_has_ipopt_mu_init() const;
  public:
  void clear_ipopt_mu_init();
  double ipopt_mu_init() const;
  void set_ipopt_mu_init(double value);
  private:
  double _internal_ipopt_mu_init() const;
  void _internal_set_ipopt_mu_init(double value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.IpoptConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_print_timing_statistics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_alpha_for_y_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_recalc_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_print_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 mumps_mem_percent_;
  double mumps_pivtol_;
  double ipopt_tol_;
  double ipopt_acceptable_constr_viol_tol_;
  double ipopt_min_hessian_perturbation_;
  double ipopt_jacobian_regularization_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_max_iter_;
  double ipopt_mu_init_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class OSQPConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.OSQPConfig) */ {
 public:
  inline OSQPConfig() : OSQPConfig(nullptr) {};
  virtual ~OSQPConfig();

  OSQPConfig(const OSQPConfig& from);
  OSQPConfig(OSQPConfig&& from) noexcept
    : OSQPConfig() {
    *this = ::std::move(from);
  }

  inline OSQPConfig& operator=(const OSQPConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OSQPConfig& operator=(OSQPConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OSQPConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OSQPConfig* internal_default_instance() {
    return reinterpret_cast<const OSQPConfig*>(
               &_OSQPConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OSQPConfig& a, OSQPConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OSQPConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OSQPConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OSQPConfig* New() const final {
    return CreateMaybeMessage<OSQPConfig>(nullptr);
  }

  OSQPConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OSQPConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OSQPConfig& from);
  void MergeFrom(const OSQPConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OSQPConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.OSQPConfig";
  }
  protected:
  explicit OSQPConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsqpDebugLogFieldNumber = 6,
    kAlphaFieldNumber = 1,
    kEpsAbsFieldNumber = 2,
    kEpsRelFieldNumber = 3,
    kMaxIterFieldNumber = 4,
    kPolishFieldNumber = 5,
  };
  // optional bool osqp_debug_log = 6 [default = false];
  bool has_osqp_debug_log() const;
  private:
  bool _internal_has_osqp_debug_log() const;
  public:
  void clear_osqp_debug_log();
  bool osqp_debug_log() const;
  void set_osqp_debug_log(bool value);
  private:
  bool _internal_osqp_debug_log() const;
  void _internal_set_osqp_debug_log(bool value);
  public:

  // optional double alpha = 1 [default = 1];
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  double alpha() const;
  void set_alpha(double value);
  private:
  double _internal_alpha() const;
  void _internal_set_alpha(double value);
  public:

  // optional double eps_abs = 2 [default = 0.001];
  bool has_eps_abs() const;
  private:
  bool _internal_has_eps_abs() const;
  public:
  void clear_eps_abs();
  double eps_abs() const;
  void set_eps_abs(double value);
  private:
  double _internal_eps_abs() const;
  void _internal_set_eps_abs(double value);
  public:

  // optional double eps_rel = 3 [default = 0.001];
  bool has_eps_rel() const;
  private:
  bool _internal_has_eps_rel() const;
  public:
  void clear_eps_rel();
  double eps_rel() const;
  void set_eps_rel(double value);
  private:
  double _internal_eps_rel() const;
  void _internal_set_eps_rel(double value);
  public:

  // optional int32 max_iter = 4 [default = 10000];
  bool has_max_iter() const;
  private:
  bool _internal_has_max_iter() const;
  public:
  void clear_max_iter();
  ::PROTOBUF_NAMESPACE_ID::int32 max_iter() const;
  void set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_iter() const;
  void _internal_set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool polish = 5 [default = true];
  bool has_polish() const;
  private:
  bool _internal_has_polish() const;
  public:
  void clear_polish();
  bool polish() const;
  void set_polish(bool value);
  private:
  bool _internal_polish() const;
  void _internal_set_polish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.OSQPConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool osqp_debug_log_;
  double alpha_;
  double eps_abs_;
  double eps_rel_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_iter_;
  bool polish_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class IterativeAnchoringConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.IterativeAnchoringConfig) */ {
 public:
  inline IterativeAnchoringConfig() : IterativeAnchoringConfig(nullptr) {};
  virtual ~IterativeAnchoringConfig();

  IterativeAnchoringConfig(const IterativeAnchoringConfig& from);
  IterativeAnchoringConfig(IterativeAnchoringConfig&& from) noexcept
    : IterativeAnchoringConfig() {
    *this = ::std::move(from);
  }

  inline IterativeAnchoringConfig& operator=(const IterativeAnchoringConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IterativeAnchoringConfig& operator=(IterativeAnchoringConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IterativeAnchoringConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IterativeAnchoringConfig* internal_default_instance() {
    return reinterpret_cast<const IterativeAnchoringConfig*>(
               &_IterativeAnchoringConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IterativeAnchoringConfig& a, IterativeAnchoringConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IterativeAnchoringConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IterativeAnchoringConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IterativeAnchoringConfig* New() const final {
    return CreateMaybeMessage<IterativeAnchoringConfig>(nullptr);
  }

  IterativeAnchoringConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IterativeAnchoringConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IterativeAnchoringConfig& from);
  void MergeFrom(const IterativeAnchoringConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IterativeAnchoringConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.IterativeAnchoringConfig";
  }
  protected:
  explicit IterativeAnchoringConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFemPosDeviationSmootherConfigFieldNumber = 8,
    kSCurveConfigFieldNumber = 16,
    kEstimateBoundFieldNumber = 5,
    kReanchoringTrailsNumFieldNumber = 2,
    kInterpolatedDeltaSFieldNumber = 1,
    kReanchoringPosStddevFieldNumber = 3,
    kReanchoringLengthStddevFieldNumber = 4,
    kDefaultBoundFieldNumber = 6,
    kVehicleShortestDimensionFieldNumber = 7,
    kCollisionDecreaseRatioFieldNumber = 9,
    kMaxForwardVFieldNumber = 10,
    kMaxReverseVFieldNumber = 11,
    kMaxForwardAccFieldNumber = 12,
    kMaxReverseAccFieldNumber = 13,
    kMaxAccJerkFieldNumber = 14,
    kDeltaTFieldNumber = 15,
  };
  // optional .nav2_smac_planner.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
  bool has_fem_pos_deviation_smoother_config() const;
  private:
  bool _internal_has_fem_pos_deviation_smoother_config() const;
  public:
  void clear_fem_pos_deviation_smoother_config();
  const ::nav2_smac_planner::FemPosDeviationSmootherConfig& fem_pos_deviation_smoother_config() const;
  ::nav2_smac_planner::FemPosDeviationSmootherConfig* release_fem_pos_deviation_smoother_config();
  ::nav2_smac_planner::FemPosDeviationSmootherConfig* mutable_fem_pos_deviation_smoother_config();
  void set_allocated_fem_pos_deviation_smoother_config(::nav2_smac_planner::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config);
  private:
  const ::nav2_smac_planner::FemPosDeviationSmootherConfig& _internal_fem_pos_deviation_smoother_config() const;
  ::nav2_smac_planner::FemPosDeviationSmootherConfig* _internal_mutable_fem_pos_deviation_smoother_config();
  public:
  void unsafe_arena_set_allocated_fem_pos_deviation_smoother_config(
      ::nav2_smac_planner::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config);
  ::nav2_smac_planner::FemPosDeviationSmootherConfig* unsafe_arena_release_fem_pos_deviation_smoother_config();

  // optional .nav2_smac_planner.SpeedOptimizerConfig s_curve_config = 16;
  bool has_s_curve_config() const;
  private:
  bool _internal_has_s_curve_config() const;
  public:
  void clear_s_curve_config();
  const ::nav2_smac_planner::SpeedOptimizerConfig& s_curve_config() const;
  ::nav2_smac_planner::SpeedOptimizerConfig* release_s_curve_config();
  ::nav2_smac_planner::SpeedOptimizerConfig* mutable_s_curve_config();
  void set_allocated_s_curve_config(::nav2_smac_planner::SpeedOptimizerConfig* s_curve_config);
  private:
  const ::nav2_smac_planner::SpeedOptimizerConfig& _internal_s_curve_config() const;
  ::nav2_smac_planner::SpeedOptimizerConfig* _internal_mutable_s_curve_config();
  public:
  void unsafe_arena_set_allocated_s_curve_config(
      ::nav2_smac_planner::SpeedOptimizerConfig* s_curve_config);
  ::nav2_smac_planner::SpeedOptimizerConfig* unsafe_arena_release_s_curve_config();

  // optional bool estimate_bound = 5 [default = false];
  bool has_estimate_bound() const;
  private:
  bool _internal_has_estimate_bound() const;
  public:
  void clear_estimate_bound();
  bool estimate_bound() const;
  void set_estimate_bound(bool value);
  private:
  bool _internal_estimate_bound() const;
  void _internal_set_estimate_bound(bool value);
  public:

  // optional int32 reanchoring_trails_num = 2 [default = 50];
  bool has_reanchoring_trails_num() const;
  private:
  bool _internal_has_reanchoring_trails_num() const;
  public:
  void clear_reanchoring_trails_num();
  ::PROTOBUF_NAMESPACE_ID::int32 reanchoring_trails_num() const;
  void set_reanchoring_trails_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reanchoring_trails_num() const;
  void _internal_set_reanchoring_trails_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double interpolated_delta_s = 1 [default = 0.05];
  bool has_interpolated_delta_s() const;
  private:
  bool _internal_has_interpolated_delta_s() const;
  public:
  void clear_interpolated_delta_s();
  double interpolated_delta_s() const;
  void set_interpolated_delta_s(double value);
  private:
  double _internal_interpolated_delta_s() const;
  void _internal_set_interpolated_delta_s(double value);
  public:

  // optional double reanchoring_pos_stddev = 3 [default = 0.25];
  bool has_reanchoring_pos_stddev() const;
  private:
  bool _internal_has_reanchoring_pos_stddev() const;
  public:
  void clear_reanchoring_pos_stddev();
  double reanchoring_pos_stddev() const;
  void set_reanchoring_pos_stddev(double value);
  private:
  double _internal_reanchoring_pos_stddev() const;
  void _internal_set_reanchoring_pos_stddev(double value);
  public:

  // optional double reanchoring_length_stddev = 4 [default = 1];
  bool has_reanchoring_length_stddev() const;
  private:
  bool _internal_has_reanchoring_length_stddev() const;
  public:
  void clear_reanchoring_length_stddev();
  double reanchoring_length_stddev() const;
  void set_reanchoring_length_stddev(double value);
  private:
  double _internal_reanchoring_length_stddev() const;
  void _internal_set_reanchoring_length_stddev(double value);
  public:

  // optional double default_bound = 6 [default = 2];
  bool has_default_bound() const;
  private:
  bool _internal_has_default_bound() const;
  public:
  void clear_default_bound();
  double default_bound() const;
  void set_default_bound(double value);
  private:
  double _internal_default_bound() const;
  void _internal_set_default_bound(double value);
  public:

  // optional double vehicle_shortest_dimension = 7 [default = 1.04];
  bool has_vehicle_shortest_dimension() const;
  private:
  bool _internal_has_vehicle_shortest_dimension() const;
  public:
  void clear_vehicle_shortest_dimension();
  double vehicle_shortest_dimension() const;
  void set_vehicle_shortest_dimension(double value);
  private:
  double _internal_vehicle_shortest_dimension() const;
  void _internal_set_vehicle_shortest_dimension(double value);
  public:

  // optional double collision_decrease_ratio = 9 [default = 0.9];
  bool has_collision_decrease_ratio() const;
  private:
  bool _internal_has_collision_decrease_ratio() const;
  public:
  void clear_collision_decrease_ratio();
  double collision_decrease_ratio() const;
  void set_collision_decrease_ratio(double value);
  private:
  double _internal_collision_decrease_ratio() const;
  void _internal_set_collision_decrease_ratio(double value);
  public:

  // optional double max_forward_v = 10 [default = 2];
  bool has_max_forward_v() const;
  private:
  bool _internal_has_max_forward_v() const;
  public:
  void clear_max_forward_v();
  double max_forward_v() const;
  void set_max_forward_v(double value);
  private:
  double _internal_max_forward_v() const;
  void _internal_set_max_forward_v(double value);
  public:

  // optional double max_reverse_v = 11 [default = 2];
  bool has_max_reverse_v() const;
  private:
  bool _internal_has_max_reverse_v() const;
  public:
  void clear_max_reverse_v();
  double max_reverse_v() const;
  void set_max_reverse_v(double value);
  private:
  double _internal_max_reverse_v() const;
  void _internal_set_max_reverse_v(double value);
  public:

  // optional double max_forward_acc = 12 [default = 3];
  bool has_max_forward_acc() const;
  private:
  bool _internal_has_max_forward_acc() const;
  public:
  void clear_max_forward_acc();
  double max_forward_acc() const;
  void set_max_forward_acc(double value);
  private:
  double _internal_max_forward_acc() const;
  void _internal_set_max_forward_acc(double value);
  public:

  // optional double max_reverse_acc = 13 [default = 2];
  bool has_max_reverse_acc() const;
  private:
  bool _internal_has_max_reverse_acc() const;
  public:
  void clear_max_reverse_acc();
  double max_reverse_acc() const;
  void set_max_reverse_acc(double value);
  private:
  double _internal_max_reverse_acc() const;
  void _internal_set_max_reverse_acc(double value);
  public:

  // optional double max_acc_jerk = 14 [default = 4];
  bool has_max_acc_jerk() const;
  private:
  bool _internal_has_max_acc_jerk() const;
  public:
  void clear_max_acc_jerk();
  double max_acc_jerk() const;
  void set_max_acc_jerk(double value);
  private:
  double _internal_max_acc_jerk() const;
  void _internal_set_max_acc_jerk(double value);
  public:

  // optional double delta_t = 15 [default = 0.2];
  bool has_delta_t() const;
  private:
  bool _internal_has_delta_t() const;
  public:
  void clear_delta_t();
  double delta_t() const;
  void set_delta_t(double value);
  private:
  double _internal_delta_t() const;
  void _internal_set_delta_t(double value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.IterativeAnchoringConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nav2_smac_planner::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config_;
  ::nav2_smac_planner::SpeedOptimizerConfig* s_curve_config_;
  bool estimate_bound_;
  ::PROTOBUF_NAMESPACE_ID::int32 reanchoring_trails_num_;
  double interpolated_delta_s_;
  double reanchoring_pos_stddev_;
  double reanchoring_length_stddev_;
  double default_bound_;
  double vehicle_shortest_dimension_;
  double collision_decrease_ratio_;
  double max_forward_v_;
  double max_reverse_v_;
  double max_forward_acc_;
  double max_reverse_acc_;
  double max_acc_jerk_;
  double delta_t_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DualVariableConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.DualVariableConfig) */ {
 public:
  inline DualVariableConfig() : DualVariableConfig(nullptr) {};
  virtual ~DualVariableConfig();

  DualVariableConfig(const DualVariableConfig& from);
  DualVariableConfig(DualVariableConfig&& from) noexcept
    : DualVariableConfig() {
    *this = ::std::move(from);
  }

  inline DualVariableConfig& operator=(const DualVariableConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DualVariableConfig& operator=(DualVariableConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DualVariableConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DualVariableConfig* internal_default_instance() {
    return reinterpret_cast<const DualVariableConfig*>(
               &_DualVariableConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DualVariableConfig& a, DualVariableConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DualVariableConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DualVariableConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DualVariableConfig* New() const final {
    return CreateMaybeMessage<DualVariableConfig>(nullptr);
  }

  DualVariableConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DualVariableConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DualVariableConfig& from);
  void MergeFrom(const DualVariableConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualVariableConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.DualVariableConfig";
  }
  protected:
  explicit DualVariableConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpoptConfigFieldNumber = 2,
    kMinSafetyDistanceFieldNumber = 4,
    kQpFormatFieldNumber = 3,
    kDebugOsqpFieldNumber = 5,
    kWeightDFieldNumber = 1,
    kBetaFieldNumber = 6,
  };
  // optional .nav2_smac_planner.IpoptSolverConfig ipopt_config = 2;
  bool has_ipopt_config() const;
  private:
  bool _internal_has_ipopt_config() const;
  public:
  void clear_ipopt_config();
  const ::nav2_smac_planner::IpoptSolverConfig& ipopt_config() const;
  ::nav2_smac_planner::IpoptSolverConfig* release_ipopt_config();
  ::nav2_smac_planner::IpoptSolverConfig* mutable_ipopt_config();
  void set_allocated_ipopt_config(::nav2_smac_planner::IpoptSolverConfig* ipopt_config);
  private:
  const ::nav2_smac_planner::IpoptSolverConfig& _internal_ipopt_config() const;
  ::nav2_smac_planner::IpoptSolverConfig* _internal_mutable_ipopt_config();
  public:
  void unsafe_arena_set_allocated_ipopt_config(
      ::nav2_smac_planner::IpoptSolverConfig* ipopt_config);
  ::nav2_smac_planner::IpoptSolverConfig* unsafe_arena_release_ipopt_config();

  // optional double min_safety_distance = 4 [default = 0];
  bool has_min_safety_distance() const;
  private:
  bool _internal_has_min_safety_distance() const;
  public:
  void clear_min_safety_distance();
  double min_safety_distance() const;
  void set_min_safety_distance(double value);
  private:
  double _internal_min_safety_distance() const;
  void _internal_set_min_safety_distance(double value);
  public:

  // optional .nav2_smac_planner.DualVariableMode qp_format = 3;
  bool has_qp_format() const;
  private:
  bool _internal_has_qp_format() const;
  public:
  void clear_qp_format();
  ::nav2_smac_planner::DualVariableMode qp_format() const;
  void set_qp_format(::nav2_smac_planner::DualVariableMode value);
  private:
  ::nav2_smac_planner::DualVariableMode _internal_qp_format() const;
  void _internal_set_qp_format(::nav2_smac_planner::DualVariableMode value);
  public:

  // optional bool debug_osqp = 5 [default = false];
  bool has_debug_osqp() const;
  private:
  bool _internal_has_debug_osqp() const;
  public:
  void clear_debug_osqp();
  bool debug_osqp() const;
  void set_debug_osqp(bool value);
  private:
  bool _internal_debug_osqp() const;
  void _internal_set_debug_osqp(bool value);
  public:

  // optional double weight_d = 1 [default = 1];
  bool has_weight_d() const;
  private:
  bool _internal_has_weight_d() const;
  public:
  void clear_weight_d();
  double weight_d() const;
  void set_weight_d(double value);
  private:
  double _internal_weight_d() const;
  void _internal_set_weight_d(double value);
  public:

  // optional double beta = 6 [default = 1];
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  double beta() const;
  void set_beta(double value);
  private:
  double _internal_beta() const;
  void _internal_set_beta(double value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.DualVariableConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::nav2_smac_planner::IpoptSolverConfig* ipopt_config_;
  double min_safety_distance_;
  int qp_format_;
  bool debug_osqp_;
  double weight_d_;
  double beta_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class IpoptSolverConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav2_smac_planner.IpoptSolverConfig) */ {
 public:
  inline IpoptSolverConfig() : IpoptSolverConfig(nullptr) {};
  virtual ~IpoptSolverConfig();

  IpoptSolverConfig(const IpoptSolverConfig& from);
  IpoptSolverConfig(IpoptSolverConfig&& from) noexcept
    : IpoptSolverConfig() {
    *this = ::std::move(from);
  }

  inline IpoptSolverConfig& operator=(const IpoptSolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpoptSolverConfig& operator=(IpoptSolverConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IpoptSolverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpoptSolverConfig* internal_default_instance() {
    return reinterpret_cast<const IpoptSolverConfig*>(
               &_IpoptSolverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IpoptSolverConfig& a, IpoptSolverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IpoptSolverConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpoptSolverConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpoptSolverConfig* New() const final {
    return CreateMaybeMessage<IpoptSolverConfig>(nullptr);
  }

  IpoptSolverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpoptSolverConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IpoptSolverConfig& from);
  void MergeFrom(const IpoptSolverConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpoptSolverConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav2_smac_planner.IpoptSolverConfig";
  }
  protected:
  explicit IpoptSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto);
    return ::descriptor_table_planner_5fopen_5fspace_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpoptPrintTimingStatisticsFieldNumber = 9,
    kIpoptAlphaForYFieldNumber = 10,
    kIpoptRecalcYFieldNumber = 11,
    kIpoptPrintLevelFieldNumber = 1,
    kMumpsMemPercentFieldNumber = 2,
    kMumpsPivtolFieldNumber = 3,
    kIpoptTolFieldNumber = 5,
    kIpoptAcceptableConstrViolTolFieldNumber = 6,
    kIpoptMinHessianPerturbationFieldNumber = 7,
    kIpoptJacobianRegularizationValueFieldNumber = 8,
    kIpoptMaxIterFieldNumber = 4,
    kIpoptMuInitFieldNumber = 12,
  };
  // optional string ipopt_print_timing_statistics = 9;
  bool has_ipopt_print_timing_statistics() const;
  private:
  bool _internal_has_ipopt_print_timing_statistics() const;
  public:
  void clear_ipopt_print_timing_statistics();
  const std::string& ipopt_print_timing_statistics() const;
  void set_ipopt_print_timing_statistics(const std::string& value);
  void set_ipopt_print_timing_statistics(std::string&& value);
  void set_ipopt_print_timing_statistics(const char* value);
  void set_ipopt_print_timing_statistics(const char* value, size_t size);
  std::string* mutable_ipopt_print_timing_statistics();
  std::string* release_ipopt_print_timing_statistics();
  void set_allocated_ipopt_print_timing_statistics(std::string* ipopt_print_timing_statistics);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipopt_print_timing_statistics();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipopt_print_timing_statistics(
      std::string* ipopt_print_timing_statistics);
  private:
  const std::string& _internal_ipopt_print_timing_statistics() const;
  void _internal_set_ipopt_print_timing_statistics(const std::string& value);
  std::string* _internal_mutable_ipopt_print_timing_statistics();
  public:

  // optional string ipopt_alpha_for_y = 10;
  bool has_ipopt_alpha_for_y() const;
  private:
  bool _internal_has_ipopt_alpha_for_y() const;
  public:
  void clear_ipopt_alpha_for_y();
  const std::string& ipopt_alpha_for_y() const;
  void set_ipopt_alpha_for_y(const std::string& value);
  void set_ipopt_alpha_for_y(std::string&& value);
  void set_ipopt_alpha_for_y(const char* value);
  void set_ipopt_alpha_for_y(const char* value, size_t size);
  std::string* mutable_ipopt_alpha_for_y();
  std::string* release_ipopt_alpha_for_y();
  void set_allocated_ipopt_alpha_for_y(std::string* ipopt_alpha_for_y);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipopt_alpha_for_y();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipopt_alpha_for_y(
      std::string* ipopt_alpha_for_y);
  private:
  const std::string& _internal_ipopt_alpha_for_y() const;
  void _internal_set_ipopt_alpha_for_y(const std::string& value);
  std::string* _internal_mutable_ipopt_alpha_for_y();
  public:

  // optional string ipopt_recalc_y = 11;
  bool has_ipopt_recalc_y() const;
  private:
  bool _internal_has_ipopt_recalc_y() const;
  public:
  void clear_ipopt_recalc_y();
  const std::string& ipopt_recalc_y() const;
  void set_ipopt_recalc_y(const std::string& value);
  void set_ipopt_recalc_y(std::string&& value);
  void set_ipopt_recalc_y(const char* value);
  void set_ipopt_recalc_y(const char* value, size_t size);
  std::string* mutable_ipopt_recalc_y();
  std::string* release_ipopt_recalc_y();
  void set_allocated_ipopt_recalc_y(std::string* ipopt_recalc_y);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ipopt_recalc_y();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipopt_recalc_y(
      std::string* ipopt_recalc_y);
  private:
  const std::string& _internal_ipopt_recalc_y() const;
  void _internal_set_ipopt_recalc_y(const std::string& value);
  std::string* _internal_mutable_ipopt_recalc_y();
  public:

  // optional int32 ipopt_print_level = 1;
  bool has_ipopt_print_level() const;
  private:
  bool _internal_has_ipopt_print_level() const;
  public:
  void clear_ipopt_print_level();
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_print_level() const;
  void set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ipopt_print_level() const;
  void _internal_set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mumps_mem_percent = 2;
  bool has_mumps_mem_percent() const;
  private:
  bool _internal_has_mumps_mem_percent() const;
  public:
  void clear_mumps_mem_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 mumps_mem_percent() const;
  void set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mumps_mem_percent() const;
  void _internal_set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double mumps_pivtol = 3;
  bool has_mumps_pivtol() const;
  private:
  bool _internal_has_mumps_pivtol() const;
  public:
  void clear_mumps_pivtol();
  double mumps_pivtol() const;
  void set_mumps_pivtol(double value);
  private:
  double _internal_mumps_pivtol() const;
  void _internal_set_mumps_pivtol(double value);
  public:

  // optional double ipopt_tol = 5;
  bool has_ipopt_tol() const;
  private:
  bool _internal_has_ipopt_tol() const;
  public:
  void clear_ipopt_tol();
  double ipopt_tol() const;
  void set_ipopt_tol(double value);
  private:
  double _internal_ipopt_tol() const;
  void _internal_set_ipopt_tol(double value);
  public:

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  bool has_ipopt_acceptable_constr_viol_tol() const;
  private:
  bool _internal_has_ipopt_acceptable_constr_viol_tol() const;
  public:
  void clear_ipopt_acceptable_constr_viol_tol();
  double ipopt_acceptable_constr_viol_tol() const;
  void set_ipopt_acceptable_constr_viol_tol(double value);
  private:
  double _internal_ipopt_acceptable_constr_viol_tol() const;
  void _internal_set_ipopt_acceptable_constr_viol_tol(double value);
  public:

  // optional double ipopt_min_hessian_perturbation = 7;
  bool has_ipopt_min_hessian_perturbation() const;
  private:
  bool _internal_has_ipopt_min_hessian_perturbation() const;
  public:
  void clear_ipopt_min_hessian_perturbation();
  double ipopt_min_hessian_perturbation() const;
  void set_ipopt_min_hessian_perturbation(double value);
  private:
  double _internal_ipopt_min_hessian_perturbation() const;
  void _internal_set_ipopt_min_hessian_perturbation(double value);
  public:

  // optional double ipopt_jacobian_regularization_value = 8;
  bool has_ipopt_jacobian_regularization_value() const;
  private:
  bool _internal_has_ipopt_jacobian_regularization_value() const;
  public:
  void clear_ipopt_jacobian_regularization_value();
  double ipopt_jacobian_regularization_value() const;
  void set_ipopt_jacobian_regularization_value(double value);
  private:
  double _internal_ipopt_jacobian_regularization_value() const;
  void _internal_set_ipopt_jacobian_regularization_value(double value);
  public:

  // optional int32 ipopt_max_iter = 4;
  bool has_ipopt_max_iter() const;
  private:
  bool _internal_has_ipopt_max_iter() const;
  public:
  void clear_ipopt_max_iter();
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_max_iter() const;
  void set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ipopt_max_iter() const;
  void _internal_set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double ipopt_mu_init = 12 [default = 0.1];
  bool has_ipopt_mu_init() const;
  private:
  bool _internal_has_ipopt_mu_init() const;
  public:
  void clear_ipopt_mu_init();
  double ipopt_mu_init() const;
  void set_ipopt_mu_init(double value);
  private:
  double _internal_ipopt_mu_init() const;
  void _internal_set_ipopt_mu_init(double value);
  public:

  // @@protoc_insertion_point(class_scope:nav2_smac_planner.IpoptSolverConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_print_timing_statistics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_alpha_for_y_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_recalc_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_print_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 mumps_mem_percent_;
  double mumps_pivtol_;
  double ipopt_tol_;
  double ipopt_acceptable_constr_viol_tol_;
  double ipopt_min_hessian_perturbation_;
  double ipopt_jacobian_regularization_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_max_iter_;
  double ipopt_mu_init_;
  friend struct ::TableStruct_planner_5fopen_5fspace_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlannerOpenSpaceConfig

// optional .nav2_smac_planner.ROIConfig roi_config = 1;
inline bool PlannerOpenSpaceConfig::_internal_has_roi_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || roi_config_ != nullptr);
  return value;
}
inline bool PlannerOpenSpaceConfig::has_roi_config() const {
  return _internal_has_roi_config();
}
inline void PlannerOpenSpaceConfig::clear_roi_config() {
  if (roi_config_ != nullptr) roi_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nav2_smac_planner::ROIConfig& PlannerOpenSpaceConfig::_internal_roi_config() const {
  const ::nav2_smac_planner::ROIConfig* p = roi_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::ROIConfig*>(
      &::nav2_smac_planner::_ROIConfig_default_instance_);
}
inline const ::nav2_smac_planner::ROIConfig& PlannerOpenSpaceConfig::roi_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.PlannerOpenSpaceConfig.roi_config)
  return _internal_roi_config();
}
inline void PlannerOpenSpaceConfig::unsafe_arena_set_allocated_roi_config(
    ::nav2_smac_planner::ROIConfig* roi_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_config_);
  }
  roi_config_ = roi_config;
  if (roi_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.PlannerOpenSpaceConfig.roi_config)
}
inline ::nav2_smac_planner::ROIConfig* PlannerOpenSpaceConfig::release_roi_config() {
  auto temp = unsafe_arena_release_roi_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::ROIConfig* PlannerOpenSpaceConfig::unsafe_arena_release_roi_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.PlannerOpenSpaceConfig.roi_config)
  _has_bits_[0] &= ~0x00000001u;
  ::nav2_smac_planner::ROIConfig* temp = roi_config_;
  roi_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::ROIConfig* PlannerOpenSpaceConfig::_internal_mutable_roi_config() {
  _has_bits_[0] |= 0x00000001u;
  if (roi_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::ROIConfig>(GetArena());
    roi_config_ = p;
  }
  return roi_config_;
}
inline ::nav2_smac_planner::ROIConfig* PlannerOpenSpaceConfig::mutable_roi_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.PlannerOpenSpaceConfig.roi_config)
  return _internal_mutable_roi_config();
}
inline void PlannerOpenSpaceConfig::set_allocated_roi_config(::nav2_smac_planner::ROIConfig* roi_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete roi_config_;
  }
  if (roi_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roi_config);
    if (message_arena != submessage_arena) {
      roi_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  roi_config_ = roi_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.PlannerOpenSpaceConfig.roi_config)
}

// optional .nav2_smac_planner.WarmStartConfig warm_start_config = 2;
inline bool PlannerOpenSpaceConfig::_internal_has_warm_start_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || warm_start_config_ != nullptr);
  return value;
}
inline bool PlannerOpenSpaceConfig::has_warm_start_config() const {
  return _internal_has_warm_start_config();
}
inline void PlannerOpenSpaceConfig::clear_warm_start_config() {
  if (warm_start_config_ != nullptr) warm_start_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::nav2_smac_planner::WarmStartConfig& PlannerOpenSpaceConfig::_internal_warm_start_config() const {
  const ::nav2_smac_planner::WarmStartConfig* p = warm_start_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::WarmStartConfig*>(
      &::nav2_smac_planner::_WarmStartConfig_default_instance_);
}
inline const ::nav2_smac_planner::WarmStartConfig& PlannerOpenSpaceConfig::warm_start_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.PlannerOpenSpaceConfig.warm_start_config)
  return _internal_warm_start_config();
}
inline void PlannerOpenSpaceConfig::unsafe_arena_set_allocated_warm_start_config(
    ::nav2_smac_planner::WarmStartConfig* warm_start_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(warm_start_config_);
  }
  warm_start_config_ = warm_start_config;
  if (warm_start_config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.PlannerOpenSpaceConfig.warm_start_config)
}
inline ::nav2_smac_planner::WarmStartConfig* PlannerOpenSpaceConfig::release_warm_start_config() {
  auto temp = unsafe_arena_release_warm_start_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::WarmStartConfig* PlannerOpenSpaceConfig::unsafe_arena_release_warm_start_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.PlannerOpenSpaceConfig.warm_start_config)
  _has_bits_[0] &= ~0x00000002u;
  ::nav2_smac_planner::WarmStartConfig* temp = warm_start_config_;
  warm_start_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::WarmStartConfig* PlannerOpenSpaceConfig::_internal_mutable_warm_start_config() {
  _has_bits_[0] |= 0x00000002u;
  if (warm_start_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::WarmStartConfig>(GetArena());
    warm_start_config_ = p;
  }
  return warm_start_config_;
}
inline ::nav2_smac_planner::WarmStartConfig* PlannerOpenSpaceConfig::mutable_warm_start_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.PlannerOpenSpaceConfig.warm_start_config)
  return _internal_mutable_warm_start_config();
}
inline void PlannerOpenSpaceConfig::set_allocated_warm_start_config(::nav2_smac_planner::WarmStartConfig* warm_start_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete warm_start_config_;
  }
  if (warm_start_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(warm_start_config);
    if (message_arena != submessage_arena) {
      warm_start_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warm_start_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  warm_start_config_ = warm_start_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.PlannerOpenSpaceConfig.warm_start_config)
}

// optional .nav2_smac_planner.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
inline bool PlannerOpenSpaceConfig::_internal_has_dual_variable_warm_start_config() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || dual_variable_warm_start_config_ != nullptr);
  return value;
}
inline bool PlannerOpenSpaceConfig::has_dual_variable_warm_start_config() const {
  return _internal_has_dual_variable_warm_start_config();
}
inline void PlannerOpenSpaceConfig::clear_dual_variable_warm_start_config() {
  if (dual_variable_warm_start_config_ != nullptr) dual_variable_warm_start_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::nav2_smac_planner::DualVariableWarmStartConfig& PlannerOpenSpaceConfig::_internal_dual_variable_warm_start_config() const {
  const ::nav2_smac_planner::DualVariableWarmStartConfig* p = dual_variable_warm_start_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::DualVariableWarmStartConfig*>(
      &::nav2_smac_planner::_DualVariableWarmStartConfig_default_instance_);
}
inline const ::nav2_smac_planner::DualVariableWarmStartConfig& PlannerOpenSpaceConfig::dual_variable_warm_start_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  return _internal_dual_variable_warm_start_config();
}
inline void PlannerOpenSpaceConfig::unsafe_arena_set_allocated_dual_variable_warm_start_config(
    ::nav2_smac_planner::DualVariableWarmStartConfig* dual_variable_warm_start_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dual_variable_warm_start_config_);
  }
  dual_variable_warm_start_config_ = dual_variable_warm_start_config;
  if (dual_variable_warm_start_config) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
}
inline ::nav2_smac_planner::DualVariableWarmStartConfig* PlannerOpenSpaceConfig::release_dual_variable_warm_start_config() {
  auto temp = unsafe_arena_release_dual_variable_warm_start_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::DualVariableWarmStartConfig* PlannerOpenSpaceConfig::unsafe_arena_release_dual_variable_warm_start_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  _has_bits_[0] &= ~0x00000004u;
  ::nav2_smac_planner::DualVariableWarmStartConfig* temp = dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::DualVariableWarmStartConfig* PlannerOpenSpaceConfig::_internal_mutable_dual_variable_warm_start_config() {
  _has_bits_[0] |= 0x00000004u;
  if (dual_variable_warm_start_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::DualVariableWarmStartConfig>(GetArena());
    dual_variable_warm_start_config_ = p;
  }
  return dual_variable_warm_start_config_;
}
inline ::nav2_smac_planner::DualVariableWarmStartConfig* PlannerOpenSpaceConfig::mutable_dual_variable_warm_start_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  return _internal_mutable_dual_variable_warm_start_config();
}
inline void PlannerOpenSpaceConfig::set_allocated_dual_variable_warm_start_config(::nav2_smac_planner::DualVariableWarmStartConfig* dual_variable_warm_start_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dual_variable_warm_start_config_;
  }
  if (dual_variable_warm_start_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dual_variable_warm_start_config);
    if (message_arena != submessage_arena) {
      dual_variable_warm_start_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dual_variable_warm_start_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dual_variable_warm_start_config_ = dual_variable_warm_start_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
}

// optional .nav2_smac_planner.DistanceApproachConfig distance_approach_config = 4;
inline bool PlannerOpenSpaceConfig::_internal_has_distance_approach_config() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || distance_approach_config_ != nullptr);
  return value;
}
inline bool PlannerOpenSpaceConfig::has_distance_approach_config() const {
  return _internal_has_distance_approach_config();
}
inline void PlannerOpenSpaceConfig::clear_distance_approach_config() {
  if (distance_approach_config_ != nullptr) distance_approach_config_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::nav2_smac_planner::DistanceApproachConfig& PlannerOpenSpaceConfig::_internal_distance_approach_config() const {
  const ::nav2_smac_planner::DistanceApproachConfig* p = distance_approach_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::DistanceApproachConfig*>(
      &::nav2_smac_planner::_DistanceApproachConfig_default_instance_);
}
inline const ::nav2_smac_planner::DistanceApproachConfig& PlannerOpenSpaceConfig::distance_approach_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.PlannerOpenSpaceConfig.distance_approach_config)
  return _internal_distance_approach_config();
}
inline void PlannerOpenSpaceConfig::unsafe_arena_set_allocated_distance_approach_config(
    ::nav2_smac_planner::DistanceApproachConfig* distance_approach_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distance_approach_config_);
  }
  distance_approach_config_ = distance_approach_config;
  if (distance_approach_config) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.PlannerOpenSpaceConfig.distance_approach_config)
}
inline ::nav2_smac_planner::DistanceApproachConfig* PlannerOpenSpaceConfig::release_distance_approach_config() {
  auto temp = unsafe_arena_release_distance_approach_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::DistanceApproachConfig* PlannerOpenSpaceConfig::unsafe_arena_release_distance_approach_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.PlannerOpenSpaceConfig.distance_approach_config)
  _has_bits_[0] &= ~0x00000008u;
  ::nav2_smac_planner::DistanceApproachConfig* temp = distance_approach_config_;
  distance_approach_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::DistanceApproachConfig* PlannerOpenSpaceConfig::_internal_mutable_distance_approach_config() {
  _has_bits_[0] |= 0x00000008u;
  if (distance_approach_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::DistanceApproachConfig>(GetArena());
    distance_approach_config_ = p;
  }
  return distance_approach_config_;
}
inline ::nav2_smac_planner::DistanceApproachConfig* PlannerOpenSpaceConfig::mutable_distance_approach_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.PlannerOpenSpaceConfig.distance_approach_config)
  return _internal_mutable_distance_approach_config();
}
inline void PlannerOpenSpaceConfig::set_allocated_distance_approach_config(::nav2_smac_planner::DistanceApproachConfig* distance_approach_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete distance_approach_config_;
  }
  if (distance_approach_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(distance_approach_config);
    if (message_arena != submessage_arena) {
      distance_approach_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distance_approach_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  distance_approach_config_ = distance_approach_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.PlannerOpenSpaceConfig.distance_approach_config)
}

// optional .nav2_smac_planner.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
inline bool PlannerOpenSpaceConfig::_internal_has_iterative_anchoring_smoother_config() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || iterative_anchoring_smoother_config_ != nullptr);
  return value;
}
inline bool PlannerOpenSpaceConfig::has_iterative_anchoring_smoother_config() const {
  return _internal_has_iterative_anchoring_smoother_config();
}
inline void PlannerOpenSpaceConfig::clear_iterative_anchoring_smoother_config() {
  if (iterative_anchoring_smoother_config_ != nullptr) iterative_anchoring_smoother_config_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::nav2_smac_planner::IterativeAnchoringConfig& PlannerOpenSpaceConfig::_internal_iterative_anchoring_smoother_config() const {
  const ::nav2_smac_planner::IterativeAnchoringConfig* p = iterative_anchoring_smoother_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::IterativeAnchoringConfig*>(
      &::nav2_smac_planner::_IterativeAnchoringConfig_default_instance_);
}
inline const ::nav2_smac_planner::IterativeAnchoringConfig& PlannerOpenSpaceConfig::iterative_anchoring_smoother_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  return _internal_iterative_anchoring_smoother_config();
}
inline void PlannerOpenSpaceConfig::unsafe_arena_set_allocated_iterative_anchoring_smoother_config(
    ::nav2_smac_planner::IterativeAnchoringConfig* iterative_anchoring_smoother_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iterative_anchoring_smoother_config_);
  }
  iterative_anchoring_smoother_config_ = iterative_anchoring_smoother_config;
  if (iterative_anchoring_smoother_config) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
}
inline ::nav2_smac_planner::IterativeAnchoringConfig* PlannerOpenSpaceConfig::release_iterative_anchoring_smoother_config() {
  auto temp = unsafe_arena_release_iterative_anchoring_smoother_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::IterativeAnchoringConfig* PlannerOpenSpaceConfig::unsafe_arena_release_iterative_anchoring_smoother_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  _has_bits_[0] &= ~0x00000010u;
  ::nav2_smac_planner::IterativeAnchoringConfig* temp = iterative_anchoring_smoother_config_;
  iterative_anchoring_smoother_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::IterativeAnchoringConfig* PlannerOpenSpaceConfig::_internal_mutable_iterative_anchoring_smoother_config() {
  _has_bits_[0] |= 0x00000010u;
  if (iterative_anchoring_smoother_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::IterativeAnchoringConfig>(GetArena());
    iterative_anchoring_smoother_config_ = p;
  }
  return iterative_anchoring_smoother_config_;
}
inline ::nav2_smac_planner::IterativeAnchoringConfig* PlannerOpenSpaceConfig::mutable_iterative_anchoring_smoother_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  return _internal_mutable_iterative_anchoring_smoother_config();
}
inline void PlannerOpenSpaceConfig::set_allocated_iterative_anchoring_smoother_config(::nav2_smac_planner::IterativeAnchoringConfig* iterative_anchoring_smoother_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete iterative_anchoring_smoother_config_;
  }
  if (iterative_anchoring_smoother_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(iterative_anchoring_smoother_config);
    if (message_arena != submessage_arena) {
      iterative_anchoring_smoother_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iterative_anchoring_smoother_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  iterative_anchoring_smoother_config_ = iterative_anchoring_smoother_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
}

// optional float delta_t = 7 [default = 1];
inline bool PlannerOpenSpaceConfig::_internal_has_delta_t() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PlannerOpenSpaceConfig::has_delta_t() const {
  return _internal_has_delta_t();
}
inline void PlannerOpenSpaceConfig::clear_delta_t() {
  delta_t_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PlannerOpenSpaceConfig::_internal_delta_t() const {
  return delta_t_;
}
inline float PlannerOpenSpaceConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.PlannerOpenSpaceConfig.delta_t)
  return _internal_delta_t();
}
inline void PlannerOpenSpaceConfig::_internal_set_delta_t(float value) {
  _has_bits_[0] |= 0x00000040u;
  delta_t_ = value;
}
inline void PlannerOpenSpaceConfig::set_delta_t(float value) {
  _internal_set_delta_t(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.PlannerOpenSpaceConfig.delta_t)
}

// optional double near_destination_threshold = 8 [default = 0.001];
inline bool PlannerOpenSpaceConfig::_internal_has_near_destination_threshold() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PlannerOpenSpaceConfig::has_near_destination_threshold() const {
  return _internal_has_near_destination_threshold();
}
inline void PlannerOpenSpaceConfig::clear_near_destination_threshold() {
  near_destination_threshold_ = 0.001;
  _has_bits_[0] &= ~0x00000080u;
}
inline double PlannerOpenSpaceConfig::_internal_near_destination_threshold() const {
  return near_destination_threshold_;
}
inline double PlannerOpenSpaceConfig::near_destination_threshold() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.PlannerOpenSpaceConfig.near_destination_threshold)
  return _internal_near_destination_threshold();
}
inline void PlannerOpenSpaceConfig::_internal_set_near_destination_threshold(double value) {
  _has_bits_[0] |= 0x00000080u;
  near_destination_threshold_ = value;
}
inline void PlannerOpenSpaceConfig::set_near_destination_threshold(double value) {
  _internal_set_near_destination_threshold(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.PlannerOpenSpaceConfig.near_destination_threshold)
}

// optional bool enable_linear_interpolation = 10 [default = false];
inline bool PlannerOpenSpaceConfig::_internal_has_enable_linear_interpolation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PlannerOpenSpaceConfig::has_enable_linear_interpolation() const {
  return _internal_has_enable_linear_interpolation();
}
inline void PlannerOpenSpaceConfig::clear_enable_linear_interpolation() {
  enable_linear_interpolation_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PlannerOpenSpaceConfig::_internal_enable_linear_interpolation() const {
  return enable_linear_interpolation_;
}
inline bool PlannerOpenSpaceConfig::enable_linear_interpolation() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.PlannerOpenSpaceConfig.enable_linear_interpolation)
  return _internal_enable_linear_interpolation();
}
inline void PlannerOpenSpaceConfig::_internal_set_enable_linear_interpolation(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_linear_interpolation_ = value;
}
inline void PlannerOpenSpaceConfig::set_enable_linear_interpolation(bool value) {
  _internal_set_enable_linear_interpolation(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.PlannerOpenSpaceConfig.enable_linear_interpolation)
}

// optional double is_near_destination_theta_threshold = 11 [default = 0.05];
inline bool PlannerOpenSpaceConfig::_internal_has_is_near_destination_theta_threshold() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PlannerOpenSpaceConfig::has_is_near_destination_theta_threshold() const {
  return _internal_has_is_near_destination_theta_threshold();
}
inline void PlannerOpenSpaceConfig::clear_is_near_destination_theta_threshold() {
  is_near_destination_theta_threshold_ = 0.05;
  _has_bits_[0] &= ~0x00000100u;
}
inline double PlannerOpenSpaceConfig::_internal_is_near_destination_theta_threshold() const {
  return is_near_destination_theta_threshold_;
}
inline double PlannerOpenSpaceConfig::is_near_destination_theta_threshold() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.PlannerOpenSpaceConfig.is_near_destination_theta_threshold)
  return _internal_is_near_destination_theta_threshold();
}
inline void PlannerOpenSpaceConfig::_internal_set_is_near_destination_theta_threshold(double value) {
  _has_bits_[0] |= 0x00000100u;
  is_near_destination_theta_threshold_ = value;
}
inline void PlannerOpenSpaceConfig::set_is_near_destination_theta_threshold(double value) {
  _internal_set_is_near_destination_theta_threshold(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.PlannerOpenSpaceConfig.is_near_destination_theta_threshold)
}

// -------------------------------------------------------------------

// ROIConfig

// optional double roi_longitudinal_range_start = 1 [default = 10];
inline bool ROIConfig::_internal_has_roi_longitudinal_range_start() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROIConfig::has_roi_longitudinal_range_start() const {
  return _internal_has_roi_longitudinal_range_start();
}
inline void ROIConfig::clear_roi_longitudinal_range_start() {
  roi_longitudinal_range_start_ = 10;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ROIConfig::_internal_roi_longitudinal_range_start() const {
  return roi_longitudinal_range_start_;
}
inline double ROIConfig::roi_longitudinal_range_start() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.ROIConfig.roi_longitudinal_range_start)
  return _internal_roi_longitudinal_range_start();
}
inline void ROIConfig::_internal_set_roi_longitudinal_range_start(double value) {
  _has_bits_[0] |= 0x00000002u;
  roi_longitudinal_range_start_ = value;
}
inline void ROIConfig::set_roi_longitudinal_range_start(double value) {
  _internal_set_roi_longitudinal_range_start(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.ROIConfig.roi_longitudinal_range_start)
}

// optional double roi_longitudinal_range_end = 2 [default = 10];
inline bool ROIConfig::_internal_has_roi_longitudinal_range_end() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROIConfig::has_roi_longitudinal_range_end() const {
  return _internal_has_roi_longitudinal_range_end();
}
inline void ROIConfig::clear_roi_longitudinal_range_end() {
  roi_longitudinal_range_end_ = 10;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ROIConfig::_internal_roi_longitudinal_range_end() const {
  return roi_longitudinal_range_end_;
}
inline double ROIConfig::roi_longitudinal_range_end() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.ROIConfig.roi_longitudinal_range_end)
  return _internal_roi_longitudinal_range_end();
}
inline void ROIConfig::_internal_set_roi_longitudinal_range_end(double value) {
  _has_bits_[0] |= 0x00000004u;
  roi_longitudinal_range_end_ = value;
}
inline void ROIConfig::set_roi_longitudinal_range_end(double value) {
  _internal_set_roi_longitudinal_range_end(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.ROIConfig.roi_longitudinal_range_end)
}

// optional double parking_start_range = 3 [default = 7];
inline bool ROIConfig::_internal_has_parking_start_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ROIConfig::has_parking_start_range() const {
  return _internal_has_parking_start_range();
}
inline void ROIConfig::clear_parking_start_range() {
  parking_start_range_ = 7;
  _has_bits_[0] &= ~0x00000008u;
}
inline double ROIConfig::_internal_parking_start_range() const {
  return parking_start_range_;
}
inline double ROIConfig::parking_start_range() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.ROIConfig.parking_start_range)
  return _internal_parking_start_range();
}
inline void ROIConfig::_internal_set_parking_start_range(double value) {
  _has_bits_[0] |= 0x00000008u;
  parking_start_range_ = value;
}
inline void ROIConfig::set_parking_start_range(double value) {
  _internal_set_parking_start_range(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.ROIConfig.parking_start_range)
}

// optional bool parking_inwards = 4 [default = false];
inline bool ROIConfig::_internal_has_parking_inwards() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROIConfig::has_parking_inwards() const {
  return _internal_has_parking_inwards();
}
inline void ROIConfig::clear_parking_inwards() {
  parking_inwards_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ROIConfig::_internal_parking_inwards() const {
  return parking_inwards_;
}
inline bool ROIConfig::parking_inwards() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.ROIConfig.parking_inwards)
  return _internal_parking_inwards();
}
inline void ROIConfig::_internal_set_parking_inwards(bool value) {
  _has_bits_[0] |= 0x00000001u;
  parking_inwards_ = value;
}
inline void ROIConfig::set_parking_inwards(bool value) {
  _internal_set_parking_inwards(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.ROIConfig.parking_inwards)
}

// -------------------------------------------------------------------

// SpeedOptimizerConfig

// optional double acc_weight = 1 [default = 1];
inline bool SpeedOptimizerConfig::_internal_has_acc_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpeedOptimizerConfig::has_acc_weight() const {
  return _internal_has_acc_weight();
}
inline void SpeedOptimizerConfig::clear_acc_weight() {
  acc_weight_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SpeedOptimizerConfig::_internal_acc_weight() const {
  return acc_weight_;
}
inline double SpeedOptimizerConfig::acc_weight() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.SpeedOptimizerConfig.acc_weight)
  return _internal_acc_weight();
}
inline void SpeedOptimizerConfig::_internal_set_acc_weight(double value) {
  _has_bits_[0] |= 0x00000001u;
  acc_weight_ = value;
}
inline void SpeedOptimizerConfig::set_acc_weight(double value) {
  _internal_set_acc_weight(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.SpeedOptimizerConfig.acc_weight)
}

// optional double jerk_weight = 2 [default = 10];
inline bool SpeedOptimizerConfig::_internal_has_jerk_weight() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpeedOptimizerConfig::has_jerk_weight() const {
  return _internal_has_jerk_weight();
}
inline void SpeedOptimizerConfig::clear_jerk_weight() {
  jerk_weight_ = 10;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SpeedOptimizerConfig::_internal_jerk_weight() const {
  return jerk_weight_;
}
inline double SpeedOptimizerConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.SpeedOptimizerConfig.jerk_weight)
  return _internal_jerk_weight();
}
inline void SpeedOptimizerConfig::_internal_set_jerk_weight(double value) {
  _has_bits_[0] |= 0x00000002u;
  jerk_weight_ = value;
}
inline void SpeedOptimizerConfig::set_jerk_weight(double value) {
  _internal_set_jerk_weight(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.SpeedOptimizerConfig.jerk_weight)
}

// optional double kappa_penalty_weight = 3 [default = 1000];
inline bool SpeedOptimizerConfig::_internal_has_kappa_penalty_weight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpeedOptimizerConfig::has_kappa_penalty_weight() const {
  return _internal_has_kappa_penalty_weight();
}
inline void SpeedOptimizerConfig::clear_kappa_penalty_weight() {
  kappa_penalty_weight_ = 1000;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SpeedOptimizerConfig::_internal_kappa_penalty_weight() const {
  return kappa_penalty_weight_;
}
inline double SpeedOptimizerConfig::kappa_penalty_weight() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.SpeedOptimizerConfig.kappa_penalty_weight)
  return _internal_kappa_penalty_weight();
}
inline void SpeedOptimizerConfig::_internal_set_kappa_penalty_weight(double value) {
  _has_bits_[0] |= 0x00000004u;
  kappa_penalty_weight_ = value;
}
inline void SpeedOptimizerConfig::set_kappa_penalty_weight(double value) {
  _internal_set_kappa_penalty_weight(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.SpeedOptimizerConfig.kappa_penalty_weight)
}

// optional double ref_s_weight = 4 [default = 10];
inline bool SpeedOptimizerConfig::_internal_has_ref_s_weight() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SpeedOptimizerConfig::has_ref_s_weight() const {
  return _internal_has_ref_s_weight();
}
inline void SpeedOptimizerConfig::clear_ref_s_weight() {
  ref_s_weight_ = 10;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SpeedOptimizerConfig::_internal_ref_s_weight() const {
  return ref_s_weight_;
}
inline double SpeedOptimizerConfig::ref_s_weight() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.SpeedOptimizerConfig.ref_s_weight)
  return _internal_ref_s_weight();
}
inline void SpeedOptimizerConfig::_internal_set_ref_s_weight(double value) {
  _has_bits_[0] |= 0x00000008u;
  ref_s_weight_ = value;
}
inline void SpeedOptimizerConfig::set_ref_s_weight(double value) {
  _internal_set_ref_s_weight(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.SpeedOptimizerConfig.ref_s_weight)
}

// optional double ref_v_weight = 5 [default = 10];
inline bool SpeedOptimizerConfig::_internal_has_ref_v_weight() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SpeedOptimizerConfig::has_ref_v_weight() const {
  return _internal_has_ref_v_weight();
}
inline void SpeedOptimizerConfig::clear_ref_v_weight() {
  ref_v_weight_ = 10;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SpeedOptimizerConfig::_internal_ref_v_weight() const {
  return ref_v_weight_;
}
inline double SpeedOptimizerConfig::ref_v_weight() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.SpeedOptimizerConfig.ref_v_weight)
  return _internal_ref_v_weight();
}
inline void SpeedOptimizerConfig::_internal_set_ref_v_weight(double value) {
  _has_bits_[0] |= 0x00000010u;
  ref_v_weight_ = value;
}
inline void SpeedOptimizerConfig::set_ref_v_weight(double value) {
  _internal_set_ref_v_weight(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.SpeedOptimizerConfig.ref_v_weight)
}

// -------------------------------------------------------------------

// WarmStartConfig

// optional double xy_grid_resolution = 1 [default = 0.2];
inline bool WarmStartConfig::_internal_has_xy_grid_resolution() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WarmStartConfig::has_xy_grid_resolution() const {
  return _internal_has_xy_grid_resolution();
}
inline void WarmStartConfig::clear_xy_grid_resolution() {
  xy_grid_resolution_ = 0.2;
  _has_bits_[0] &= ~0x00000010u;
}
inline double WarmStartConfig::_internal_xy_grid_resolution() const {
  return xy_grid_resolution_;
}
inline double WarmStartConfig::xy_grid_resolution() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.xy_grid_resolution)
  return _internal_xy_grid_resolution();
}
inline void WarmStartConfig::_internal_set_xy_grid_resolution(double value) {
  _has_bits_[0] |= 0x00000010u;
  xy_grid_resolution_ = value;
}
inline void WarmStartConfig::set_xy_grid_resolution(double value) {
  _internal_set_xy_grid_resolution(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.xy_grid_resolution)
}

// optional double phi_grid_resolution = 2 [default = 0.05];
inline bool WarmStartConfig::_internal_has_phi_grid_resolution() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WarmStartConfig::has_phi_grid_resolution() const {
  return _internal_has_phi_grid_resolution();
}
inline void WarmStartConfig::clear_phi_grid_resolution() {
  phi_grid_resolution_ = 0.05;
  _has_bits_[0] &= ~0x00000020u;
}
inline double WarmStartConfig::_internal_phi_grid_resolution() const {
  return phi_grid_resolution_;
}
inline double WarmStartConfig::phi_grid_resolution() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.phi_grid_resolution)
  return _internal_phi_grid_resolution();
}
inline void WarmStartConfig::_internal_set_phi_grid_resolution(double value) {
  _has_bits_[0] |= 0x00000020u;
  phi_grid_resolution_ = value;
}
inline void WarmStartConfig::set_phi_grid_resolution(double value) {
  _internal_set_phi_grid_resolution(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.phi_grid_resolution)
}

// optional uint64 next_node_num = 3 [default = 10];
inline bool WarmStartConfig::_internal_has_next_node_num() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WarmStartConfig::has_next_node_num() const {
  return _internal_has_next_node_num();
}
inline void WarmStartConfig::clear_next_node_num() {
  next_node_num_ = PROTOBUF_ULONGLONG(10);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WarmStartConfig::_internal_next_node_num() const {
  return next_node_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WarmStartConfig::next_node_num() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.next_node_num)
  return _internal_next_node_num();
}
inline void WarmStartConfig::_internal_set_next_node_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  next_node_num_ = value;
}
inline void WarmStartConfig::set_next_node_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_node_num(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.next_node_num)
}

// optional double step_size = 4 [default = 0.5];
inline bool WarmStartConfig::_internal_has_step_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WarmStartConfig::has_step_size() const {
  return _internal_has_step_size();
}
inline void WarmStartConfig::clear_step_size() {
  step_size_ = 0.5;
  _has_bits_[0] &= ~0x00000080u;
}
inline double WarmStartConfig::_internal_step_size() const {
  return step_size_;
}
inline double WarmStartConfig::step_size() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.step_size)
  return _internal_step_size();
}
inline void WarmStartConfig::_internal_set_step_size(double value) {
  _has_bits_[0] |= 0x00000080u;
  step_size_ = value;
}
inline void WarmStartConfig::set_step_size(double value) {
  _internal_set_step_size(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.step_size)
}

// optional double traj_forward_penalty = 5 [default = 0];
inline bool WarmStartConfig::_internal_has_traj_forward_penalty() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WarmStartConfig::has_traj_forward_penalty() const {
  return _internal_has_traj_forward_penalty();
}
inline void WarmStartConfig::clear_traj_forward_penalty() {
  traj_forward_penalty_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double WarmStartConfig::_internal_traj_forward_penalty() const {
  return traj_forward_penalty_;
}
inline double WarmStartConfig::traj_forward_penalty() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.traj_forward_penalty)
  return _internal_traj_forward_penalty();
}
inline void WarmStartConfig::_internal_set_traj_forward_penalty(double value) {
  _has_bits_[0] |= 0x00000002u;
  traj_forward_penalty_ = value;
}
inline void WarmStartConfig::set_traj_forward_penalty(double value) {
  _internal_set_traj_forward_penalty(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.traj_forward_penalty)
}

// optional double traj_back_penalty = 6 [default = 0];
inline bool WarmStartConfig::_internal_has_traj_back_penalty() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WarmStartConfig::has_traj_back_penalty() const {
  return _internal_has_traj_back_penalty();
}
inline void WarmStartConfig::clear_traj_back_penalty() {
  traj_back_penalty_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double WarmStartConfig::_internal_traj_back_penalty() const {
  return traj_back_penalty_;
}
inline double WarmStartConfig::traj_back_penalty() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.traj_back_penalty)
  return _internal_traj_back_penalty();
}
inline void WarmStartConfig::_internal_set_traj_back_penalty(double value) {
  _has_bits_[0] |= 0x00000004u;
  traj_back_penalty_ = value;
}
inline void WarmStartConfig::set_traj_back_penalty(double value) {
  _internal_set_traj_back_penalty(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.traj_back_penalty)
}

// optional double traj_gear_switch_penalty = 7 [default = 10];
inline bool WarmStartConfig::_internal_has_traj_gear_switch_penalty() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool WarmStartConfig::has_traj_gear_switch_penalty() const {
  return _internal_has_traj_gear_switch_penalty();
}
inline void WarmStartConfig::clear_traj_gear_switch_penalty() {
  traj_gear_switch_penalty_ = 10;
  _has_bits_[0] &= ~0x00000100u;
}
inline double WarmStartConfig::_internal_traj_gear_switch_penalty() const {
  return traj_gear_switch_penalty_;
}
inline double WarmStartConfig::traj_gear_switch_penalty() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.traj_gear_switch_penalty)
  return _internal_traj_gear_switch_penalty();
}
inline void WarmStartConfig::_internal_set_traj_gear_switch_penalty(double value) {
  _has_bits_[0] |= 0x00000100u;
  traj_gear_switch_penalty_ = value;
}
inline void WarmStartConfig::set_traj_gear_switch_penalty(double value) {
  _internal_set_traj_gear_switch_penalty(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.traj_gear_switch_penalty)
}

// optional double traj_steer_penalty = 8 [default = 100];
inline bool WarmStartConfig::_internal_has_traj_steer_penalty() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool WarmStartConfig::has_traj_steer_penalty() const {
  return _internal_has_traj_steer_penalty();
}
inline void WarmStartConfig::clear_traj_steer_penalty() {
  traj_steer_penalty_ = 100;
  _has_bits_[0] &= ~0x00000200u;
}
inline double WarmStartConfig::_internal_traj_steer_penalty() const {
  return traj_steer_penalty_;
}
inline double WarmStartConfig::traj_steer_penalty() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.traj_steer_penalty)
  return _internal_traj_steer_penalty();
}
inline void WarmStartConfig::_internal_set_traj_steer_penalty(double value) {
  _has_bits_[0] |= 0x00000200u;
  traj_steer_penalty_ = value;
}
inline void WarmStartConfig::set_traj_steer_penalty(double value) {
  _internal_set_traj_steer_penalty(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.traj_steer_penalty)
}

// optional double traj_steer_change_penalty = 9 [default = 10];
inline bool WarmStartConfig::_internal_has_traj_steer_change_penalty() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool WarmStartConfig::has_traj_steer_change_penalty() const {
  return _internal_has_traj_steer_change_penalty();
}
inline void WarmStartConfig::clear_traj_steer_change_penalty() {
  traj_steer_change_penalty_ = 10;
  _has_bits_[0] &= ~0x00000400u;
}
inline double WarmStartConfig::_internal_traj_steer_change_penalty() const {
  return traj_steer_change_penalty_;
}
inline double WarmStartConfig::traj_steer_change_penalty() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.traj_steer_change_penalty)
  return _internal_traj_steer_change_penalty();
}
inline void WarmStartConfig::_internal_set_traj_steer_change_penalty(double value) {
  _has_bits_[0] |= 0x00000400u;
  traj_steer_change_penalty_ = value;
}
inline void WarmStartConfig::set_traj_steer_change_penalty(double value) {
  _internal_set_traj_steer_change_penalty(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.traj_steer_change_penalty)
}

// optional double traj_short_length_penalty = 10 [default = 10];
inline bool WarmStartConfig::_internal_has_traj_short_length_penalty() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool WarmStartConfig::has_traj_short_length_penalty() const {
  return _internal_has_traj_short_length_penalty();
}
inline void WarmStartConfig::clear_traj_short_length_penalty() {
  traj_short_length_penalty_ = 10;
  _has_bits_[0] &= ~0x00000800u;
}
inline double WarmStartConfig::_internal_traj_short_length_penalty() const {
  return traj_short_length_penalty_;
}
inline double WarmStartConfig::traj_short_length_penalty() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.traj_short_length_penalty)
  return _internal_traj_short_length_penalty();
}
inline void WarmStartConfig::_internal_set_traj_short_length_penalty(double value) {
  _has_bits_[0] |= 0x00000800u;
  traj_short_length_penalty_ = value;
}
inline void WarmStartConfig::set_traj_short_length_penalty(double value) {
  _internal_set_traj_short_length_penalty(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.traj_short_length_penalty)
}

// optional double grid_a_star_xy_resolution = 11 [default = 0.1];
inline bool WarmStartConfig::_internal_has_grid_a_star_xy_resolution() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool WarmStartConfig::has_grid_a_star_xy_resolution() const {
  return _internal_has_grid_a_star_xy_resolution();
}
inline void WarmStartConfig::clear_grid_a_star_xy_resolution() {
  grid_a_star_xy_resolution_ = 0.1;
  _has_bits_[0] &= ~0x00001000u;
}
inline double WarmStartConfig::_internal_grid_a_star_xy_resolution() const {
  return grid_a_star_xy_resolution_;
}
inline double WarmStartConfig::grid_a_star_xy_resolution() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.grid_a_star_xy_resolution)
  return _internal_grid_a_star_xy_resolution();
}
inline void WarmStartConfig::_internal_set_grid_a_star_xy_resolution(double value) {
  _has_bits_[0] |= 0x00001000u;
  grid_a_star_xy_resolution_ = value;
}
inline void WarmStartConfig::set_grid_a_star_xy_resolution(double value) {
  _internal_set_grid_a_star_xy_resolution(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.grid_a_star_xy_resolution)
}

// optional double node_radius = 12 [default = 0.5];
inline bool WarmStartConfig::_internal_has_node_radius() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool WarmStartConfig::has_node_radius() const {
  return _internal_has_node_radius();
}
inline void WarmStartConfig::clear_node_radius() {
  node_radius_ = 0.5;
  _has_bits_[0] &= ~0x00002000u;
}
inline double WarmStartConfig::_internal_node_radius() const {
  return node_radius_;
}
inline double WarmStartConfig::node_radius() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.node_radius)
  return _internal_node_radius();
}
inline void WarmStartConfig::_internal_set_node_radius(double value) {
  _has_bits_[0] |= 0x00002000u;
  node_radius_ = value;
}
inline void WarmStartConfig::set_node_radius(double value) {
  _internal_set_node_radius(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.node_radius)
}

// optional .nav2_smac_planner.SpeedOptimizerConfig s_curve_config = 13;
inline bool WarmStartConfig::_internal_has_s_curve_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || s_curve_config_ != nullptr);
  return value;
}
inline bool WarmStartConfig::has_s_curve_config() const {
  return _internal_has_s_curve_config();
}
inline void WarmStartConfig::clear_s_curve_config() {
  if (s_curve_config_ != nullptr) s_curve_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nav2_smac_planner::SpeedOptimizerConfig& WarmStartConfig::_internal_s_curve_config() const {
  const ::nav2_smac_planner::SpeedOptimizerConfig* p = s_curve_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::SpeedOptimizerConfig*>(
      &::nav2_smac_planner::_SpeedOptimizerConfig_default_instance_);
}
inline const ::nav2_smac_planner::SpeedOptimizerConfig& WarmStartConfig::s_curve_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.s_curve_config)
  return _internal_s_curve_config();
}
inline void WarmStartConfig::unsafe_arena_set_allocated_s_curve_config(
    ::nav2_smac_planner::SpeedOptimizerConfig* s_curve_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s_curve_config_);
  }
  s_curve_config_ = s_curve_config;
  if (s_curve_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.WarmStartConfig.s_curve_config)
}
inline ::nav2_smac_planner::SpeedOptimizerConfig* WarmStartConfig::release_s_curve_config() {
  auto temp = unsafe_arena_release_s_curve_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::SpeedOptimizerConfig* WarmStartConfig::unsafe_arena_release_s_curve_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.WarmStartConfig.s_curve_config)
  _has_bits_[0] &= ~0x00000001u;
  ::nav2_smac_planner::SpeedOptimizerConfig* temp = s_curve_config_;
  s_curve_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::SpeedOptimizerConfig* WarmStartConfig::_internal_mutable_s_curve_config() {
  _has_bits_[0] |= 0x00000001u;
  if (s_curve_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::SpeedOptimizerConfig>(GetArena());
    s_curve_config_ = p;
  }
  return s_curve_config_;
}
inline ::nav2_smac_planner::SpeedOptimizerConfig* WarmStartConfig::mutable_s_curve_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.WarmStartConfig.s_curve_config)
  return _internal_mutable_s_curve_config();
}
inline void WarmStartConfig::set_allocated_s_curve_config(::nav2_smac_planner::SpeedOptimizerConfig* s_curve_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete s_curve_config_;
  }
  if (s_curve_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(s_curve_config);
    if (message_arena != submessage_arena) {
      s_curve_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s_curve_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  s_curve_config_ = s_curve_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.WarmStartConfig.s_curve_config)
}

// optional double traj_kappa_contraint_ratio = 14 [default = 0.7];
inline bool WarmStartConfig::_internal_has_traj_kappa_contraint_ratio() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool WarmStartConfig::has_traj_kappa_contraint_ratio() const {
  return _internal_has_traj_kappa_contraint_ratio();
}
inline void WarmStartConfig::clear_traj_kappa_contraint_ratio() {
  traj_kappa_contraint_ratio_ = 0.7;
  _has_bits_[0] &= ~0x00004000u;
}
inline double WarmStartConfig::_internal_traj_kappa_contraint_ratio() const {
  return traj_kappa_contraint_ratio_;
}
inline double WarmStartConfig::traj_kappa_contraint_ratio() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.traj_kappa_contraint_ratio)
  return _internal_traj_kappa_contraint_ratio();
}
inline void WarmStartConfig::_internal_set_traj_kappa_contraint_ratio(double value) {
  _has_bits_[0] |= 0x00004000u;
  traj_kappa_contraint_ratio_ = value;
}
inline void WarmStartConfig::set_traj_kappa_contraint_ratio(double value) {
  _internal_set_traj_kappa_contraint_ratio(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.traj_kappa_contraint_ratio)
}

// optional int32 max_explored_num = 15 [default = 10000];
inline bool WarmStartConfig::_internal_has_max_explored_num() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool WarmStartConfig::has_max_explored_num() const {
  return _internal_has_max_explored_num();
}
inline void WarmStartConfig::clear_max_explored_num() {
  max_explored_num_ = 10000;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WarmStartConfig::_internal_max_explored_num() const {
  return max_explored_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WarmStartConfig::max_explored_num() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.max_explored_num)
  return _internal_max_explored_num();
}
inline void WarmStartConfig::_internal_set_max_explored_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  max_explored_num_ = value;
}
inline void WarmStartConfig::set_max_explored_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_explored_num(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.max_explored_num)
}

// optional int32 desired_explored_num = 16 [default = 10000];
inline bool WarmStartConfig::_internal_has_desired_explored_num() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool WarmStartConfig::has_desired_explored_num() const {
  return _internal_has_desired_explored_num();
}
inline void WarmStartConfig::clear_desired_explored_num() {
  desired_explored_num_ = 10000;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WarmStartConfig::_internal_desired_explored_num() const {
  return desired_explored_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WarmStartConfig::desired_explored_num() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.desired_explored_num)
  return _internal_desired_explored_num();
}
inline void WarmStartConfig::_internal_set_desired_explored_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  desired_explored_num_ = value;
}
inline void WarmStartConfig::set_desired_explored_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_desired_explored_num(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.desired_explored_num)
}

// optional double traj_expected_shortest_length = 17 [default = 1];
inline bool WarmStartConfig::_internal_has_traj_expected_shortest_length() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool WarmStartConfig::has_traj_expected_shortest_length() const {
  return _internal_has_traj_expected_shortest_length();
}
inline void WarmStartConfig::clear_traj_expected_shortest_length() {
  traj_expected_shortest_length_ = 1;
  _has_bits_[0] &= ~0x00020000u;
}
inline double WarmStartConfig::_internal_traj_expected_shortest_length() const {
  return traj_expected_shortest_length_;
}
inline double WarmStartConfig::traj_expected_shortest_length() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.traj_expected_shortest_length)
  return _internal_traj_expected_shortest_length();
}
inline void WarmStartConfig::_internal_set_traj_expected_shortest_length(double value) {
  _has_bits_[0] |= 0x00020000u;
  traj_expected_shortest_length_ = value;
}
inline void WarmStartConfig::set_traj_expected_shortest_length(double value) {
  _internal_set_traj_expected_shortest_length(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.traj_expected_shortest_length)
}

// optional double astar_max_search_time = 18 [default = 5];
inline bool WarmStartConfig::_internal_has_astar_max_search_time() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool WarmStartConfig::has_astar_max_search_time() const {
  return _internal_has_astar_max_search_time();
}
inline void WarmStartConfig::clear_astar_max_search_time() {
  astar_max_search_time_ = 5;
  _has_bits_[0] &= ~0x00040000u;
}
inline double WarmStartConfig::_internal_astar_max_search_time() const {
  return astar_max_search_time_;
}
inline double WarmStartConfig::astar_max_search_time() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.astar_max_search_time)
  return _internal_astar_max_search_time();
}
inline void WarmStartConfig::_internal_set_astar_max_search_time(double value) {
  _has_bits_[0] |= 0x00040000u;
  astar_max_search_time_ = value;
}
inline void WarmStartConfig::set_astar_max_search_time(double value) {
  _internal_set_astar_max_search_time(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.astar_max_search_time)
}

// optional double esdf_range = 19 [default = 2];
inline bool WarmStartConfig::_internal_has_esdf_range() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool WarmStartConfig::has_esdf_range() const {
  return _internal_has_esdf_range();
}
inline void WarmStartConfig::clear_esdf_range() {
  esdf_range_ = 2;
  _has_bits_[0] &= ~0x00080000u;
}
inline double WarmStartConfig::_internal_esdf_range() const {
  return esdf_range_;
}
inline double WarmStartConfig::esdf_range() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.esdf_range)
  return _internal_esdf_range();
}
inline void WarmStartConfig::_internal_set_esdf_range(double value) {
  _has_bits_[0] |= 0x00080000u;
  esdf_range_ = value;
}
inline void WarmStartConfig::set_esdf_range(double value) {
  _internal_set_esdf_range(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.esdf_range)
}

// optional double soft_boundary_penalty = 20 [default = 2];
inline bool WarmStartConfig::_internal_has_soft_boundary_penalty() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool WarmStartConfig::has_soft_boundary_penalty() const {
  return _internal_has_soft_boundary_penalty();
}
inline void WarmStartConfig::clear_soft_boundary_penalty() {
  soft_boundary_penalty_ = 2;
  _has_bits_[0] &= ~0x00100000u;
}
inline double WarmStartConfig::_internal_soft_boundary_penalty() const {
  return soft_boundary_penalty_;
}
inline double WarmStartConfig::soft_boundary_penalty() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.soft_boundary_penalty)
  return _internal_soft_boundary_penalty();
}
inline void WarmStartConfig::_internal_set_soft_boundary_penalty(double value) {
  _has_bits_[0] |= 0x00100000u;
  soft_boundary_penalty_ = value;
}
inline void WarmStartConfig::set_soft_boundary_penalty(double value) {
  _internal_set_soft_boundary_penalty(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.soft_boundary_penalty)
}

// optional bool use_esdf = 21 [default = true];
inline bool WarmStartConfig::_internal_has_use_esdf() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WarmStartConfig::has_use_esdf() const {
  return _internal_has_use_esdf();
}
inline void WarmStartConfig::clear_use_esdf() {
  use_esdf_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool WarmStartConfig::_internal_use_esdf() const {
  return use_esdf_;
}
inline bool WarmStartConfig::use_esdf() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.WarmStartConfig.use_esdf)
  return _internal_use_esdf();
}
inline void WarmStartConfig::_internal_set_use_esdf(bool value) {
  _has_bits_[0] |= 0x00000008u;
  use_esdf_ = value;
}
inline void WarmStartConfig::set_use_esdf(bool value) {
  _internal_set_use_esdf(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.WarmStartConfig.use_esdf)
}

// -------------------------------------------------------------------

// DualVariableWarmStartConfig

// optional double weight_d = 1 [default = 1];
inline bool DualVariableWarmStartConfig::_internal_has_weight_d() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DualVariableWarmStartConfig::has_weight_d() const {
  return _internal_has_weight_d();
}
inline void DualVariableWarmStartConfig::clear_weight_d() {
  weight_d_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline double DualVariableWarmStartConfig::_internal_weight_d() const {
  return weight_d_;
}
inline double DualVariableWarmStartConfig::weight_d() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableWarmStartConfig.weight_d)
  return _internal_weight_d();
}
inline void DualVariableWarmStartConfig::_internal_set_weight_d(double value) {
  _has_bits_[0] |= 0x00000020u;
  weight_d_ = value;
}
inline void DualVariableWarmStartConfig::set_weight_d(double value) {
  _internal_set_weight_d(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DualVariableWarmStartConfig.weight_d)
}

// optional .nav2_smac_planner.IpoptConfig ipopt_config = 2;
inline bool DualVariableWarmStartConfig::_internal_has_ipopt_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ipopt_config_ != nullptr);
  return value;
}
inline bool DualVariableWarmStartConfig::has_ipopt_config() const {
  return _internal_has_ipopt_config();
}
inline void DualVariableWarmStartConfig::clear_ipopt_config() {
  if (ipopt_config_ != nullptr) ipopt_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nav2_smac_planner::IpoptConfig& DualVariableWarmStartConfig::_internal_ipopt_config() const {
  const ::nav2_smac_planner::IpoptConfig* p = ipopt_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::IpoptConfig*>(
      &::nav2_smac_planner::_IpoptConfig_default_instance_);
}
inline const ::nav2_smac_planner::IpoptConfig& DualVariableWarmStartConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableWarmStartConfig.ipopt_config)
  return _internal_ipopt_config();
}
inline void DualVariableWarmStartConfig::unsafe_arena_set_allocated_ipopt_config(
    ::nav2_smac_planner::IpoptConfig* ipopt_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipopt_config_);
  }
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.DualVariableWarmStartConfig.ipopt_config)
}
inline ::nav2_smac_planner::IpoptConfig* DualVariableWarmStartConfig::release_ipopt_config() {
  auto temp = unsafe_arena_release_ipopt_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::IpoptConfig* DualVariableWarmStartConfig::unsafe_arena_release_ipopt_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.DualVariableWarmStartConfig.ipopt_config)
  _has_bits_[0] &= ~0x00000001u;
  ::nav2_smac_planner::IpoptConfig* temp = ipopt_config_;
  ipopt_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::IpoptConfig* DualVariableWarmStartConfig::_internal_mutable_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
  if (ipopt_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::IpoptConfig>(GetArena());
    ipopt_config_ = p;
  }
  return ipopt_config_;
}
inline ::nav2_smac_planner::IpoptConfig* DualVariableWarmStartConfig::mutable_ipopt_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.DualVariableWarmStartConfig.ipopt_config)
  return _internal_mutable_ipopt_config();
}
inline void DualVariableWarmStartConfig::set_allocated_ipopt_config(::nav2_smac_planner::IpoptConfig* ipopt_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ipopt_config_;
  }
  if (ipopt_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ipopt_config);
    if (message_arena != submessage_arena) {
      ipopt_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipopt_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipopt_config_ = ipopt_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.DualVariableWarmStartConfig.ipopt_config)
}

// optional .nav2_smac_planner.DualWarmUpMode qp_format = 3;
inline bool DualVariableWarmStartConfig::_internal_has_qp_format() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DualVariableWarmStartConfig::has_qp_format() const {
  return _internal_has_qp_format();
}
inline void DualVariableWarmStartConfig::clear_qp_format() {
  qp_format_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::nav2_smac_planner::DualWarmUpMode DualVariableWarmStartConfig::_internal_qp_format() const {
  return static_cast< ::nav2_smac_planner::DualWarmUpMode >(qp_format_);
}
inline ::nav2_smac_planner::DualWarmUpMode DualVariableWarmStartConfig::qp_format() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableWarmStartConfig.qp_format)
  return _internal_qp_format();
}
inline void DualVariableWarmStartConfig::_internal_set_qp_format(::nav2_smac_planner::DualWarmUpMode value) {
  assert(::nav2_smac_planner::DualWarmUpMode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  qp_format_ = value;
}
inline void DualVariableWarmStartConfig::set_qp_format(::nav2_smac_planner::DualWarmUpMode value) {
  _internal_set_qp_format(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DualVariableWarmStartConfig.qp_format)
}

// optional double min_safety_distance = 4 [default = 0];
inline bool DualVariableWarmStartConfig::_internal_has_min_safety_distance() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DualVariableWarmStartConfig::has_min_safety_distance() const {
  return _internal_has_min_safety_distance();
}
inline void DualVariableWarmStartConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double DualVariableWarmStartConfig::_internal_min_safety_distance() const {
  return min_safety_distance_;
}
inline double DualVariableWarmStartConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableWarmStartConfig.min_safety_distance)
  return _internal_min_safety_distance();
}
inline void DualVariableWarmStartConfig::_internal_set_min_safety_distance(double value) {
  _has_bits_[0] |= 0x00000004u;
  min_safety_distance_ = value;
}
inline void DualVariableWarmStartConfig::set_min_safety_distance(double value) {
  _internal_set_min_safety_distance(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DualVariableWarmStartConfig.min_safety_distance)
}

// optional bool debug_osqp = 5 [default = false];
inline bool DualVariableWarmStartConfig::_internal_has_debug_osqp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DualVariableWarmStartConfig::has_debug_osqp() const {
  return _internal_has_debug_osqp();
}
inline void DualVariableWarmStartConfig::clear_debug_osqp() {
  debug_osqp_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DualVariableWarmStartConfig::_internal_debug_osqp() const {
  return debug_osqp_;
}
inline bool DualVariableWarmStartConfig::debug_osqp() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableWarmStartConfig.debug_osqp)
  return _internal_debug_osqp();
}
inline void DualVariableWarmStartConfig::_internal_set_debug_osqp(bool value) {
  _has_bits_[0] |= 0x00000010u;
  debug_osqp_ = value;
}
inline void DualVariableWarmStartConfig::set_debug_osqp(bool value) {
  _internal_set_debug_osqp(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DualVariableWarmStartConfig.debug_osqp)
}

// optional double beta = 6 [default = 1];
inline bool DualVariableWarmStartConfig::_internal_has_beta() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DualVariableWarmStartConfig::has_beta() const {
  return _internal_has_beta();
}
inline void DualVariableWarmStartConfig::clear_beta() {
  beta_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline double DualVariableWarmStartConfig::_internal_beta() const {
  return beta_;
}
inline double DualVariableWarmStartConfig::beta() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableWarmStartConfig.beta)
  return _internal_beta();
}
inline void DualVariableWarmStartConfig::_internal_set_beta(double value) {
  _has_bits_[0] |= 0x00000040u;
  beta_ = value;
}
inline void DualVariableWarmStartConfig::set_beta(double value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DualVariableWarmStartConfig.beta)
}

// optional .nav2_smac_planner.OSQPConfig osqp_config = 7;
inline bool DualVariableWarmStartConfig::_internal_has_osqp_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || osqp_config_ != nullptr);
  return value;
}
inline bool DualVariableWarmStartConfig::has_osqp_config() const {
  return _internal_has_osqp_config();
}
inline void DualVariableWarmStartConfig::clear_osqp_config() {
  if (osqp_config_ != nullptr) osqp_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::nav2_smac_planner::OSQPConfig& DualVariableWarmStartConfig::_internal_osqp_config() const {
  const ::nav2_smac_planner::OSQPConfig* p = osqp_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::OSQPConfig*>(
      &::nav2_smac_planner::_OSQPConfig_default_instance_);
}
inline const ::nav2_smac_planner::OSQPConfig& DualVariableWarmStartConfig::osqp_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableWarmStartConfig.osqp_config)
  return _internal_osqp_config();
}
inline void DualVariableWarmStartConfig::unsafe_arena_set_allocated_osqp_config(
    ::nav2_smac_planner::OSQPConfig* osqp_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(osqp_config_);
  }
  osqp_config_ = osqp_config;
  if (osqp_config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.DualVariableWarmStartConfig.osqp_config)
}
inline ::nav2_smac_planner::OSQPConfig* DualVariableWarmStartConfig::release_osqp_config() {
  auto temp = unsafe_arena_release_osqp_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::OSQPConfig* DualVariableWarmStartConfig::unsafe_arena_release_osqp_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.DualVariableWarmStartConfig.osqp_config)
  _has_bits_[0] &= ~0x00000002u;
  ::nav2_smac_planner::OSQPConfig* temp = osqp_config_;
  osqp_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::OSQPConfig* DualVariableWarmStartConfig::_internal_mutable_osqp_config() {
  _has_bits_[0] |= 0x00000002u;
  if (osqp_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::OSQPConfig>(GetArena());
    osqp_config_ = p;
  }
  return osqp_config_;
}
inline ::nav2_smac_planner::OSQPConfig* DualVariableWarmStartConfig::mutable_osqp_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.DualVariableWarmStartConfig.osqp_config)
  return _internal_mutable_osqp_config();
}
inline void DualVariableWarmStartConfig::set_allocated_osqp_config(::nav2_smac_planner::OSQPConfig* osqp_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete osqp_config_;
  }
  if (osqp_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(osqp_config);
    if (message_arena != submessage_arena) {
      osqp_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osqp_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  osqp_config_ = osqp_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.DualVariableWarmStartConfig.osqp_config)
}

// -------------------------------------------------------------------

// DistanceApproachConfig

// optional double weight_steer = 1;
inline bool DistanceApproachConfig::_internal_has_weight_steer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_steer() const {
  return _internal_has_weight_steer();
}
inline void DistanceApproachConfig::clear_weight_steer() {
  weight_steer_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DistanceApproachConfig::_internal_weight_steer() const {
  return weight_steer_;
}
inline double DistanceApproachConfig::weight_steer() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_steer)
  return _internal_weight_steer();
}
inline void DistanceApproachConfig::_internal_set_weight_steer(double value) {
  _has_bits_[0] |= 0x00000002u;
  weight_steer_ = value;
}
inline void DistanceApproachConfig::set_weight_steer(double value) {
  _internal_set_weight_steer(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_steer)
}

// optional double weight_a = 2;
inline bool DistanceApproachConfig::_internal_has_weight_a() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_a() const {
  return _internal_has_weight_a();
}
inline void DistanceApproachConfig::clear_weight_a() {
  weight_a_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double DistanceApproachConfig::_internal_weight_a() const {
  return weight_a_;
}
inline double DistanceApproachConfig::weight_a() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_a)
  return _internal_weight_a();
}
inline void DistanceApproachConfig::_internal_set_weight_a(double value) {
  _has_bits_[0] |= 0x00000004u;
  weight_a_ = value;
}
inline void DistanceApproachConfig::set_weight_a(double value) {
  _internal_set_weight_a(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_a)
}

// optional double weight_steer_rate = 3;
inline bool DistanceApproachConfig::_internal_has_weight_steer_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_steer_rate() const {
  return _internal_has_weight_steer_rate();
}
inline void DistanceApproachConfig::clear_weight_steer_rate() {
  weight_steer_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double DistanceApproachConfig::_internal_weight_steer_rate() const {
  return weight_steer_rate_;
}
inline double DistanceApproachConfig::weight_steer_rate() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_steer_rate)
  return _internal_weight_steer_rate();
}
inline void DistanceApproachConfig::_internal_set_weight_steer_rate(double value) {
  _has_bits_[0] |= 0x00000008u;
  weight_steer_rate_ = value;
}
inline void DistanceApproachConfig::set_weight_steer_rate(double value) {
  _internal_set_weight_steer_rate(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_steer_rate)
}

// optional double weight_a_rate = 4;
inline bool DistanceApproachConfig::_internal_has_weight_a_rate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_a_rate() const {
  return _internal_has_weight_a_rate();
}
inline void DistanceApproachConfig::clear_weight_a_rate() {
  weight_a_rate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double DistanceApproachConfig::_internal_weight_a_rate() const {
  return weight_a_rate_;
}
inline double DistanceApproachConfig::weight_a_rate() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_a_rate)
  return _internal_weight_a_rate();
}
inline void DistanceApproachConfig::_internal_set_weight_a_rate(double value) {
  _has_bits_[0] |= 0x00000010u;
  weight_a_rate_ = value;
}
inline void DistanceApproachConfig::set_weight_a_rate(double value) {
  _internal_set_weight_a_rate(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_a_rate)
}

// optional double weight_x = 5;
inline bool DistanceApproachConfig::_internal_has_weight_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_x() const {
  return _internal_has_weight_x();
}
inline void DistanceApproachConfig::clear_weight_x() {
  weight_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double DistanceApproachConfig::_internal_weight_x() const {
  return weight_x_;
}
inline double DistanceApproachConfig::weight_x() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_x)
  return _internal_weight_x();
}
inline void DistanceApproachConfig::_internal_set_weight_x(double value) {
  _has_bits_[0] |= 0x00000020u;
  weight_x_ = value;
}
inline void DistanceApproachConfig::set_weight_x(double value) {
  _internal_set_weight_x(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_x)
}

// optional double weight_y = 6;
inline bool DistanceApproachConfig::_internal_has_weight_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_y() const {
  return _internal_has_weight_y();
}
inline void DistanceApproachConfig::clear_weight_y() {
  weight_y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double DistanceApproachConfig::_internal_weight_y() const {
  return weight_y_;
}
inline double DistanceApproachConfig::weight_y() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_y)
  return _internal_weight_y();
}
inline void DistanceApproachConfig::_internal_set_weight_y(double value) {
  _has_bits_[0] |= 0x00000040u;
  weight_y_ = value;
}
inline void DistanceApproachConfig::set_weight_y(double value) {
  _internal_set_weight_y(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_y)
}

// optional double weight_phi = 7;
inline bool DistanceApproachConfig::_internal_has_weight_phi() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_phi() const {
  return _internal_has_weight_phi();
}
inline void DistanceApproachConfig::clear_weight_phi() {
  weight_phi_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double DistanceApproachConfig::_internal_weight_phi() const {
  return weight_phi_;
}
inline double DistanceApproachConfig::weight_phi() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_phi)
  return _internal_weight_phi();
}
inline void DistanceApproachConfig::_internal_set_weight_phi(double value) {
  _has_bits_[0] |= 0x00000080u;
  weight_phi_ = value;
}
inline void DistanceApproachConfig::set_weight_phi(double value) {
  _internal_set_weight_phi(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_phi)
}

// optional double weight_v = 8;
inline bool DistanceApproachConfig::_internal_has_weight_v() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_v() const {
  return _internal_has_weight_v();
}
inline void DistanceApproachConfig::clear_weight_v() {
  weight_v_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double DistanceApproachConfig::_internal_weight_v() const {
  return weight_v_;
}
inline double DistanceApproachConfig::weight_v() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_v)
  return _internal_weight_v();
}
inline void DistanceApproachConfig::_internal_set_weight_v(double value) {
  _has_bits_[0] |= 0x00000100u;
  weight_v_ = value;
}
inline void DistanceApproachConfig::set_weight_v(double value) {
  _internal_set_weight_v(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_v)
}

// optional double weight_steer_stitching = 9;
inline bool DistanceApproachConfig::_internal_has_weight_steer_stitching() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_steer_stitching() const {
  return _internal_has_weight_steer_stitching();
}
inline void DistanceApproachConfig::clear_weight_steer_stitching() {
  weight_steer_stitching_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double DistanceApproachConfig::_internal_weight_steer_stitching() const {
  return weight_steer_stitching_;
}
inline double DistanceApproachConfig::weight_steer_stitching() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_steer_stitching)
  return _internal_weight_steer_stitching();
}
inline void DistanceApproachConfig::_internal_set_weight_steer_stitching(double value) {
  _has_bits_[0] |= 0x00000200u;
  weight_steer_stitching_ = value;
}
inline void DistanceApproachConfig::set_weight_steer_stitching(double value) {
  _internal_set_weight_steer_stitching(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_steer_stitching)
}

// optional double weight_a_stitching = 10;
inline bool DistanceApproachConfig::_internal_has_weight_a_stitching() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_a_stitching() const {
  return _internal_has_weight_a_stitching();
}
inline void DistanceApproachConfig::clear_weight_a_stitching() {
  weight_a_stitching_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double DistanceApproachConfig::_internal_weight_a_stitching() const {
  return weight_a_stitching_;
}
inline double DistanceApproachConfig::weight_a_stitching() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_a_stitching)
  return _internal_weight_a_stitching();
}
inline void DistanceApproachConfig::_internal_set_weight_a_stitching(double value) {
  _has_bits_[0] |= 0x00000400u;
  weight_a_stitching_ = value;
}
inline void DistanceApproachConfig::set_weight_a_stitching(double value) {
  _internal_set_weight_a_stitching(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_a_stitching)
}

// optional double weight_first_order_time = 11;
inline bool DistanceApproachConfig::_internal_has_weight_first_order_time() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_first_order_time() const {
  return _internal_has_weight_first_order_time();
}
inline void DistanceApproachConfig::clear_weight_first_order_time() {
  weight_first_order_time_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double DistanceApproachConfig::_internal_weight_first_order_time() const {
  return weight_first_order_time_;
}
inline double DistanceApproachConfig::weight_first_order_time() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_first_order_time)
  return _internal_weight_first_order_time();
}
inline void DistanceApproachConfig::_internal_set_weight_first_order_time(double value) {
  _has_bits_[0] |= 0x00000800u;
  weight_first_order_time_ = value;
}
inline void DistanceApproachConfig::set_weight_first_order_time(double value) {
  _internal_set_weight_first_order_time(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_first_order_time)
}

// optional double weight_second_order_time = 12;
inline bool DistanceApproachConfig::_internal_has_weight_second_order_time() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_second_order_time() const {
  return _internal_has_weight_second_order_time();
}
inline void DistanceApproachConfig::clear_weight_second_order_time() {
  weight_second_order_time_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double DistanceApproachConfig::_internal_weight_second_order_time() const {
  return weight_second_order_time_;
}
inline double DistanceApproachConfig::weight_second_order_time() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_second_order_time)
  return _internal_weight_second_order_time();
}
inline void DistanceApproachConfig::_internal_set_weight_second_order_time(double value) {
  _has_bits_[0] |= 0x00001000u;
  weight_second_order_time_ = value;
}
inline void DistanceApproachConfig::set_weight_second_order_time(double value) {
  _internal_set_weight_second_order_time(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_second_order_time)
}

// optional double min_safety_distance = 13 [default = 0];
inline bool DistanceApproachConfig::_internal_has_min_safety_distance() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_min_safety_distance() const {
  return _internal_has_min_safety_distance();
}
inline void DistanceApproachConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double DistanceApproachConfig::_internal_min_safety_distance() const {
  return min_safety_distance_;
}
inline double DistanceApproachConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.min_safety_distance)
  return _internal_min_safety_distance();
}
inline void DistanceApproachConfig::_internal_set_min_safety_distance(double value) {
  _has_bits_[0] |= 0x00002000u;
  min_safety_distance_ = value;
}
inline void DistanceApproachConfig::set_min_safety_distance(double value) {
  _internal_set_min_safety_distance(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.min_safety_distance)
}

// optional double max_speed_forward = 14 [default = 3];
inline bool DistanceApproachConfig::_internal_has_max_speed_forward() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_max_speed_forward() const {
  return _internal_has_max_speed_forward();
}
inline void DistanceApproachConfig::clear_max_speed_forward() {
  max_speed_forward_ = 3;
  _has_bits_[0] &= ~0x01000000u;
}
inline double DistanceApproachConfig::_internal_max_speed_forward() const {
  return max_speed_forward_;
}
inline double DistanceApproachConfig::max_speed_forward() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.max_speed_forward)
  return _internal_max_speed_forward();
}
inline void DistanceApproachConfig::_internal_set_max_speed_forward(double value) {
  _has_bits_[0] |= 0x01000000u;
  max_speed_forward_ = value;
}
inline void DistanceApproachConfig::set_max_speed_forward(double value) {
  _internal_set_max_speed_forward(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.max_speed_forward)
}

// optional double max_speed_reverse = 15 [default = 2];
inline bool DistanceApproachConfig::_internal_has_max_speed_reverse() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_max_speed_reverse() const {
  return _internal_has_max_speed_reverse();
}
inline void DistanceApproachConfig::clear_max_speed_reverse() {
  max_speed_reverse_ = 2;
  _has_bits_[0] &= ~0x02000000u;
}
inline double DistanceApproachConfig::_internal_max_speed_reverse() const {
  return max_speed_reverse_;
}
inline double DistanceApproachConfig::max_speed_reverse() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.max_speed_reverse)
  return _internal_max_speed_reverse();
}
inline void DistanceApproachConfig::_internal_set_max_speed_reverse(double value) {
  _has_bits_[0] |= 0x02000000u;
  max_speed_reverse_ = value;
}
inline void DistanceApproachConfig::set_max_speed_reverse(double value) {
  _internal_set_max_speed_reverse(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.max_speed_reverse)
}

// optional double max_acceleration_forward = 16 [default = 2];
inline bool DistanceApproachConfig::_internal_has_max_acceleration_forward() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_max_acceleration_forward() const {
  return _internal_has_max_acceleration_forward();
}
inline void DistanceApproachConfig::clear_max_acceleration_forward() {
  max_acceleration_forward_ = 2;
  _has_bits_[0] &= ~0x04000000u;
}
inline double DistanceApproachConfig::_internal_max_acceleration_forward() const {
  return max_acceleration_forward_;
}
inline double DistanceApproachConfig::max_acceleration_forward() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.max_acceleration_forward)
  return _internal_max_acceleration_forward();
}
inline void DistanceApproachConfig::_internal_set_max_acceleration_forward(double value) {
  _has_bits_[0] |= 0x04000000u;
  max_acceleration_forward_ = value;
}
inline void DistanceApproachConfig::set_max_acceleration_forward(double value) {
  _internal_set_max_acceleration_forward(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.max_acceleration_forward)
}

// optional double max_acceleration_reverse = 17 [default = 2];
inline bool DistanceApproachConfig::_internal_has_max_acceleration_reverse() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_max_acceleration_reverse() const {
  return _internal_has_max_acceleration_reverse();
}
inline void DistanceApproachConfig::clear_max_acceleration_reverse() {
  max_acceleration_reverse_ = 2;
  _has_bits_[0] &= ~0x08000000u;
}
inline double DistanceApproachConfig::_internal_max_acceleration_reverse() const {
  return max_acceleration_reverse_;
}
inline double DistanceApproachConfig::max_acceleration_reverse() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.max_acceleration_reverse)
  return _internal_max_acceleration_reverse();
}
inline void DistanceApproachConfig::_internal_set_max_acceleration_reverse(double value) {
  _has_bits_[0] |= 0x08000000u;
  max_acceleration_reverse_ = value;
}
inline void DistanceApproachConfig::set_max_acceleration_reverse(double value) {
  _internal_set_max_acceleration_reverse(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.max_acceleration_reverse)
}

// optional double min_time_sample_scaling = 18 [default = 0.1];
inline bool DistanceApproachConfig::_internal_has_min_time_sample_scaling() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_min_time_sample_scaling() const {
  return _internal_has_min_time_sample_scaling();
}
inline void DistanceApproachConfig::clear_min_time_sample_scaling() {
  min_time_sample_scaling_ = 0.1;
  _has_bits_[0] &= ~0x10000000u;
}
inline double DistanceApproachConfig::_internal_min_time_sample_scaling() const {
  return min_time_sample_scaling_;
}
inline double DistanceApproachConfig::min_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.min_time_sample_scaling)
  return _internal_min_time_sample_scaling();
}
inline void DistanceApproachConfig::_internal_set_min_time_sample_scaling(double value) {
  _has_bits_[0] |= 0x10000000u;
  min_time_sample_scaling_ = value;
}
inline void DistanceApproachConfig::set_min_time_sample_scaling(double value) {
  _internal_set_min_time_sample_scaling(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.min_time_sample_scaling)
}

// optional double max_time_sample_scaling = 19 [default = 10];
inline bool DistanceApproachConfig::_internal_has_max_time_sample_scaling() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_max_time_sample_scaling() const {
  return _internal_has_max_time_sample_scaling();
}
inline void DistanceApproachConfig::clear_max_time_sample_scaling() {
  max_time_sample_scaling_ = 10;
  _has_bits_[0] &= ~0x20000000u;
}
inline double DistanceApproachConfig::_internal_max_time_sample_scaling() const {
  return max_time_sample_scaling_;
}
inline double DistanceApproachConfig::max_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.max_time_sample_scaling)
  return _internal_max_time_sample_scaling();
}
inline void DistanceApproachConfig::_internal_set_max_time_sample_scaling(double value) {
  _has_bits_[0] |= 0x20000000u;
  max_time_sample_scaling_ = value;
}
inline void DistanceApproachConfig::set_max_time_sample_scaling(double value) {
  _internal_set_max_time_sample_scaling(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.max_time_sample_scaling)
}

// optional bool use_fix_time = 20 [default = false];
inline bool DistanceApproachConfig::_internal_has_use_fix_time() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_use_fix_time() const {
  return _internal_has_use_fix_time();
}
inline void DistanceApproachConfig::clear_use_fix_time() {
  use_fix_time_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool DistanceApproachConfig::_internal_use_fix_time() const {
  return use_fix_time_;
}
inline bool DistanceApproachConfig::use_fix_time() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.use_fix_time)
  return _internal_use_fix_time();
}
inline void DistanceApproachConfig::_internal_set_use_fix_time(bool value) {
  _has_bits_[0] |= 0x00004000u;
  use_fix_time_ = value;
}
inline void DistanceApproachConfig::set_use_fix_time(bool value) {
  _internal_set_use_fix_time(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.use_fix_time)
}

// optional .nav2_smac_planner.IpoptConfig ipopt_config = 21;
inline bool DistanceApproachConfig::_internal_has_ipopt_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ipopt_config_ != nullptr);
  return value;
}
inline bool DistanceApproachConfig::has_ipopt_config() const {
  return _internal_has_ipopt_config();
}
inline void DistanceApproachConfig::clear_ipopt_config() {
  if (ipopt_config_ != nullptr) ipopt_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nav2_smac_planner::IpoptConfig& DistanceApproachConfig::_internal_ipopt_config() const {
  const ::nav2_smac_planner::IpoptConfig* p = ipopt_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::IpoptConfig*>(
      &::nav2_smac_planner::_IpoptConfig_default_instance_);
}
inline const ::nav2_smac_planner::IpoptConfig& DistanceApproachConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.ipopt_config)
  return _internal_ipopt_config();
}
inline void DistanceApproachConfig::unsafe_arena_set_allocated_ipopt_config(
    ::nav2_smac_planner::IpoptConfig* ipopt_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipopt_config_);
  }
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.DistanceApproachConfig.ipopt_config)
}
inline ::nav2_smac_planner::IpoptConfig* DistanceApproachConfig::release_ipopt_config() {
  auto temp = unsafe_arena_release_ipopt_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::IpoptConfig* DistanceApproachConfig::unsafe_arena_release_ipopt_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.DistanceApproachConfig.ipopt_config)
  _has_bits_[0] &= ~0x00000001u;
  ::nav2_smac_planner::IpoptConfig* temp = ipopt_config_;
  ipopt_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::IpoptConfig* DistanceApproachConfig::_internal_mutable_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
  if (ipopt_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::IpoptConfig>(GetArena());
    ipopt_config_ = p;
  }
  return ipopt_config_;
}
inline ::nav2_smac_planner::IpoptConfig* DistanceApproachConfig::mutable_ipopt_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.DistanceApproachConfig.ipopt_config)
  return _internal_mutable_ipopt_config();
}
inline void DistanceApproachConfig::set_allocated_ipopt_config(::nav2_smac_planner::IpoptConfig* ipopt_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ipopt_config_;
  }
  if (ipopt_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ipopt_config);
    if (message_arena != submessage_arena) {
      ipopt_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipopt_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipopt_config_ = ipopt_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.DistanceApproachConfig.ipopt_config)
}

// optional bool enable_constraint_check = 22;
inline bool DistanceApproachConfig::_internal_has_enable_constraint_check() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_enable_constraint_check() const {
  return _internal_has_enable_constraint_check();
}
inline void DistanceApproachConfig::clear_enable_constraint_check() {
  enable_constraint_check_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool DistanceApproachConfig::_internal_enable_constraint_check() const {
  return enable_constraint_check_;
}
inline bool DistanceApproachConfig::enable_constraint_check() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.enable_constraint_check)
  return _internal_enable_constraint_check();
}
inline void DistanceApproachConfig::_internal_set_enable_constraint_check(bool value) {
  _has_bits_[0] |= 0x00008000u;
  enable_constraint_check_ = value;
}
inline void DistanceApproachConfig::set_enable_constraint_check(bool value) {
  _internal_set_enable_constraint_check(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.enable_constraint_check)
}

// optional bool enable_hand_derivative = 23;
inline bool DistanceApproachConfig::_internal_has_enable_hand_derivative() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_enable_hand_derivative() const {
  return _internal_has_enable_hand_derivative();
}
inline void DistanceApproachConfig::clear_enable_hand_derivative() {
  enable_hand_derivative_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool DistanceApproachConfig::_internal_enable_hand_derivative() const {
  return enable_hand_derivative_;
}
inline bool DistanceApproachConfig::enable_hand_derivative() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.enable_hand_derivative)
  return _internal_enable_hand_derivative();
}
inline void DistanceApproachConfig::_internal_set_enable_hand_derivative(bool value) {
  _has_bits_[0] |= 0x00010000u;
  enable_hand_derivative_ = value;
}
inline void DistanceApproachConfig::set_enable_hand_derivative(bool value) {
  _internal_set_enable_hand_derivative(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.enable_hand_derivative)
}

// optional bool enable_derivative_check = 24;
inline bool DistanceApproachConfig::_internal_has_enable_derivative_check() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_enable_derivative_check() const {
  return _internal_has_enable_derivative_check();
}
inline void DistanceApproachConfig::clear_enable_derivative_check() {
  enable_derivative_check_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool DistanceApproachConfig::_internal_enable_derivative_check() const {
  return enable_derivative_check_;
}
inline bool DistanceApproachConfig::enable_derivative_check() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.enable_derivative_check)
  return _internal_enable_derivative_check();
}
inline void DistanceApproachConfig::_internal_set_enable_derivative_check(bool value) {
  _has_bits_[0] |= 0x00020000u;
  enable_derivative_check_ = value;
}
inline void DistanceApproachConfig::set_enable_derivative_check(bool value) {
  _internal_set_enable_derivative_check(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.enable_derivative_check)
}

// optional bool enable_initial_final_check = 25 [default = false];
inline bool DistanceApproachConfig::_internal_has_enable_initial_final_check() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_enable_initial_final_check() const {
  return _internal_has_enable_initial_final_check();
}
inline void DistanceApproachConfig::clear_enable_initial_final_check() {
  enable_initial_final_check_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool DistanceApproachConfig::_internal_enable_initial_final_check() const {
  return enable_initial_final_check_;
}
inline bool DistanceApproachConfig::enable_initial_final_check() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.enable_initial_final_check)
  return _internal_enable_initial_final_check();
}
inline void DistanceApproachConfig::_internal_set_enable_initial_final_check(bool value) {
  _has_bits_[0] |= 0x00200000u;
  enable_initial_final_check_ = value;
}
inline void DistanceApproachConfig::set_enable_initial_final_check(bool value) {
  _internal_set_enable_initial_final_check(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.enable_initial_final_check)
}

// optional .nav2_smac_planner.DistanceApproachMode distance_approach_mode = 26;
inline bool DistanceApproachConfig::_internal_has_distance_approach_mode() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_distance_approach_mode() const {
  return _internal_has_distance_approach_mode();
}
inline void DistanceApproachConfig::clear_distance_approach_mode() {
  distance_approach_mode_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::nav2_smac_planner::DistanceApproachMode DistanceApproachConfig::_internal_distance_approach_mode() const {
  return static_cast< ::nav2_smac_planner::DistanceApproachMode >(distance_approach_mode_);
}
inline ::nav2_smac_planner::DistanceApproachMode DistanceApproachConfig::distance_approach_mode() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.distance_approach_mode)
  return _internal_distance_approach_mode();
}
inline void DistanceApproachConfig::_internal_set_distance_approach_mode(::nav2_smac_planner::DistanceApproachMode value) {
  assert(::nav2_smac_planner::DistanceApproachMode_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  distance_approach_mode_ = value;
}
inline void DistanceApproachConfig::set_distance_approach_mode(::nav2_smac_planner::DistanceApproachMode value) {
  _internal_set_distance_approach_mode(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.distance_approach_mode)
}

// optional bool enable_jacobian_ad = 27 [default = false];
inline bool DistanceApproachConfig::_internal_has_enable_jacobian_ad() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_enable_jacobian_ad() const {
  return _internal_has_enable_jacobian_ad();
}
inline void DistanceApproachConfig::clear_enable_jacobian_ad() {
  enable_jacobian_ad_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool DistanceApproachConfig::_internal_enable_jacobian_ad() const {
  return enable_jacobian_ad_;
}
inline bool DistanceApproachConfig::enable_jacobian_ad() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.enable_jacobian_ad)
  return _internal_enable_jacobian_ad();
}
inline void DistanceApproachConfig::_internal_set_enable_jacobian_ad(bool value) {
  _has_bits_[0] |= 0x00400000u;
  enable_jacobian_ad_ = value;
}
inline void DistanceApproachConfig::set_enable_jacobian_ad(bool value) {
  _internal_set_enable_jacobian_ad(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.enable_jacobian_ad)
}

// optional bool enable_check_initial_state = 28 [default = false];
inline bool DistanceApproachConfig::_internal_has_enable_check_initial_state() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_enable_check_initial_state() const {
  return _internal_has_enable_check_initial_state();
}
inline void DistanceApproachConfig::clear_enable_check_initial_state() {
  enable_check_initial_state_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool DistanceApproachConfig::_internal_enable_check_initial_state() const {
  return enable_check_initial_state_;
}
inline bool DistanceApproachConfig::enable_check_initial_state() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.enable_check_initial_state)
  return _internal_enable_check_initial_state();
}
inline void DistanceApproachConfig::_internal_set_enable_check_initial_state(bool value) {
  _has_bits_[0] |= 0x00800000u;
  enable_check_initial_state_ = value;
}
inline void DistanceApproachConfig::set_enable_check_initial_state(bool value) {
  _internal_set_enable_check_initial_state(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.enable_check_initial_state)
}

// optional double weight_end_state = 29 [default = 0];
inline bool DistanceApproachConfig::_internal_has_weight_end_state() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_end_state() const {
  return _internal_has_weight_end_state();
}
inline void DistanceApproachConfig::clear_weight_end_state() {
  weight_end_state_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double DistanceApproachConfig::_internal_weight_end_state() const {
  return weight_end_state_;
}
inline double DistanceApproachConfig::weight_end_state() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_end_state)
  return _internal_weight_end_state();
}
inline void DistanceApproachConfig::_internal_set_weight_end_state(double value) {
  _has_bits_[0] |= 0x00080000u;
  weight_end_state_ = value;
}
inline void DistanceApproachConfig::set_weight_end_state(double value) {
  _internal_set_weight_end_state(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_end_state)
}

// optional double weight_slack = 30 [default = 0];
inline bool DistanceApproachConfig::_internal_has_weight_slack() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DistanceApproachConfig::has_weight_slack() const {
  return _internal_has_weight_slack();
}
inline void DistanceApproachConfig::clear_weight_slack() {
  weight_slack_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double DistanceApproachConfig::_internal_weight_slack() const {
  return weight_slack_;
}
inline double DistanceApproachConfig::weight_slack() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DistanceApproachConfig.weight_slack)
  return _internal_weight_slack();
}
inline void DistanceApproachConfig::_internal_set_weight_slack(double value) {
  _has_bits_[0] |= 0x00100000u;
  weight_slack_ = value;
}
inline void DistanceApproachConfig::set_weight_slack(double value) {
  _internal_set_weight_slack(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DistanceApproachConfig.weight_slack)
}

// -------------------------------------------------------------------

// IpoptConfig

// optional int32 ipopt_print_level = 1;
inline bool IpoptConfig::_internal_has_ipopt_print_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IpoptConfig::has_ipopt_print_level() const {
  return _internal_has_ipopt_print_level();
}
inline void IpoptConfig::clear_ipopt_print_level() {
  ipopt_print_level_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptConfig::_internal_ipopt_print_level() const {
  return ipopt_print_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptConfig::ipopt_print_level() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.ipopt_print_level)
  return _internal_ipopt_print_level();
}
inline void IpoptConfig::_internal_set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ipopt_print_level_ = value;
}
inline void IpoptConfig::set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ipopt_print_level(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.ipopt_print_level)
}

// optional int32 mumps_mem_percent = 2;
inline bool IpoptConfig::_internal_has_mumps_mem_percent() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IpoptConfig::has_mumps_mem_percent() const {
  return _internal_has_mumps_mem_percent();
}
inline void IpoptConfig::clear_mumps_mem_percent() {
  mumps_mem_percent_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptConfig::_internal_mumps_mem_percent() const {
  return mumps_mem_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptConfig::mumps_mem_percent() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.mumps_mem_percent)
  return _internal_mumps_mem_percent();
}
inline void IpoptConfig::_internal_set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mumps_mem_percent_ = value;
}
inline void IpoptConfig::set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mumps_mem_percent(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.mumps_mem_percent)
}

// optional double mumps_pivtol = 3;
inline bool IpoptConfig::_internal_has_mumps_pivtol() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IpoptConfig::has_mumps_pivtol() const {
  return _internal_has_mumps_pivtol();
}
inline void IpoptConfig::clear_mumps_pivtol() {
  mumps_pivtol_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double IpoptConfig::_internal_mumps_pivtol() const {
  return mumps_pivtol_;
}
inline double IpoptConfig::mumps_pivtol() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.mumps_pivtol)
  return _internal_mumps_pivtol();
}
inline void IpoptConfig::_internal_set_mumps_pivtol(double value) {
  _has_bits_[0] |= 0x00000020u;
  mumps_pivtol_ = value;
}
inline void IpoptConfig::set_mumps_pivtol(double value) {
  _internal_set_mumps_pivtol(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.mumps_pivtol)
}

// optional int32 ipopt_max_iter = 4;
inline bool IpoptConfig::_internal_has_ipopt_max_iter() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool IpoptConfig::has_ipopt_max_iter() const {
  return _internal_has_ipopt_max_iter();
}
inline void IpoptConfig::clear_ipopt_max_iter() {
  ipopt_max_iter_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptConfig::_internal_ipopt_max_iter() const {
  return ipopt_max_iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptConfig::ipopt_max_iter() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.ipopt_max_iter)
  return _internal_ipopt_max_iter();
}
inline void IpoptConfig::_internal_set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  ipopt_max_iter_ = value;
}
inline void IpoptConfig::set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ipopt_max_iter(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.ipopt_max_iter)
}

// optional double ipopt_tol = 5;
inline bool IpoptConfig::_internal_has_ipopt_tol() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IpoptConfig::has_ipopt_tol() const {
  return _internal_has_ipopt_tol();
}
inline void IpoptConfig::clear_ipopt_tol() {
  ipopt_tol_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double IpoptConfig::_internal_ipopt_tol() const {
  return ipopt_tol_;
}
inline double IpoptConfig::ipopt_tol() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.ipopt_tol)
  return _internal_ipopt_tol();
}
inline void IpoptConfig::_internal_set_ipopt_tol(double value) {
  _has_bits_[0] |= 0x00000040u;
  ipopt_tol_ = value;
}
inline void IpoptConfig::set_ipopt_tol(double value) {
  _internal_set_ipopt_tol(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.ipopt_tol)
}

// optional double ipopt_acceptable_constr_viol_tol = 6;
inline bool IpoptConfig::_internal_has_ipopt_acceptable_constr_viol_tol() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IpoptConfig::has_ipopt_acceptable_constr_viol_tol() const {
  return _internal_has_ipopt_acceptable_constr_viol_tol();
}
inline void IpoptConfig::clear_ipopt_acceptable_constr_viol_tol() {
  ipopt_acceptable_constr_viol_tol_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double IpoptConfig::_internal_ipopt_acceptable_constr_viol_tol() const {
  return ipopt_acceptable_constr_viol_tol_;
}
inline double IpoptConfig::ipopt_acceptable_constr_viol_tol() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.ipopt_acceptable_constr_viol_tol)
  return _internal_ipopt_acceptable_constr_viol_tol();
}
inline void IpoptConfig::_internal_set_ipopt_acceptable_constr_viol_tol(double value) {
  _has_bits_[0] |= 0x00000080u;
  ipopt_acceptable_constr_viol_tol_ = value;
}
inline void IpoptConfig::set_ipopt_acceptable_constr_viol_tol(double value) {
  _internal_set_ipopt_acceptable_constr_viol_tol(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.ipopt_acceptable_constr_viol_tol)
}

// optional double ipopt_min_hessian_perturbation = 7;
inline bool IpoptConfig::_internal_has_ipopt_min_hessian_perturbation() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool IpoptConfig::has_ipopt_min_hessian_perturbation() const {
  return _internal_has_ipopt_min_hessian_perturbation();
}
inline void IpoptConfig::clear_ipopt_min_hessian_perturbation() {
  ipopt_min_hessian_perturbation_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double IpoptConfig::_internal_ipopt_min_hessian_perturbation() const {
  return ipopt_min_hessian_perturbation_;
}
inline double IpoptConfig::ipopt_min_hessian_perturbation() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.ipopt_min_hessian_perturbation)
  return _internal_ipopt_min_hessian_perturbation();
}
inline void IpoptConfig::_internal_set_ipopt_min_hessian_perturbation(double value) {
  _has_bits_[0] |= 0x00000100u;
  ipopt_min_hessian_perturbation_ = value;
}
inline void IpoptConfig::set_ipopt_min_hessian_perturbation(double value) {
  _internal_set_ipopt_min_hessian_perturbation(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.ipopt_min_hessian_perturbation)
}

// optional double ipopt_jacobian_regularization_value = 8;
inline bool IpoptConfig::_internal_has_ipopt_jacobian_regularization_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool IpoptConfig::has_ipopt_jacobian_regularization_value() const {
  return _internal_has_ipopt_jacobian_regularization_value();
}
inline void IpoptConfig::clear_ipopt_jacobian_regularization_value() {
  ipopt_jacobian_regularization_value_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double IpoptConfig::_internal_ipopt_jacobian_regularization_value() const {
  return ipopt_jacobian_regularization_value_;
}
inline double IpoptConfig::ipopt_jacobian_regularization_value() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.ipopt_jacobian_regularization_value)
  return _internal_ipopt_jacobian_regularization_value();
}
inline void IpoptConfig::_internal_set_ipopt_jacobian_regularization_value(double value) {
  _has_bits_[0] |= 0x00000200u;
  ipopt_jacobian_regularization_value_ = value;
}
inline void IpoptConfig::set_ipopt_jacobian_regularization_value(double value) {
  _internal_set_ipopt_jacobian_regularization_value(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.ipopt_jacobian_regularization_value)
}

// optional string ipopt_print_timing_statistics = 9;
inline bool IpoptConfig::_internal_has_ipopt_print_timing_statistics() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IpoptConfig::has_ipopt_print_timing_statistics() const {
  return _internal_has_ipopt_print_timing_statistics();
}
inline void IpoptConfig::clear_ipopt_print_timing_statistics() {
  ipopt_print_timing_statistics_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IpoptConfig::ipopt_print_timing_statistics() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.ipopt_print_timing_statistics)
  return _internal_ipopt_print_timing_statistics();
}
inline void IpoptConfig::set_ipopt_print_timing_statistics(const std::string& value) {
  _internal_set_ipopt_print_timing_statistics(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.ipopt_print_timing_statistics)
}
inline std::string* IpoptConfig::mutable_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.IpoptConfig.ipopt_print_timing_statistics)
  return _internal_mutable_ipopt_print_timing_statistics();
}
inline const std::string& IpoptConfig::_internal_ipopt_print_timing_statistics() const {
  return ipopt_print_timing_statistics_.Get();
}
inline void IpoptConfig::_internal_set_ipopt_print_timing_statistics(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IpoptConfig::set_ipopt_print_timing_statistics(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nav2_smac_planner.IpoptConfig.ipopt_print_timing_statistics)
}
inline void IpoptConfig::set_ipopt_print_timing_statistics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:nav2_smac_planner.IpoptConfig.ipopt_print_timing_statistics)
}
inline void IpoptConfig::set_ipopt_print_timing_statistics(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nav2_smac_planner.IpoptConfig.ipopt_print_timing_statistics)
}
inline std::string* IpoptConfig::_internal_mutable_ipopt_print_timing_statistics() {
  _has_bits_[0] |= 0x00000001u;
  return ipopt_print_timing_statistics_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IpoptConfig::release_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.IpoptConfig.ipopt_print_timing_statistics)
  if (!_internal_has_ipopt_print_timing_statistics()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ipopt_print_timing_statistics_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IpoptConfig::set_allocated_ipopt_print_timing_statistics(std::string* ipopt_print_timing_statistics) {
  if (ipopt_print_timing_statistics != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipopt_print_timing_statistics_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_print_timing_statistics,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.IpoptConfig.ipopt_print_timing_statistics)
}
inline std::string* IpoptConfig::unsafe_arena_release_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nav2_smac_planner.IpoptConfig.ipopt_print_timing_statistics)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return ipopt_print_timing_statistics_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IpoptConfig::unsafe_arena_set_allocated_ipopt_print_timing_statistics(
    std::string* ipopt_print_timing_statistics) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipopt_print_timing_statistics != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipopt_print_timing_statistics_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipopt_print_timing_statistics, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.IpoptConfig.ipopt_print_timing_statistics)
}

// optional string ipopt_alpha_for_y = 10;
inline bool IpoptConfig::_internal_has_ipopt_alpha_for_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IpoptConfig::has_ipopt_alpha_for_y() const {
  return _internal_has_ipopt_alpha_for_y();
}
inline void IpoptConfig::clear_ipopt_alpha_for_y() {
  ipopt_alpha_for_y_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IpoptConfig::ipopt_alpha_for_y() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.ipopt_alpha_for_y)
  return _internal_ipopt_alpha_for_y();
}
inline void IpoptConfig::set_ipopt_alpha_for_y(const std::string& value) {
  _internal_set_ipopt_alpha_for_y(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.ipopt_alpha_for_y)
}
inline std::string* IpoptConfig::mutable_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.IpoptConfig.ipopt_alpha_for_y)
  return _internal_mutable_ipopt_alpha_for_y();
}
inline const std::string& IpoptConfig::_internal_ipopt_alpha_for_y() const {
  return ipopt_alpha_for_y_.Get();
}
inline void IpoptConfig::_internal_set_ipopt_alpha_for_y(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IpoptConfig::set_ipopt_alpha_for_y(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nav2_smac_planner.IpoptConfig.ipopt_alpha_for_y)
}
inline void IpoptConfig::set_ipopt_alpha_for_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:nav2_smac_planner.IpoptConfig.ipopt_alpha_for_y)
}
inline void IpoptConfig::set_ipopt_alpha_for_y(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nav2_smac_planner.IpoptConfig.ipopt_alpha_for_y)
}
inline std::string* IpoptConfig::_internal_mutable_ipopt_alpha_for_y() {
  _has_bits_[0] |= 0x00000002u;
  return ipopt_alpha_for_y_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IpoptConfig::release_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.IpoptConfig.ipopt_alpha_for_y)
  if (!_internal_has_ipopt_alpha_for_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ipopt_alpha_for_y_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IpoptConfig::set_allocated_ipopt_alpha_for_y(std::string* ipopt_alpha_for_y) {
  if (ipopt_alpha_for_y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ipopt_alpha_for_y_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_alpha_for_y,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.IpoptConfig.ipopt_alpha_for_y)
}
inline std::string* IpoptConfig::unsafe_arena_release_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nav2_smac_planner.IpoptConfig.ipopt_alpha_for_y)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return ipopt_alpha_for_y_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IpoptConfig::unsafe_arena_set_allocated_ipopt_alpha_for_y(
    std::string* ipopt_alpha_for_y) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipopt_alpha_for_y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ipopt_alpha_for_y_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipopt_alpha_for_y, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.IpoptConfig.ipopt_alpha_for_y)
}

// optional string ipopt_recalc_y = 11;
inline bool IpoptConfig::_internal_has_ipopt_recalc_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IpoptConfig::has_ipopt_recalc_y() const {
  return _internal_has_ipopt_recalc_y();
}
inline void IpoptConfig::clear_ipopt_recalc_y() {
  ipopt_recalc_y_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IpoptConfig::ipopt_recalc_y() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.ipopt_recalc_y)
  return _internal_ipopt_recalc_y();
}
inline void IpoptConfig::set_ipopt_recalc_y(const std::string& value) {
  _internal_set_ipopt_recalc_y(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.ipopt_recalc_y)
}
inline std::string* IpoptConfig::mutable_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.IpoptConfig.ipopt_recalc_y)
  return _internal_mutable_ipopt_recalc_y();
}
inline const std::string& IpoptConfig::_internal_ipopt_recalc_y() const {
  return ipopt_recalc_y_.Get();
}
inline void IpoptConfig::_internal_set_ipopt_recalc_y(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IpoptConfig::set_ipopt_recalc_y(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nav2_smac_planner.IpoptConfig.ipopt_recalc_y)
}
inline void IpoptConfig::set_ipopt_recalc_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:nav2_smac_planner.IpoptConfig.ipopt_recalc_y)
}
inline void IpoptConfig::set_ipopt_recalc_y(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nav2_smac_planner.IpoptConfig.ipopt_recalc_y)
}
inline std::string* IpoptConfig::_internal_mutable_ipopt_recalc_y() {
  _has_bits_[0] |= 0x00000004u;
  return ipopt_recalc_y_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IpoptConfig::release_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.IpoptConfig.ipopt_recalc_y)
  if (!_internal_has_ipopt_recalc_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ipopt_recalc_y_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IpoptConfig::set_allocated_ipopt_recalc_y(std::string* ipopt_recalc_y) {
  if (ipopt_recalc_y != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ipopt_recalc_y_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_recalc_y,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.IpoptConfig.ipopt_recalc_y)
}
inline std::string* IpoptConfig::unsafe_arena_release_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nav2_smac_planner.IpoptConfig.ipopt_recalc_y)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return ipopt_recalc_y_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IpoptConfig::unsafe_arena_set_allocated_ipopt_recalc_y(
    std::string* ipopt_recalc_y) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipopt_recalc_y != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ipopt_recalc_y_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipopt_recalc_y, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.IpoptConfig.ipopt_recalc_y)
}

// optional double ipopt_mu_init = 12 [default = 0.1];
inline bool IpoptConfig::_internal_has_ipopt_mu_init() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool IpoptConfig::has_ipopt_mu_init() const {
  return _internal_has_ipopt_mu_init();
}
inline void IpoptConfig::clear_ipopt_mu_init() {
  ipopt_mu_init_ = 0.1;
  _has_bits_[0] &= ~0x00000800u;
}
inline double IpoptConfig::_internal_ipopt_mu_init() const {
  return ipopt_mu_init_;
}
inline double IpoptConfig::ipopt_mu_init() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptConfig.ipopt_mu_init)
  return _internal_ipopt_mu_init();
}
inline void IpoptConfig::_internal_set_ipopt_mu_init(double value) {
  _has_bits_[0] |= 0x00000800u;
  ipopt_mu_init_ = value;
}
inline void IpoptConfig::set_ipopt_mu_init(double value) {
  _internal_set_ipopt_mu_init(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptConfig.ipopt_mu_init)
}

// -------------------------------------------------------------------

// OSQPConfig

// optional double alpha = 1 [default = 1];
inline bool OSQPConfig::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OSQPConfig::has_alpha() const {
  return _internal_has_alpha();
}
inline void OSQPConfig::clear_alpha() {
  alpha_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline double OSQPConfig::_internal_alpha() const {
  return alpha_;
}
inline double OSQPConfig::alpha() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.OSQPConfig.alpha)
  return _internal_alpha();
}
inline void OSQPConfig::_internal_set_alpha(double value) {
  _has_bits_[0] |= 0x00000002u;
  alpha_ = value;
}
inline void OSQPConfig::set_alpha(double value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.OSQPConfig.alpha)
}

// optional double eps_abs = 2 [default = 0.001];
inline bool OSQPConfig::_internal_has_eps_abs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OSQPConfig::has_eps_abs() const {
  return _internal_has_eps_abs();
}
inline void OSQPConfig::clear_eps_abs() {
  eps_abs_ = 0.001;
  _has_bits_[0] &= ~0x00000004u;
}
inline double OSQPConfig::_internal_eps_abs() const {
  return eps_abs_;
}
inline double OSQPConfig::eps_abs() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.OSQPConfig.eps_abs)
  return _internal_eps_abs();
}
inline void OSQPConfig::_internal_set_eps_abs(double value) {
  _has_bits_[0] |= 0x00000004u;
  eps_abs_ = value;
}
inline void OSQPConfig::set_eps_abs(double value) {
  _internal_set_eps_abs(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.OSQPConfig.eps_abs)
}

// optional double eps_rel = 3 [default = 0.001];
inline bool OSQPConfig::_internal_has_eps_rel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OSQPConfig::has_eps_rel() const {
  return _internal_has_eps_rel();
}
inline void OSQPConfig::clear_eps_rel() {
  eps_rel_ = 0.001;
  _has_bits_[0] &= ~0x00000008u;
}
inline double OSQPConfig::_internal_eps_rel() const {
  return eps_rel_;
}
inline double OSQPConfig::eps_rel() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.OSQPConfig.eps_rel)
  return _internal_eps_rel();
}
inline void OSQPConfig::_internal_set_eps_rel(double value) {
  _has_bits_[0] |= 0x00000008u;
  eps_rel_ = value;
}
inline void OSQPConfig::set_eps_rel(double value) {
  _internal_set_eps_rel(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.OSQPConfig.eps_rel)
}

// optional int32 max_iter = 4 [default = 10000];
inline bool OSQPConfig::_internal_has_max_iter() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OSQPConfig::has_max_iter() const {
  return _internal_has_max_iter();
}
inline void OSQPConfig::clear_max_iter() {
  max_iter_ = 10000;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OSQPConfig::_internal_max_iter() const {
  return max_iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OSQPConfig::max_iter() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.OSQPConfig.max_iter)
  return _internal_max_iter();
}
inline void OSQPConfig::_internal_set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_iter_ = value;
}
inline void OSQPConfig::set_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_iter(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.OSQPConfig.max_iter)
}

// optional bool polish = 5 [default = true];
inline bool OSQPConfig::_internal_has_polish() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OSQPConfig::has_polish() const {
  return _internal_has_polish();
}
inline void OSQPConfig::clear_polish() {
  polish_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool OSQPConfig::_internal_polish() const {
  return polish_;
}
inline bool OSQPConfig::polish() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.OSQPConfig.polish)
  return _internal_polish();
}
inline void OSQPConfig::_internal_set_polish(bool value) {
  _has_bits_[0] |= 0x00000020u;
  polish_ = value;
}
inline void OSQPConfig::set_polish(bool value) {
  _internal_set_polish(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.OSQPConfig.polish)
}

// optional bool osqp_debug_log = 6 [default = false];
inline bool OSQPConfig::_internal_has_osqp_debug_log() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OSQPConfig::has_osqp_debug_log() const {
  return _internal_has_osqp_debug_log();
}
inline void OSQPConfig::clear_osqp_debug_log() {
  osqp_debug_log_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool OSQPConfig::_internal_osqp_debug_log() const {
  return osqp_debug_log_;
}
inline bool OSQPConfig::osqp_debug_log() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.OSQPConfig.osqp_debug_log)
  return _internal_osqp_debug_log();
}
inline void OSQPConfig::_internal_set_osqp_debug_log(bool value) {
  _has_bits_[0] |= 0x00000001u;
  osqp_debug_log_ = value;
}
inline void OSQPConfig::set_osqp_debug_log(bool value) {
  _internal_set_osqp_debug_log(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.OSQPConfig.osqp_debug_log)
}

// -------------------------------------------------------------------

// IterativeAnchoringConfig

// optional double interpolated_delta_s = 1 [default = 0.05];
inline bool IterativeAnchoringConfig::_internal_has_interpolated_delta_s() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_interpolated_delta_s() const {
  return _internal_has_interpolated_delta_s();
}
inline void IterativeAnchoringConfig::clear_interpolated_delta_s() {
  interpolated_delta_s_ = 0.05;
  _has_bits_[0] &= ~0x00000010u;
}
inline double IterativeAnchoringConfig::_internal_interpolated_delta_s() const {
  return interpolated_delta_s_;
}
inline double IterativeAnchoringConfig::interpolated_delta_s() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.interpolated_delta_s)
  return _internal_interpolated_delta_s();
}
inline void IterativeAnchoringConfig::_internal_set_interpolated_delta_s(double value) {
  _has_bits_[0] |= 0x00000010u;
  interpolated_delta_s_ = value;
}
inline void IterativeAnchoringConfig::set_interpolated_delta_s(double value) {
  _internal_set_interpolated_delta_s(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.interpolated_delta_s)
}

// optional int32 reanchoring_trails_num = 2 [default = 50];
inline bool IterativeAnchoringConfig::_internal_has_reanchoring_trails_num() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_reanchoring_trails_num() const {
  return _internal_has_reanchoring_trails_num();
}
inline void IterativeAnchoringConfig::clear_reanchoring_trails_num() {
  reanchoring_trails_num_ = 50;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IterativeAnchoringConfig::_internal_reanchoring_trails_num() const {
  return reanchoring_trails_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IterativeAnchoringConfig::reanchoring_trails_num() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.reanchoring_trails_num)
  return _internal_reanchoring_trails_num();
}
inline void IterativeAnchoringConfig::_internal_set_reanchoring_trails_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  reanchoring_trails_num_ = value;
}
inline void IterativeAnchoringConfig::set_reanchoring_trails_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reanchoring_trails_num(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.reanchoring_trails_num)
}

// optional double reanchoring_pos_stddev = 3 [default = 0.25];
inline bool IterativeAnchoringConfig::_internal_has_reanchoring_pos_stddev() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_reanchoring_pos_stddev() const {
  return _internal_has_reanchoring_pos_stddev();
}
inline void IterativeAnchoringConfig::clear_reanchoring_pos_stddev() {
  reanchoring_pos_stddev_ = 0.25;
  _has_bits_[0] &= ~0x00000020u;
}
inline double IterativeAnchoringConfig::_internal_reanchoring_pos_stddev() const {
  return reanchoring_pos_stddev_;
}
inline double IterativeAnchoringConfig::reanchoring_pos_stddev() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.reanchoring_pos_stddev)
  return _internal_reanchoring_pos_stddev();
}
inline void IterativeAnchoringConfig::_internal_set_reanchoring_pos_stddev(double value) {
  _has_bits_[0] |= 0x00000020u;
  reanchoring_pos_stddev_ = value;
}
inline void IterativeAnchoringConfig::set_reanchoring_pos_stddev(double value) {
  _internal_set_reanchoring_pos_stddev(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.reanchoring_pos_stddev)
}

// optional double reanchoring_length_stddev = 4 [default = 1];
inline bool IterativeAnchoringConfig::_internal_has_reanchoring_length_stddev() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_reanchoring_length_stddev() const {
  return _internal_has_reanchoring_length_stddev();
}
inline void IterativeAnchoringConfig::clear_reanchoring_length_stddev() {
  reanchoring_length_stddev_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline double IterativeAnchoringConfig::_internal_reanchoring_length_stddev() const {
  return reanchoring_length_stddev_;
}
inline double IterativeAnchoringConfig::reanchoring_length_stddev() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.reanchoring_length_stddev)
  return _internal_reanchoring_length_stddev();
}
inline void IterativeAnchoringConfig::_internal_set_reanchoring_length_stddev(double value) {
  _has_bits_[0] |= 0x00000040u;
  reanchoring_length_stddev_ = value;
}
inline void IterativeAnchoringConfig::set_reanchoring_length_stddev(double value) {
  _internal_set_reanchoring_length_stddev(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.reanchoring_length_stddev)
}

// optional bool estimate_bound = 5 [default = false];
inline bool IterativeAnchoringConfig::_internal_has_estimate_bound() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_estimate_bound() const {
  return _internal_has_estimate_bound();
}
inline void IterativeAnchoringConfig::clear_estimate_bound() {
  estimate_bound_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool IterativeAnchoringConfig::_internal_estimate_bound() const {
  return estimate_bound_;
}
inline bool IterativeAnchoringConfig::estimate_bound() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.estimate_bound)
  return _internal_estimate_bound();
}
inline void IterativeAnchoringConfig::_internal_set_estimate_bound(bool value) {
  _has_bits_[0] |= 0x00000004u;
  estimate_bound_ = value;
}
inline void IterativeAnchoringConfig::set_estimate_bound(bool value) {
  _internal_set_estimate_bound(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.estimate_bound)
}

// optional double default_bound = 6 [default = 2];
inline bool IterativeAnchoringConfig::_internal_has_default_bound() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_default_bound() const {
  return _internal_has_default_bound();
}
inline void IterativeAnchoringConfig::clear_default_bound() {
  default_bound_ = 2;
  _has_bits_[0] &= ~0x00000080u;
}
inline double IterativeAnchoringConfig::_internal_default_bound() const {
  return default_bound_;
}
inline double IterativeAnchoringConfig::default_bound() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.default_bound)
  return _internal_default_bound();
}
inline void IterativeAnchoringConfig::_internal_set_default_bound(double value) {
  _has_bits_[0] |= 0x00000080u;
  default_bound_ = value;
}
inline void IterativeAnchoringConfig::set_default_bound(double value) {
  _internal_set_default_bound(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.default_bound)
}

// optional double vehicle_shortest_dimension = 7 [default = 1.04];
inline bool IterativeAnchoringConfig::_internal_has_vehicle_shortest_dimension() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_vehicle_shortest_dimension() const {
  return _internal_has_vehicle_shortest_dimension();
}
inline void IterativeAnchoringConfig::clear_vehicle_shortest_dimension() {
  vehicle_shortest_dimension_ = 1.04;
  _has_bits_[0] &= ~0x00000100u;
}
inline double IterativeAnchoringConfig::_internal_vehicle_shortest_dimension() const {
  return vehicle_shortest_dimension_;
}
inline double IterativeAnchoringConfig::vehicle_shortest_dimension() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.vehicle_shortest_dimension)
  return _internal_vehicle_shortest_dimension();
}
inline void IterativeAnchoringConfig::_internal_set_vehicle_shortest_dimension(double value) {
  _has_bits_[0] |= 0x00000100u;
  vehicle_shortest_dimension_ = value;
}
inline void IterativeAnchoringConfig::set_vehicle_shortest_dimension(double value) {
  _internal_set_vehicle_shortest_dimension(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.vehicle_shortest_dimension)
}

// optional .nav2_smac_planner.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
inline bool IterativeAnchoringConfig::_internal_has_fem_pos_deviation_smoother_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fem_pos_deviation_smoother_config_ != nullptr);
  return value;
}
inline bool IterativeAnchoringConfig::has_fem_pos_deviation_smoother_config() const {
  return _internal_has_fem_pos_deviation_smoother_config();
}
inline const ::nav2_smac_planner::FemPosDeviationSmootherConfig& IterativeAnchoringConfig::_internal_fem_pos_deviation_smoother_config() const {
  const ::nav2_smac_planner::FemPosDeviationSmootherConfig* p = fem_pos_deviation_smoother_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::FemPosDeviationSmootherConfig*>(
      &::nav2_smac_planner::_FemPosDeviationSmootherConfig_default_instance_);
}
inline const ::nav2_smac_planner::FemPosDeviationSmootherConfig& IterativeAnchoringConfig::fem_pos_deviation_smoother_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  return _internal_fem_pos_deviation_smoother_config();
}
inline void IterativeAnchoringConfig::unsafe_arena_set_allocated_fem_pos_deviation_smoother_config(
    ::nav2_smac_planner::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fem_pos_deviation_smoother_config_);
  }
  fem_pos_deviation_smoother_config_ = fem_pos_deviation_smoother_config;
  if (fem_pos_deviation_smoother_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
}
inline ::nav2_smac_planner::FemPosDeviationSmootherConfig* IterativeAnchoringConfig::release_fem_pos_deviation_smoother_config() {
  auto temp = unsafe_arena_release_fem_pos_deviation_smoother_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::FemPosDeviationSmootherConfig* IterativeAnchoringConfig::unsafe_arena_release_fem_pos_deviation_smoother_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  _has_bits_[0] &= ~0x00000001u;
  ::nav2_smac_planner::FemPosDeviationSmootherConfig* temp = fem_pos_deviation_smoother_config_;
  fem_pos_deviation_smoother_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::FemPosDeviationSmootherConfig* IterativeAnchoringConfig::_internal_mutable_fem_pos_deviation_smoother_config() {
  _has_bits_[0] |= 0x00000001u;
  if (fem_pos_deviation_smoother_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::FemPosDeviationSmootherConfig>(GetArena());
    fem_pos_deviation_smoother_config_ = p;
  }
  return fem_pos_deviation_smoother_config_;
}
inline ::nav2_smac_planner::FemPosDeviationSmootherConfig* IterativeAnchoringConfig::mutable_fem_pos_deviation_smoother_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  return _internal_mutable_fem_pos_deviation_smoother_config();
}
inline void IterativeAnchoringConfig::set_allocated_fem_pos_deviation_smoother_config(::nav2_smac_planner::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fem_pos_deviation_smoother_config_);
  }
  if (fem_pos_deviation_smoother_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fem_pos_deviation_smoother_config)->GetArena();
    if (message_arena != submessage_arena) {
      fem_pos_deviation_smoother_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fem_pos_deviation_smoother_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fem_pos_deviation_smoother_config_ = fem_pos_deviation_smoother_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
}

// optional double collision_decrease_ratio = 9 [default = 0.9];
inline bool IterativeAnchoringConfig::_internal_has_collision_decrease_ratio() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_collision_decrease_ratio() const {
  return _internal_has_collision_decrease_ratio();
}
inline void IterativeAnchoringConfig::clear_collision_decrease_ratio() {
  collision_decrease_ratio_ = 0.9;
  _has_bits_[0] &= ~0x00000200u;
}
inline double IterativeAnchoringConfig::_internal_collision_decrease_ratio() const {
  return collision_decrease_ratio_;
}
inline double IterativeAnchoringConfig::collision_decrease_ratio() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.collision_decrease_ratio)
  return _internal_collision_decrease_ratio();
}
inline void IterativeAnchoringConfig::_internal_set_collision_decrease_ratio(double value) {
  _has_bits_[0] |= 0x00000200u;
  collision_decrease_ratio_ = value;
}
inline void IterativeAnchoringConfig::set_collision_decrease_ratio(double value) {
  _internal_set_collision_decrease_ratio(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.collision_decrease_ratio)
}

// optional double max_forward_v = 10 [default = 2];
inline bool IterativeAnchoringConfig::_internal_has_max_forward_v() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_max_forward_v() const {
  return _internal_has_max_forward_v();
}
inline void IterativeAnchoringConfig::clear_max_forward_v() {
  max_forward_v_ = 2;
  _has_bits_[0] &= ~0x00000400u;
}
inline double IterativeAnchoringConfig::_internal_max_forward_v() const {
  return max_forward_v_;
}
inline double IterativeAnchoringConfig::max_forward_v() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.max_forward_v)
  return _internal_max_forward_v();
}
inline void IterativeAnchoringConfig::_internal_set_max_forward_v(double value) {
  _has_bits_[0] |= 0x00000400u;
  max_forward_v_ = value;
}
inline void IterativeAnchoringConfig::set_max_forward_v(double value) {
  _internal_set_max_forward_v(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.max_forward_v)
}

// optional double max_reverse_v = 11 [default = 2];
inline bool IterativeAnchoringConfig::_internal_has_max_reverse_v() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_max_reverse_v() const {
  return _internal_has_max_reverse_v();
}
inline void IterativeAnchoringConfig::clear_max_reverse_v() {
  max_reverse_v_ = 2;
  _has_bits_[0] &= ~0x00000800u;
}
inline double IterativeAnchoringConfig::_internal_max_reverse_v() const {
  return max_reverse_v_;
}
inline double IterativeAnchoringConfig::max_reverse_v() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.max_reverse_v)
  return _internal_max_reverse_v();
}
inline void IterativeAnchoringConfig::_internal_set_max_reverse_v(double value) {
  _has_bits_[0] |= 0x00000800u;
  max_reverse_v_ = value;
}
inline void IterativeAnchoringConfig::set_max_reverse_v(double value) {
  _internal_set_max_reverse_v(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.max_reverse_v)
}

// optional double max_forward_acc = 12 [default = 3];
inline bool IterativeAnchoringConfig::_internal_has_max_forward_acc() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_max_forward_acc() const {
  return _internal_has_max_forward_acc();
}
inline void IterativeAnchoringConfig::clear_max_forward_acc() {
  max_forward_acc_ = 3;
  _has_bits_[0] &= ~0x00001000u;
}
inline double IterativeAnchoringConfig::_internal_max_forward_acc() const {
  return max_forward_acc_;
}
inline double IterativeAnchoringConfig::max_forward_acc() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.max_forward_acc)
  return _internal_max_forward_acc();
}
inline void IterativeAnchoringConfig::_internal_set_max_forward_acc(double value) {
  _has_bits_[0] |= 0x00001000u;
  max_forward_acc_ = value;
}
inline void IterativeAnchoringConfig::set_max_forward_acc(double value) {
  _internal_set_max_forward_acc(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.max_forward_acc)
}

// optional double max_reverse_acc = 13 [default = 2];
inline bool IterativeAnchoringConfig::_internal_has_max_reverse_acc() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_max_reverse_acc() const {
  return _internal_has_max_reverse_acc();
}
inline void IterativeAnchoringConfig::clear_max_reverse_acc() {
  max_reverse_acc_ = 2;
  _has_bits_[0] &= ~0x00002000u;
}
inline double IterativeAnchoringConfig::_internal_max_reverse_acc() const {
  return max_reverse_acc_;
}
inline double IterativeAnchoringConfig::max_reverse_acc() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.max_reverse_acc)
  return _internal_max_reverse_acc();
}
inline void IterativeAnchoringConfig::_internal_set_max_reverse_acc(double value) {
  _has_bits_[0] |= 0x00002000u;
  max_reverse_acc_ = value;
}
inline void IterativeAnchoringConfig::set_max_reverse_acc(double value) {
  _internal_set_max_reverse_acc(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.max_reverse_acc)
}

// optional double max_acc_jerk = 14 [default = 4];
inline bool IterativeAnchoringConfig::_internal_has_max_acc_jerk() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_max_acc_jerk() const {
  return _internal_has_max_acc_jerk();
}
inline void IterativeAnchoringConfig::clear_max_acc_jerk() {
  max_acc_jerk_ = 4;
  _has_bits_[0] &= ~0x00004000u;
}
inline double IterativeAnchoringConfig::_internal_max_acc_jerk() const {
  return max_acc_jerk_;
}
inline double IterativeAnchoringConfig::max_acc_jerk() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.max_acc_jerk)
  return _internal_max_acc_jerk();
}
inline void IterativeAnchoringConfig::_internal_set_max_acc_jerk(double value) {
  _has_bits_[0] |= 0x00004000u;
  max_acc_jerk_ = value;
}
inline void IterativeAnchoringConfig::set_max_acc_jerk(double value) {
  _internal_set_max_acc_jerk(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.max_acc_jerk)
}

// optional double delta_t = 15 [default = 0.2];
inline bool IterativeAnchoringConfig::_internal_has_delta_t() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool IterativeAnchoringConfig::has_delta_t() const {
  return _internal_has_delta_t();
}
inline void IterativeAnchoringConfig::clear_delta_t() {
  delta_t_ = 0.2;
  _has_bits_[0] &= ~0x00008000u;
}
inline double IterativeAnchoringConfig::_internal_delta_t() const {
  return delta_t_;
}
inline double IterativeAnchoringConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.delta_t)
  return _internal_delta_t();
}
inline void IterativeAnchoringConfig::_internal_set_delta_t(double value) {
  _has_bits_[0] |= 0x00008000u;
  delta_t_ = value;
}
inline void IterativeAnchoringConfig::set_delta_t(double value) {
  _internal_set_delta_t(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IterativeAnchoringConfig.delta_t)
}

// optional .nav2_smac_planner.SpeedOptimizerConfig s_curve_config = 16;
inline bool IterativeAnchoringConfig::_internal_has_s_curve_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || s_curve_config_ != nullptr);
  return value;
}
inline bool IterativeAnchoringConfig::has_s_curve_config() const {
  return _internal_has_s_curve_config();
}
inline void IterativeAnchoringConfig::clear_s_curve_config() {
  if (s_curve_config_ != nullptr) s_curve_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::nav2_smac_planner::SpeedOptimizerConfig& IterativeAnchoringConfig::_internal_s_curve_config() const {
  const ::nav2_smac_planner::SpeedOptimizerConfig* p = s_curve_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::SpeedOptimizerConfig*>(
      &::nav2_smac_planner::_SpeedOptimizerConfig_default_instance_);
}
inline const ::nav2_smac_planner::SpeedOptimizerConfig& IterativeAnchoringConfig::s_curve_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IterativeAnchoringConfig.s_curve_config)
  return _internal_s_curve_config();
}
inline void IterativeAnchoringConfig::unsafe_arena_set_allocated_s_curve_config(
    ::nav2_smac_planner::SpeedOptimizerConfig* s_curve_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s_curve_config_);
  }
  s_curve_config_ = s_curve_config;
  if (s_curve_config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.IterativeAnchoringConfig.s_curve_config)
}
inline ::nav2_smac_planner::SpeedOptimizerConfig* IterativeAnchoringConfig::release_s_curve_config() {
  auto temp = unsafe_arena_release_s_curve_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::SpeedOptimizerConfig* IterativeAnchoringConfig::unsafe_arena_release_s_curve_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.IterativeAnchoringConfig.s_curve_config)
  _has_bits_[0] &= ~0x00000002u;
  ::nav2_smac_planner::SpeedOptimizerConfig* temp = s_curve_config_;
  s_curve_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::SpeedOptimizerConfig* IterativeAnchoringConfig::_internal_mutable_s_curve_config() {
  _has_bits_[0] |= 0x00000002u;
  if (s_curve_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::SpeedOptimizerConfig>(GetArena());
    s_curve_config_ = p;
  }
  return s_curve_config_;
}
inline ::nav2_smac_planner::SpeedOptimizerConfig* IterativeAnchoringConfig::mutable_s_curve_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.IterativeAnchoringConfig.s_curve_config)
  return _internal_mutable_s_curve_config();
}
inline void IterativeAnchoringConfig::set_allocated_s_curve_config(::nav2_smac_planner::SpeedOptimizerConfig* s_curve_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete s_curve_config_;
  }
  if (s_curve_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(s_curve_config);
    if (message_arena != submessage_arena) {
      s_curve_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s_curve_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  s_curve_config_ = s_curve_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.IterativeAnchoringConfig.s_curve_config)
}

// -------------------------------------------------------------------

// DualVariableConfig

// optional double weight_d = 1 [default = 1];
inline bool DualVariableConfig::_internal_has_weight_d() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DualVariableConfig::has_weight_d() const {
  return _internal_has_weight_d();
}
inline void DualVariableConfig::clear_weight_d() {
  weight_d_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline double DualVariableConfig::_internal_weight_d() const {
  return weight_d_;
}
inline double DualVariableConfig::weight_d() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableConfig.weight_d)
  return _internal_weight_d();
}
inline void DualVariableConfig::_internal_set_weight_d(double value) {
  _has_bits_[0] |= 0x00000010u;
  weight_d_ = value;
}
inline void DualVariableConfig::set_weight_d(double value) {
  _internal_set_weight_d(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DualVariableConfig.weight_d)
}

// optional .nav2_smac_planner.IpoptSolverConfig ipopt_config = 2;
inline bool DualVariableConfig::_internal_has_ipopt_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ipopt_config_ != nullptr);
  return value;
}
inline bool DualVariableConfig::has_ipopt_config() const {
  return _internal_has_ipopt_config();
}
inline void DualVariableConfig::clear_ipopt_config() {
  if (ipopt_config_ != nullptr) ipopt_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::nav2_smac_planner::IpoptSolverConfig& DualVariableConfig::_internal_ipopt_config() const {
  const ::nav2_smac_planner::IpoptSolverConfig* p = ipopt_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::nav2_smac_planner::IpoptSolverConfig*>(
      &::nav2_smac_planner::_IpoptSolverConfig_default_instance_);
}
inline const ::nav2_smac_planner::IpoptSolverConfig& DualVariableConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableConfig.ipopt_config)
  return _internal_ipopt_config();
}
inline void DualVariableConfig::unsafe_arena_set_allocated_ipopt_config(
    ::nav2_smac_planner::IpoptSolverConfig* ipopt_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipopt_config_);
  }
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.DualVariableConfig.ipopt_config)
}
inline ::nav2_smac_planner::IpoptSolverConfig* DualVariableConfig::release_ipopt_config() {
  auto temp = unsafe_arena_release_ipopt_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::nav2_smac_planner::IpoptSolverConfig* DualVariableConfig::unsafe_arena_release_ipopt_config() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.DualVariableConfig.ipopt_config)
  _has_bits_[0] &= ~0x00000001u;
  ::nav2_smac_planner::IpoptSolverConfig* temp = ipopt_config_;
  ipopt_config_ = nullptr;
  return temp;
}
inline ::nav2_smac_planner::IpoptSolverConfig* DualVariableConfig::_internal_mutable_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
  if (ipopt_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::nav2_smac_planner::IpoptSolverConfig>(GetArena());
    ipopt_config_ = p;
  }
  return ipopt_config_;
}
inline ::nav2_smac_planner::IpoptSolverConfig* DualVariableConfig::mutable_ipopt_config() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.DualVariableConfig.ipopt_config)
  return _internal_mutable_ipopt_config();
}
inline void DualVariableConfig::set_allocated_ipopt_config(::nav2_smac_planner::IpoptSolverConfig* ipopt_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ipopt_config_;
  }
  if (ipopt_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ipopt_config);
    if (message_arena != submessage_arena) {
      ipopt_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipopt_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipopt_config_ = ipopt_config;
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.DualVariableConfig.ipopt_config)
}

// optional .nav2_smac_planner.DualVariableMode qp_format = 3;
inline bool DualVariableConfig::_internal_has_qp_format() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DualVariableConfig::has_qp_format() const {
  return _internal_has_qp_format();
}
inline void DualVariableConfig::clear_qp_format() {
  qp_format_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::nav2_smac_planner::DualVariableMode DualVariableConfig::_internal_qp_format() const {
  return static_cast< ::nav2_smac_planner::DualVariableMode >(qp_format_);
}
inline ::nav2_smac_planner::DualVariableMode DualVariableConfig::qp_format() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableConfig.qp_format)
  return _internal_qp_format();
}
inline void DualVariableConfig::_internal_set_qp_format(::nav2_smac_planner::DualVariableMode value) {
  assert(::nav2_smac_planner::DualVariableMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  qp_format_ = value;
}
inline void DualVariableConfig::set_qp_format(::nav2_smac_planner::DualVariableMode value) {
  _internal_set_qp_format(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DualVariableConfig.qp_format)
}

// optional double min_safety_distance = 4 [default = 0];
inline bool DualVariableConfig::_internal_has_min_safety_distance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DualVariableConfig::has_min_safety_distance() const {
  return _internal_has_min_safety_distance();
}
inline void DualVariableConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DualVariableConfig::_internal_min_safety_distance() const {
  return min_safety_distance_;
}
inline double DualVariableConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableConfig.min_safety_distance)
  return _internal_min_safety_distance();
}
inline void DualVariableConfig::_internal_set_min_safety_distance(double value) {
  _has_bits_[0] |= 0x00000002u;
  min_safety_distance_ = value;
}
inline void DualVariableConfig::set_min_safety_distance(double value) {
  _internal_set_min_safety_distance(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DualVariableConfig.min_safety_distance)
}

// optional bool debug_osqp = 5 [default = false];
inline bool DualVariableConfig::_internal_has_debug_osqp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DualVariableConfig::has_debug_osqp() const {
  return _internal_has_debug_osqp();
}
inline void DualVariableConfig::clear_debug_osqp() {
  debug_osqp_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DualVariableConfig::_internal_debug_osqp() const {
  return debug_osqp_;
}
inline bool DualVariableConfig::debug_osqp() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableConfig.debug_osqp)
  return _internal_debug_osqp();
}
inline void DualVariableConfig::_internal_set_debug_osqp(bool value) {
  _has_bits_[0] |= 0x00000008u;
  debug_osqp_ = value;
}
inline void DualVariableConfig::set_debug_osqp(bool value) {
  _internal_set_debug_osqp(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DualVariableConfig.debug_osqp)
}

// optional double beta = 6 [default = 1];
inline bool DualVariableConfig::_internal_has_beta() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DualVariableConfig::has_beta() const {
  return _internal_has_beta();
}
inline void DualVariableConfig::clear_beta() {
  beta_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline double DualVariableConfig::_internal_beta() const {
  return beta_;
}
inline double DualVariableConfig::beta() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.DualVariableConfig.beta)
  return _internal_beta();
}
inline void DualVariableConfig::_internal_set_beta(double value) {
  _has_bits_[0] |= 0x00000020u;
  beta_ = value;
}
inline void DualVariableConfig::set_beta(double value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.DualVariableConfig.beta)
}

// -------------------------------------------------------------------

// IpoptSolverConfig

// optional int32 ipopt_print_level = 1;
inline bool IpoptSolverConfig::_internal_has_ipopt_print_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_print_level() const {
  return _internal_has_ipopt_print_level();
}
inline void IpoptSolverConfig::clear_ipopt_print_level() {
  ipopt_print_level_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::_internal_ipopt_print_level() const {
  return ipopt_print_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::ipopt_print_level() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.ipopt_print_level)
  return _internal_ipopt_print_level();
}
inline void IpoptSolverConfig::_internal_set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ipopt_print_level_ = value;
}
inline void IpoptSolverConfig::set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ipopt_print_level(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.ipopt_print_level)
}

// optional int32 mumps_mem_percent = 2;
inline bool IpoptSolverConfig::_internal_has_mumps_mem_percent() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_mumps_mem_percent() const {
  return _internal_has_mumps_mem_percent();
}
inline void IpoptSolverConfig::clear_mumps_mem_percent() {
  mumps_mem_percent_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::_internal_mumps_mem_percent() const {
  return mumps_mem_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::mumps_mem_percent() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.mumps_mem_percent)
  return _internal_mumps_mem_percent();
}
inline void IpoptSolverConfig::_internal_set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mumps_mem_percent_ = value;
}
inline void IpoptSolverConfig::set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mumps_mem_percent(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.mumps_mem_percent)
}

// optional double mumps_pivtol = 3;
inline bool IpoptSolverConfig::_internal_has_mumps_pivtol() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_mumps_pivtol() const {
  return _internal_has_mumps_pivtol();
}
inline void IpoptSolverConfig::clear_mumps_pivtol() {
  mumps_pivtol_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double IpoptSolverConfig::_internal_mumps_pivtol() const {
  return mumps_pivtol_;
}
inline double IpoptSolverConfig::mumps_pivtol() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.mumps_pivtol)
  return _internal_mumps_pivtol();
}
inline void IpoptSolverConfig::_internal_set_mumps_pivtol(double value) {
  _has_bits_[0] |= 0x00000020u;
  mumps_pivtol_ = value;
}
inline void IpoptSolverConfig::set_mumps_pivtol(double value) {
  _internal_set_mumps_pivtol(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.mumps_pivtol)
}

// optional int32 ipopt_max_iter = 4;
inline bool IpoptSolverConfig::_internal_has_ipopt_max_iter() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_max_iter() const {
  return _internal_has_ipopt_max_iter();
}
inline void IpoptSolverConfig::clear_ipopt_max_iter() {
  ipopt_max_iter_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::_internal_ipopt_max_iter() const {
  return ipopt_max_iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::ipopt_max_iter() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.ipopt_max_iter)
  return _internal_ipopt_max_iter();
}
inline void IpoptSolverConfig::_internal_set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  ipopt_max_iter_ = value;
}
inline void IpoptSolverConfig::set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ipopt_max_iter(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.ipopt_max_iter)
}

// optional double ipopt_tol = 5;
inline bool IpoptSolverConfig::_internal_has_ipopt_tol() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_tol() const {
  return _internal_has_ipopt_tol();
}
inline void IpoptSolverConfig::clear_ipopt_tol() {
  ipopt_tol_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double IpoptSolverConfig::_internal_ipopt_tol() const {
  return ipopt_tol_;
}
inline double IpoptSolverConfig::ipopt_tol() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.ipopt_tol)
  return _internal_ipopt_tol();
}
inline void IpoptSolverConfig::_internal_set_ipopt_tol(double value) {
  _has_bits_[0] |= 0x00000040u;
  ipopt_tol_ = value;
}
inline void IpoptSolverConfig::set_ipopt_tol(double value) {
  _internal_set_ipopt_tol(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.ipopt_tol)
}

// optional double ipopt_acceptable_constr_viol_tol = 6;
inline bool IpoptSolverConfig::_internal_has_ipopt_acceptable_constr_viol_tol() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_acceptable_constr_viol_tol() const {
  return _internal_has_ipopt_acceptable_constr_viol_tol();
}
inline void IpoptSolverConfig::clear_ipopt_acceptable_constr_viol_tol() {
  ipopt_acceptable_constr_viol_tol_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double IpoptSolverConfig::_internal_ipopt_acceptable_constr_viol_tol() const {
  return ipopt_acceptable_constr_viol_tol_;
}
inline double IpoptSolverConfig::ipopt_acceptable_constr_viol_tol() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.ipopt_acceptable_constr_viol_tol)
  return _internal_ipopt_acceptable_constr_viol_tol();
}
inline void IpoptSolverConfig::_internal_set_ipopt_acceptable_constr_viol_tol(double value) {
  _has_bits_[0] |= 0x00000080u;
  ipopt_acceptable_constr_viol_tol_ = value;
}
inline void IpoptSolverConfig::set_ipopt_acceptable_constr_viol_tol(double value) {
  _internal_set_ipopt_acceptable_constr_viol_tol(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.ipopt_acceptable_constr_viol_tol)
}

// optional double ipopt_min_hessian_perturbation = 7;
inline bool IpoptSolverConfig::_internal_has_ipopt_min_hessian_perturbation() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_min_hessian_perturbation() const {
  return _internal_has_ipopt_min_hessian_perturbation();
}
inline void IpoptSolverConfig::clear_ipopt_min_hessian_perturbation() {
  ipopt_min_hessian_perturbation_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double IpoptSolverConfig::_internal_ipopt_min_hessian_perturbation() const {
  return ipopt_min_hessian_perturbation_;
}
inline double IpoptSolverConfig::ipopt_min_hessian_perturbation() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.ipopt_min_hessian_perturbation)
  return _internal_ipopt_min_hessian_perturbation();
}
inline void IpoptSolverConfig::_internal_set_ipopt_min_hessian_perturbation(double value) {
  _has_bits_[0] |= 0x00000100u;
  ipopt_min_hessian_perturbation_ = value;
}
inline void IpoptSolverConfig::set_ipopt_min_hessian_perturbation(double value) {
  _internal_set_ipopt_min_hessian_perturbation(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.ipopt_min_hessian_perturbation)
}

// optional double ipopt_jacobian_regularization_value = 8;
inline bool IpoptSolverConfig::_internal_has_ipopt_jacobian_regularization_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_jacobian_regularization_value() const {
  return _internal_has_ipopt_jacobian_regularization_value();
}
inline void IpoptSolverConfig::clear_ipopt_jacobian_regularization_value() {
  ipopt_jacobian_regularization_value_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double IpoptSolverConfig::_internal_ipopt_jacobian_regularization_value() const {
  return ipopt_jacobian_regularization_value_;
}
inline double IpoptSolverConfig::ipopt_jacobian_regularization_value() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.ipopt_jacobian_regularization_value)
  return _internal_ipopt_jacobian_regularization_value();
}
inline void IpoptSolverConfig::_internal_set_ipopt_jacobian_regularization_value(double value) {
  _has_bits_[0] |= 0x00000200u;
  ipopt_jacobian_regularization_value_ = value;
}
inline void IpoptSolverConfig::set_ipopt_jacobian_regularization_value(double value) {
  _internal_set_ipopt_jacobian_regularization_value(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.ipopt_jacobian_regularization_value)
}

// optional string ipopt_print_timing_statistics = 9;
inline bool IpoptSolverConfig::_internal_has_ipopt_print_timing_statistics() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_print_timing_statistics() const {
  return _internal_has_ipopt_print_timing_statistics();
}
inline void IpoptSolverConfig::clear_ipopt_print_timing_statistics() {
  ipopt_print_timing_statistics_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IpoptSolverConfig::ipopt_print_timing_statistics() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.ipopt_print_timing_statistics)
  return _internal_ipopt_print_timing_statistics();
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const std::string& value) {
  _internal_set_ipopt_print_timing_statistics(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline std::string* IpoptSolverConfig::mutable_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.IpoptSolverConfig.ipopt_print_timing_statistics)
  return _internal_mutable_ipopt_print_timing_statistics();
}
inline const std::string& IpoptSolverConfig::_internal_ipopt_print_timing_statistics() const {
  return ipopt_print_timing_statistics_.Get();
}
inline void IpoptSolverConfig::_internal_set_ipopt_print_timing_statistics(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nav2_smac_planner.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:nav2_smac_planner.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nav2_smac_planner.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline std::string* IpoptSolverConfig::_internal_mutable_ipopt_print_timing_statistics() {
  _has_bits_[0] |= 0x00000001u;
  return ipopt_print_timing_statistics_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IpoptSolverConfig::release_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.IpoptSolverConfig.ipopt_print_timing_statistics)
  if (!_internal_has_ipopt_print_timing_statistics()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ipopt_print_timing_statistics_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IpoptSolverConfig::set_allocated_ipopt_print_timing_statistics(std::string* ipopt_print_timing_statistics) {
  if (ipopt_print_timing_statistics != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipopt_print_timing_statistics_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_print_timing_statistics,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline std::string* IpoptSolverConfig::unsafe_arena_release_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nav2_smac_planner.IpoptSolverConfig.ipopt_print_timing_statistics)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return ipopt_print_timing_statistics_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IpoptSolverConfig::unsafe_arena_set_allocated_ipopt_print_timing_statistics(
    std::string* ipopt_print_timing_statistics) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipopt_print_timing_statistics != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipopt_print_timing_statistics_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipopt_print_timing_statistics, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.IpoptSolverConfig.ipopt_print_timing_statistics)
}

// optional string ipopt_alpha_for_y = 10;
inline bool IpoptSolverConfig::_internal_has_ipopt_alpha_for_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_alpha_for_y() const {
  return _internal_has_ipopt_alpha_for_y();
}
inline void IpoptSolverConfig::clear_ipopt_alpha_for_y() {
  ipopt_alpha_for_y_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IpoptSolverConfig::ipopt_alpha_for_y() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.ipopt_alpha_for_y)
  return _internal_ipopt_alpha_for_y();
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const std::string& value) {
  _internal_set_ipopt_alpha_for_y(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline std::string* IpoptSolverConfig::mutable_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.IpoptSolverConfig.ipopt_alpha_for_y)
  return _internal_mutable_ipopt_alpha_for_y();
}
inline const std::string& IpoptSolverConfig::_internal_ipopt_alpha_for_y() const {
  return ipopt_alpha_for_y_.Get();
}
inline void IpoptSolverConfig::_internal_set_ipopt_alpha_for_y(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nav2_smac_planner.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:nav2_smac_planner.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nav2_smac_planner.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline std::string* IpoptSolverConfig::_internal_mutable_ipopt_alpha_for_y() {
  _has_bits_[0] |= 0x00000002u;
  return ipopt_alpha_for_y_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IpoptSolverConfig::release_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.IpoptSolverConfig.ipopt_alpha_for_y)
  if (!_internal_has_ipopt_alpha_for_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ipopt_alpha_for_y_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IpoptSolverConfig::set_allocated_ipopt_alpha_for_y(std::string* ipopt_alpha_for_y) {
  if (ipopt_alpha_for_y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ipopt_alpha_for_y_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_alpha_for_y,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline std::string* IpoptSolverConfig::unsafe_arena_release_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nav2_smac_planner.IpoptSolverConfig.ipopt_alpha_for_y)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return ipopt_alpha_for_y_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IpoptSolverConfig::unsafe_arena_set_allocated_ipopt_alpha_for_y(
    std::string* ipopt_alpha_for_y) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipopt_alpha_for_y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ipopt_alpha_for_y_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipopt_alpha_for_y, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.IpoptSolverConfig.ipopt_alpha_for_y)
}

// optional string ipopt_recalc_y = 11;
inline bool IpoptSolverConfig::_internal_has_ipopt_recalc_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_recalc_y() const {
  return _internal_has_ipopt_recalc_y();
}
inline void IpoptSolverConfig::clear_ipopt_recalc_y() {
  ipopt_recalc_y_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IpoptSolverConfig::ipopt_recalc_y() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.ipopt_recalc_y)
  return _internal_ipopt_recalc_y();
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(const std::string& value) {
  _internal_set_ipopt_recalc_y(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.ipopt_recalc_y)
}
inline std::string* IpoptSolverConfig::mutable_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_mutable:nav2_smac_planner.IpoptSolverConfig.ipopt_recalc_y)
  return _internal_mutable_ipopt_recalc_y();
}
inline const std::string& IpoptSolverConfig::_internal_ipopt_recalc_y() const {
  return ipopt_recalc_y_.Get();
}
inline void IpoptSolverConfig::_internal_set_ipopt_recalc_y(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:nav2_smac_planner.IpoptSolverConfig.ipopt_recalc_y)
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:nav2_smac_planner.IpoptSolverConfig.ipopt_recalc_y)
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:nav2_smac_planner.IpoptSolverConfig.ipopt_recalc_y)
}
inline std::string* IpoptSolverConfig::_internal_mutable_ipopt_recalc_y() {
  _has_bits_[0] |= 0x00000004u;
  return ipopt_recalc_y_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IpoptSolverConfig::release_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_release:nav2_smac_planner.IpoptSolverConfig.ipopt_recalc_y)
  if (!_internal_has_ipopt_recalc_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ipopt_recalc_y_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IpoptSolverConfig::set_allocated_ipopt_recalc_y(std::string* ipopt_recalc_y) {
  if (ipopt_recalc_y != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ipopt_recalc_y_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_recalc_y,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:nav2_smac_planner.IpoptSolverConfig.ipopt_recalc_y)
}
inline std::string* IpoptSolverConfig::unsafe_arena_release_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nav2_smac_planner.IpoptSolverConfig.ipopt_recalc_y)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return ipopt_recalc_y_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IpoptSolverConfig::unsafe_arena_set_allocated_ipopt_recalc_y(
    std::string* ipopt_recalc_y) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ipopt_recalc_y != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ipopt_recalc_y_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ipopt_recalc_y, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nav2_smac_planner.IpoptSolverConfig.ipopt_recalc_y)
}

// optional double ipopt_mu_init = 12 [default = 0.1];
inline bool IpoptSolverConfig::_internal_has_ipopt_mu_init() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_mu_init() const {
  return _internal_has_ipopt_mu_init();
}
inline void IpoptSolverConfig::clear_ipopt_mu_init() {
  ipopt_mu_init_ = 0.1;
  _has_bits_[0] &= ~0x00000800u;
}
inline double IpoptSolverConfig::_internal_ipopt_mu_init() const {
  return ipopt_mu_init_;
}
inline double IpoptSolverConfig::ipopt_mu_init() const {
  // @@protoc_insertion_point(field_get:nav2_smac_planner.IpoptSolverConfig.ipopt_mu_init)
  return _internal_ipopt_mu_init();
}
inline void IpoptSolverConfig::_internal_set_ipopt_mu_init(double value) {
  _has_bits_[0] |= 0x00000800u;
  ipopt_mu_init_ = value;
}
inline void IpoptSolverConfig::set_ipopt_mu_init(double value) {
  _internal_set_ipopt_mu_init(value);
  // @@protoc_insertion_point(field_set:nav2_smac_planner.IpoptSolverConfig.ipopt_mu_init)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nav2_smac_planner

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nav2_smac_planner::DualWarmUpMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nav2_smac_planner::DualWarmUpMode>() {
  return ::nav2_smac_planner::DualWarmUpMode_descriptor();
}
template <> struct is_proto_enum< ::nav2_smac_planner::DistanceApproachMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nav2_smac_planner::DistanceApproachMode>() {
  return ::nav2_smac_planner::DistanceApproachMode_descriptor();
}
template <> struct is_proto_enum< ::nav2_smac_planner::DualVariableMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nav2_smac_planner::DualVariableMode>() {
  return ::nav2_smac_planner::DualVariableMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_planner_5fopen_5fspace_5fconfig_2eproto
